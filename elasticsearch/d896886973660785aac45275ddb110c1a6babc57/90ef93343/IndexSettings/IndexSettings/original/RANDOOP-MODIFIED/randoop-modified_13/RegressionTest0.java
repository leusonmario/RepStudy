import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_SHADOW_REPLICAS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.shadow_replicas" + "'", str0, "index.shadow_replicas");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.elasticsearch.common.io.stream.StreamInput streamInput0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.Builder.readFrom(streamInput0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putMapping("hi!", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_MINIMUM_COMPATIBLE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.minimum_compatible" + "'", str0, "index.version.minimum_compatible");
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm(10, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.elasticsearch.common.settings.Settings settings0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.shared_filesystem.recover_on_any_node" + "'", str0, "index.shared_filesystem.recover_on_any_node");
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.elasticsearch.common.xcontent.XContentParser xContentParser0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.Builder.fromXContent(xContentParser0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm((int) (byte) -1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        java.util.function.Predicate<java.lang.String> strPredicate2 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1, strPredicate2, indexScopedSettings3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.junit.Assert.assertNotNull(timeValueSetting0);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting0 = org.elasticsearch.index.IndexSettings.MAX_RESCORE_WINDOW_SETTING;
        org.junit.Assert.assertNotNull(intSetting0);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting0 = org.elasticsearch.index.IndexSettings.MAX_RESULT_WINDOW_SETTING;
        org.junit.Assert.assertNotNull(intSetting0);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putAlias(aliasMetaData3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.elasticsearch.gateway.MetaDataStateFormat<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataMetaDataStateFormat0 = org.elasticsearch.cluster.metadata.IndexMetaData.FORMAT;
        org.junit.Assert.assertNotNull(indexMetaDataMetaDataStateFormat0);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHARED_FILESYSTEM_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.shadow_replicas");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("hi!", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder1, params2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = null;
        java.util.function.Predicate<java.lang.String> strPredicate4 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3, strPredicate4, indexScopedSettings5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = null;
        java.util.function.Predicate<java.lang.String> strPredicate3 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2, strPredicate3, indexScopedSettings4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_UUID_NA_VALUE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "_na_" + "'", str0, "_na_");
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.common.io.stream.StreamInput streamInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = indexMetaData0.readFrom(streamInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = indexMetaData0.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.KEY_PRIMARY_TERMS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "primary_terms" + "'", str0, "primary_terms");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_BLOCK;
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putMapping(mappingMetaData3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_NUMBER_OF_REPLICAS_SETTING;
        org.junit.Assert.assertNotNull(intSetting0);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING;
        org.junit.Assert.assertNotNull(timeValueSetting0);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = null;
        java.util.function.Predicate<java.lang.String> strPredicate2 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1, strPredicate2, indexScopedSettings3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings6);
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate8, indexScopedSettings9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.number_of_replicas" + "'", str0, "index.number_of_replicas");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING;
        org.junit.Assert.assertNotNull(intSetting0);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.elasticsearch.common.io.stream.StreamInput streamInput0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.readSettingsFromStream(streamInput0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.number_of_replicas");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHRINK_SOURCE_NAME;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.index.IndexSettings.DEFAULT_FIELD_SETTING;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING;
        org.junit.Assert.assertNotNull(byteSizeValueSetting0);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate7, indexScopedSettings8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(builder2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings3, streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_PRIORITY_SETTING;
        org.junit.Assert.assertNotNull(intSetting0);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff3 = indexMetaData0.readDiffFrom(streamInput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.ALLOW_UNMAPPED;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.metadata" + "'", str0, "index.blocks.metadata");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_INDEX_UUID;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.uuid" + "'", str0, "index.uuid");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SETTING_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index." + "'", str0, "index.");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9, strPredicate14, indexScopedSettings15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3, strPredicate6, indexScopedSettings7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.KEY_ACTIVE_ALLOCATIONS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "active_allocations" + "'", str0, "active_allocations");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.read" + "'", str0, "index.blocks.read");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putAlias(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_CREATED_STRING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.created_string" + "'", str0, "index.version.created_string");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = indexMetaData2.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHRINK_SOURCE_UUID;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.metadata]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.uuid", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        org.elasticsearch.common.settings.Settings.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.settings(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        java.lang.String str5 = settings2.get("hi!");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings2, streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.junit.Assert.assertNotNull(timeValueSetting0);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mapping("index.shadow_replicas");
        boolean boolean9 = indexMetaData5.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int13 = builder12.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj15 = new java.lang.Object();
        boolean boolean16 = settings14.equals(obj15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.settings(settings14);
        java.lang.Boolean boolean20 = settings14.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14, strPredicate21, indexScopedSettings22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_UPGRADED_STRING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.upgraded_string" + "'", str0, "index.version.upgraded_string");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_SHARED_FILESYSTEM;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.shared_filesystem" + "'", str0, "index.shared_filesystem");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser4 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = indexMetaData0.fromXContent(xContentParser4, parseFieldMatcher5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = builder1.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_WRITE_BLOCK;
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap2 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = settings3.getAsBytesSize("index.version.created_string", byteSizeValue7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3, strPredicate9, indexScopedSettings10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(byteSizeValue8);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.shared_filesystem.recover_on_any_node");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.shared_filesystem.recover_on_any_node]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.read_only" + "'", str0, "index.blocks.read_only");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.put(objDictionary1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.primaryTerm((int) (short) 10, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.lang.String str0 = org.elasticsearch.common.settings.AbstractScopedSettings.ARCHIVED_SETTINGS_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "archived." + "'", str0, "archived.");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params8 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = indexMetaData0.toXContent(xContentBuilder7, params8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(params8);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_STATE_FILE_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "state-" + "'", str0, "state-");
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("_na_", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(version7);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.io.stream.StreamInput streamInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData2.readDiffFrom(streamInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting0 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING;
        org.junit.Assert.assertNotNull(durabilitySetting0);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder1.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.putMapping("primary_terms", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        boolean boolean17 = indexMetaData12.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings23);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings28 = indexSettings26.getValue(settingsSetting27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = settings28.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings28);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = settings33.equals(obj34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mapping("index.shadow_replicas");
        org.elasticsearch.Version version40 = indexMetaData37.getUpgradedVersion();
        org.elasticsearch.Version version41 = settings33.getAsVersion("index.shadow_replicas", version40);
        org.elasticsearch.Version version42 = settings28.getAsVersion("index.uuid", version41);
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings28, strPredicate43, indexScopedSettings44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(version42);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.Settings settings27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(builder2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData4.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        java.lang.Class class28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder22.put("primary_terms", class28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap0 = org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes;
        org.junit.Assert.assertNull(strMap0);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_DATA_PATH;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.data_path" + "'", str0, "index.data_path");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        boolean boolean9 = indexMetaData4.equals((java.lang.Object) builder8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings15);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting19 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings20 = indexSettings18.getValue(settingsSetting19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.apache.lucene.index.MergePolicy mergePolicy26 = indexSettings25.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings27);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(settings27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settingsSetting19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(mergePolicy26);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData2.getCustoms();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings4);
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray13 = settings4.getAsArray("index.shared_filesystem", strArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder0.put((java.lang.Object[]) strArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: array settings of key + value order doesn't hold correct number of arguments (5)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) '#', 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet0 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        org.junit.Assert.assertNotNull(wildcardSettingSet0);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        org.elasticsearch.common.io.stream.StreamInput streamInput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.readDiffFrom(streamInput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.QUERY_STRING_ANALYZE_WILDCARD;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue29 = settings23.getAsRatio("index.data_path", "index.blocks.read_only");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.read_only]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = builder7.primaryTerm((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17, strPredicate19, indexScopedSettings20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.shared_filesystem.recover_on_any_node", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_PRIORITY;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.priority" + "'", str0, "index.priority");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int57 = builder56.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj59 = new java.lang.Object();
        boolean boolean60 = settings58.equals(obj59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder56.settings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap63 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings64.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings64);
        boolean boolean69 = indexSettings68.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings71 = indexSettings68.getValue(settingsSetting70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings0.diff(settings58, settings71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Long long75 = settings72.getAsLong("index.shared_filesystem", (java.lang.Long) (-1L));
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: Failed to parse long setting [index.shared_filesystem] with value [false]");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(settingsSetting70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings2.getGroups("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        java.nio.file.Path path88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder89 = builder85.loadFromPath(path88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getGroups("index.number_of_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean49 = indexMetaData44.equals((java.lang.Object) builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings55);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getValue(settingsSetting59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings60.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings37.diff(settings38, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings65.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        boolean boolean76 = indexMetaData71.equals((java.lang.Object) builder75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData79, settings82);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings82);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings87 = indexSettings85.getValue(settingsSetting86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = settings87.getAsMap();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings64.diff(settings65, settings87);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings37.dryRun(settings65);
        org.elasticsearch.index.IndexSettings indexSettings92 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30, strPredicate36, indexScopedSettings37);
        java.util.Set<java.lang.String> strSet94 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.xcontent.XContentParser xContentParser95 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData97 = indexMetaData0.fromXContent(xContentParser95, parseFieldMatcher96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(strSet94);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.QUERY_STRING_LENIENT_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder22.put("index.shared_filesystem", (long) (byte) 10, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        java.lang.String str4 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.version.minimum_compatible", (float) 0);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.minimum_compatible]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.loadFromStream("index.shared_filesystem", inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj1 = new java.lang.Object();
        boolean boolean2 = settings0.equals(obj1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mapping("index.shadow_replicas");
        org.elasticsearch.Version version7 = indexMetaData4.getUpgradedVersion();
        org.elasticsearch.Version version8 = settings0.getAsVersion("index.shadow_replicas", version7);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj25 = new java.lang.Object();
        boolean boolean26 = settings24.equals(obj25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mapping("index.shadow_replicas");
        org.elasticsearch.Version version31 = indexMetaData28.getUpgradedVersion();
        org.elasticsearch.Version version32 = settings24.getAsVersion("index.shadow_replicas", version31);
        java.lang.Class<?> wildcardClass33 = settings24.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.put("index.blocks.read", (java.lang.Class) wildcardClass33);
        java.util.concurrent.TimeUnit timeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.put("index.shared_filesystem.recover_on_any_node", (long) (byte) 100, timeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_CREATED;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.created" + "'", str0, "index.version.created");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings settings4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = builder1.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) (byte) 100, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.put("index.shared_filesystem", (long) '#', byteSizeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings25.getAsMap();
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings2.diff(settings3, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(settings25);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder1.putMapping(mappingMetaData30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder25.put("index.shared_filesystem", (long) (byte) -1, byteSizeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.put(settings27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAllAliases();
        java.lang.String str9 = builder8.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.put("archived.", (long) 10000, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue90 = settings57.getAsMemory("", "index.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [] with value [index.] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData6.fromXContent(xContentParser10, parseFieldMatcher11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.priority", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("_all", "state-");
        java.nio.file.Path path26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.loadFromPath(path26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_CREATION_DATE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.creation_date" + "'", str0, "index.creation_date");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        java.lang.String[] strArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.extendArray("index.data_path", strArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.common.xcontent.XContentParser xContentParser68 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = indexMetaData63.fromXContent(xContentParser68, parseFieldMatcher69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.io.stream.StreamInput streamInput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = indexMetaData0.readFrom(streamInput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.diff(settings13, settings35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings35, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput45 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData4.writeTo(streamOutput45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder9, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        // The following exception was thrown during execution in test generation
        try {
            long long70 = indexMetaData63.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        boolean boolean16 = indexMetaData12.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData12.getSettings();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder19.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        boolean boolean27 = indexMetaData22.equals((java.lang.Object) builder26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings33);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings38 = indexSettings36.getValue(settingsSetting37);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings38.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder21.putProperties(strMap40, strPredicate41, strFunction42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = indexScopedSettings0.updateDynamicSettings(settings18, builder19, builder43, "_na_");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: _na_ setting [index.number_of_shards], not dynamically updateable");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.put("archived.", (long) (short) 100, byteSizeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings settings29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.put(settings29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        org.apache.lucene.index.MergePolicy mergePolicy23 = indexSettings22.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings22.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings24, strPredicate26, indexScopedSettings27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(mergePolicy23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strPredicate26);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = indexMetaData0.toXContent(xContentBuilder5, params6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(params6);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_CREATION_DATE_STRING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.creation_date_string" + "'", str0, "index.creation_date_string");
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("active_allocations", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        long long28 = indexMetaData26.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        boolean boolean35 = indexMetaData30.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap36 = indexMetaData30.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff37 = indexMetaData26.diff(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings39.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings39.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean50 = indexMetaData45.equals((java.lang.Object) builder49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings56);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings56);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings61 = indexSettings59.getValue(settingsSetting60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = settings61.getAsMap();
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings38.diff(settings39, settings61);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings66.addSettingsUpdateConsumer(settingsSetting67, settingsConsumer68);
        org.elasticsearch.index.IndexSettings indexSettings70 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings61, strPredicate65, indexScopedSettings66);
        java.lang.String[] strArray72 = settings61.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder0.put((java.lang.Object[]) strArray72);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap36);
        org.junit.Assert.assertNotNull(indexMetaDataDiff37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.blocks.write" + "'", str0, "index.blocks.write");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.readDiffFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.auto_expand_replicas" + "'", str0, "index.auto_expand_replicas");
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings37.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings5.getAsTime("hi!", timeValue38);
        indexScopedSettings0.validate(settings5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue43 = settings5.getAsMemory("_na_", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [_na_] with value [index.auto_expand_replicas] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        java.lang.Object[] objArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(objArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_UPGRADED;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.version.upgraded" + "'", str0, "index.version.upgraded");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        boolean boolean32 = indexMetaData27.equals((java.lang.Object) builder31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getValue(settingsSetting42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.apache.lucene.index.MergePolicy mergePolicy49 = indexSettings48.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = indexMetaData59.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        boolean boolean64 = indexMetaData59.equals((java.lang.Object) builder63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData65.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings70);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings70);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting74 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings75 = indexSettings73.getValue(settingsSetting74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings75);
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings75.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings75);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings75.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings0.diff(settings50, settings75);
        org.elasticsearch.common.unit.SizeValue sizeValue83 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue84 = settings75.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue83);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap87 = indexMetaData86.getCustoms();
        long long88 = indexMetaData86.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData86);
        boolean boolean91 = indexMetaData86.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version92 = indexMetaData86.getCreationVersion();
        org.elasticsearch.Version version93 = settings75.getAsVersion("active_allocations", version92);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings75, streamOutput94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(mergePolicy49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNull(mappingMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settingsSetting74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNull(sizeValue84);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertNotNull(strImmutableOpenMap87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(version92);
        org.junit.Assert.assertNotNull(version93);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        boolean boolean32 = indexMetaData27.equals((java.lang.Object) builder31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getValue(settingsSetting42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.apache.lucene.index.MergePolicy mergePolicy49 = indexSettings48.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = indexMetaData59.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        boolean boolean64 = indexMetaData59.equals((java.lang.Object) builder63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData65.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings70);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings70);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting74 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings75 = indexSettings73.getValue(settingsSetting74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings75);
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings75.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings75);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings75.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings0.diff(settings50, settings75);
        boolean boolean83 = indexScopedSettings0.hasDynamicSetting("index.version.created_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(mergePolicy49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNull(mappingMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settingsSetting74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings16 = settings14.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings14.getAsTime("index.blocks.metadata", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        boolean boolean28 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings14.getAsTime("index.shared_filesystem", timeValue29);
        java.lang.String[] strArray33 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray35 = settings14.getAsArray("index.data_path", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.common.xcontent.XContentParser xContentParser37 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = indexMetaData0.fromXContent(xContentParser37, parseFieldMatcher38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("index.shadow_replicas");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            mappingMetaData4.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData4);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.auto_expand_replicas");
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHADOW_REPLICAS_SETTING;
        org.junit.Assert.assertNotNull(booleanSetting0);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("");
        org.elasticsearch.common.xcontent.XContentParser xContentParser6 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexMetaData0.fromXContent(xContentParser6, parseFieldMatcher7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings3, streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings3);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings3, streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_DATA_PATH_SETTING;
        org.junit.Assert.assertNotNull(strSetting0);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        org.elasticsearch.common.settings.Settings settings27 = indexSettings26.getSettings();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings26.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.putCustom("_na_", custom8);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.primaryTerm((int) (byte) 100, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.diff(settings13, settings35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings35, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting46 = indexScopedSettings40.get("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNotNull(wildcardSetting46);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(aliasMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.readDiffFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        int int7 = indexSettings3.getMaxRescoreWindow();
        org.elasticsearch.index.translog.Translog.Durability durability8 = indexSettings3.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + durability8 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability8.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = builder1.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData30.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        boolean boolean35 = indexMetaData30.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings41);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting45 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings46 = indexSettings44.getValue(settingsSetting45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings46.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder29.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.apache.lucene.index.MergePolicy mergePolicy56 = indexSettings55.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getSettings();
        org.elasticsearch.common.settings.Settings settings59 = settings57.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue62 = settings57.getAsTime("index.blocks.metadata", timeValue61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData65.getCustoms();
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings67);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings67);
        boolean boolean70 = indexSettings69.hasCustomDataPath();
        boolean boolean71 = indexSettings69.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings69.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = settings57.getAsTime("index.shared_filesystem", timeValue72);
        java.lang.String[] strArray76 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray78 = settings57.getAsArray("index.data_path", strArray76, (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings57.filter(strPredicate79);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction81 = null;
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder2.putProperties(strMap48, strPredicate79, strFunction81);
        java.io.InputStream inputStream84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder85 = builder2.loadFromStream("index.number_of_replicas", inputStream84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settingsSetting45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(mergePolicy56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder9.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj25 = new java.lang.Object();
        boolean boolean26 = settings24.equals(obj25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mapping("index.shadow_replicas");
        org.elasticsearch.Version version31 = indexMetaData28.getUpgradedVersion();
        org.elasticsearch.Version version32 = settings24.getAsVersion("index.shadow_replicas", version31);
        java.lang.Class<?> wildcardClass33 = settings24.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.put("index.blocks.read", (java.lang.Class) wildcardClass33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder0.loadFromSource("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.loadFromStream("", inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        java.lang.String str20 = settings18.get("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings18.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str8 = builder7.index();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = builder7.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData30.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        boolean boolean35 = indexMetaData30.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings41);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting45 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings46 = indexSettings44.getValue(settingsSetting45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings46.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder29.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.apache.lucene.index.MergePolicy mergePolicy56 = indexSettings55.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getSettings();
        org.elasticsearch.common.settings.Settings settings59 = settings57.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue62 = settings57.getAsTime("index.blocks.metadata", timeValue61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData65.getCustoms();
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings67);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings67);
        boolean boolean70 = indexSettings69.hasCustomDataPath();
        boolean boolean71 = indexSettings69.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings69.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = settings57.getAsTime("index.shared_filesystem", timeValue72);
        java.lang.String[] strArray76 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray78 = settings57.getAsArray("index.data_path", strArray76, (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings57.filter(strPredicate79);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction81 = null;
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder2.putProperties(strMap48, strPredicate79, strFunction81);
        java.nio.file.Path path83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder84 = builder2.loadFromPath(path83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settingsSetting45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(mergePolicy56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        org.apache.lucene.index.MergePolicy mergePolicy72 = indexSettings71.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings73 = indexSettings71.getSettings();
        org.elasticsearch.common.settings.Settings settings75 = settings73.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue77 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue78 = settings73.getAsTime("index.blocks.metadata", timeValue77);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData81 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap82 = indexMetaData81.getCustoms();
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData81, settings83);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings83);
        boolean boolean86 = indexSettings85.hasCustomDataPath();
        boolean boolean87 = indexSettings85.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings85.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue89 = settings73.getAsTime("index.shared_filesystem", timeValue88);
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings73);
        java.lang.Class<?> wildcardClass91 = settings90.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(mergePolicy72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(timeValue78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(indexMetaData81);
        org.junit.Assert.assertNotNull(strImmutableOpenMap82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = indexMetaData0.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(params11);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        java.util.concurrent.TimeUnit timeUnit7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.put("index.creation_date", (long) ' ', timeUnit7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getByPrefix("index.blocks.read_only");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings19, streamOutput20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.index.Index index14 = indexMetaData11.getMergeSourceIndex();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.common.settings.Settings settings16 = null;
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting19 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer20 = null;
        indexScopedSettings18.addSettingsUpdateConsumer(settingsSetting19, settingsConsumer20);
        boolean boolean23 = indexScopedSettings18.hasDynamicSetting("index.");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16, strPredicate17, indexScopedSettings18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertNotNull(settingsSetting19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.lang.String str0 = org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "index.number_of_shards" + "'", str0, "index.number_of_shards");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder6 = builder2.put("index.blocks.write", (long) (short) 0, byteSizeUnit5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.apache.lucene.index.MergePolicy mergePolicy14 = indexSettings13.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings13.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue19 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue20 = settings15.getAsTime("index.blocks.metadata", timeValue19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        boolean boolean28 = indexSettings27.hasCustomDataPath();
        boolean boolean29 = indexSettings27.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue31 = settings15.getAsTime("index.shared_filesystem", timeValue30);
        java.lang.String[] strArray34 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray36 = settings15.getAsArray("index.data_path", strArray34, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings15.getGroups("state-");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.common.xcontent.XContentParser xContentParser41 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = indexMetaData0.fromXContent(xContentParser41, parseFieldMatcher42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(mergePolicy14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.unit.TimeValue timeValue4 = indexSettings3.getGlobalCheckpointInterval();
        boolean boolean5 = indexSettings3.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(timeValue4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeValue6);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.apache.lucene.index.MergePolicy mergePolicy9 = indexSettings8.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings8.getSettings();
        org.elasticsearch.common.settings.Settings settings12 = settings10.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue14 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue15 = settings10.getAsTime("index.blocks.metadata", timeValue14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        boolean boolean23 = indexSettings22.hasCustomDataPath();
        boolean boolean24 = indexSettings22.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue26 = settings10.getAsTime("index.shared_filesystem", timeValue25);
        java.lang.String[] strArray29 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray31 = settings10.getAsArray("index.data_path", strArray29, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = indexMetaData0.toXContent(xContentBuilder34, params35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(mergePolicy9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(params35);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        int int7 = indexSettings3.getMaxRescoreWindow();
        java.lang.String str8 = indexSettings3.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putAlias(aliasMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.get("index.data_path");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.internalMap();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("index.creation_date_string", (long) 10000, byteSizeUnit6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder91 = builder84.put("hi!", (long) (short) 1, byteSizeUnit90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.readDiffFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.version.upgraded_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.version.upgraded_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting0 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.junit.Assert.assertNotNull(timeValueSetting0);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int62 = builder61.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj64 = new java.lang.Object();
        boolean boolean65 = settings63.equals(obj64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder61.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings63.getAsBytesSize("index.version.upgraded_string", byteSizeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings0.diff(settings58, settings63);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings63, streamOutput74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(settings73);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        boolean boolean32 = indexMetaData27.equals((java.lang.Object) builder31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getValue(settingsSetting42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.apache.lucene.index.MergePolicy mergePolicy49 = indexSettings48.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = indexMetaData59.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        boolean boolean64 = indexMetaData59.equals((java.lang.Object) builder63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData65.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings70);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings70);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting74 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings75 = indexSettings73.getValue(settingsSetting74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings75);
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings75.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings75);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings75.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings0.diff(settings50, settings75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap84 = indexMetaData83.getCustoms();
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData83, settings85);
        org.apache.lucene.index.MergePolicy mergePolicy87 = indexSettings86.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings88 = indexSettings86.getSettings();
        org.elasticsearch.common.settings.Settings settings90 = settings88.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue92 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue93 = settings88.getAsTime("index.blocks.metadata", timeValue92);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.TimeValue timeValue94 = settings81.getAsTime("index.blocks.read", timeValue93);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [index.blocks.read] with value [false] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(mergePolicy49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNull(mappingMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settingsSetting74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(mergePolicy87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertNotNull(timeValue93);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for []");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = indexMetaData0.readFrom(streamInput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        org.elasticsearch.common.io.stream.StreamInput streamInput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = indexMetaData0.readFrom(streamInput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int57 = builder56.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj59 = new java.lang.Object();
        boolean boolean60 = settings58.equals(obj59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder56.settings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap63 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings64.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings64);
        boolean boolean69 = indexSettings68.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings71 = indexSettings68.getValue(settingsSetting70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings0.diff(settings58, settings71);
        java.lang.String str73 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(settingsSetting70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.Version version12 = indexMetaData4.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser13 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = indexMetaData4.fromXContent(xContentParser13, parseFieldMatcher14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = builder21.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.remove("index.version.created_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings51);
        org.apache.lucene.index.MergePolicy mergePolicy53 = indexSettings52.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings54 = indexSettings52.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings58.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings79);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap84 = settings79.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings4.diff(settings54, settings79);
        org.elasticsearch.common.unit.SizeValue sizeValue87 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue88 = settings79.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue87);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap91 = indexMetaData90.getCustoms();
        long long92 = indexMetaData90.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData90);
        boolean boolean95 = indexMetaData90.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version96 = indexMetaData90.getCreationVersion();
        org.elasticsearch.Version version97 = settings79.getAsVersion("active_allocations", version96);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder0.put("index.number_of_replicas", version96);
        java.util.Map<java.lang.String, java.lang.String> strMap99 = builder0.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(mergePolicy53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(sizeValue88);
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertNotNull(strImmutableOpenMap91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(version96);
        org.junit.Assert.assertNotNull(version97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(strMap99);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int62 = builder61.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj64 = new java.lang.Object();
        boolean boolean65 = settings63.equals(obj64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder61.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings63.getAsBytesSize("index.version.upgraded_string", byteSizeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings0.diff(settings58, settings63);
        org.elasticsearch.common.unit.SizeValue sizeValue75 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue76 = settings58.getAsSize("index.version.upgraded_string", sizeValue75);
        java.util.Set<java.lang.String> strSet77 = settings58.names();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNull(sizeValue76);
        org.junit.Assert.assertNotNull(strSet77);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int62 = builder61.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj64 = new java.lang.Object();
        boolean boolean65 = settings63.equals(obj64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder61.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings63.getAsBytesSize("index.version.upgraded_string", byteSizeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings0.diff(settings58, settings63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap77 = indexMetaData76.getCustoms();
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData76, settings78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings78);
        org.elasticsearch.common.unit.TimeValue timeValue81 = indexSettings80.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings80.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting83 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings84 = indexSettings80.getValue(settingsSetting83);
        org.elasticsearch.common.settings.Settings settings85 = indexSettings80.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("active_allocations", settings85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [active_allocations]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(strImmutableOpenMap77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(settingsSetting83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings85);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.creationDate((long) '#');
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.putAlias(builder42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder0.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.write");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.write]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        int int12 = builder11.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte15 = state14.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.state(state14);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = builder11.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 1 + "'", byte15 == (byte) 1);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings7 = settings3.filter(strPredicate6);
        java.lang.String str10 = settings7.get("primary_terms", "index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.shared_filesystem" + "'", str10, "index.shared_filesystem");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("active_allocations", false);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder30.put("index.version.created", (long) (short) 1, byteSizeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.put(objDictionary4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getNodeSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue13 = settings10.getAsRatio("index.priority", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.shadow_replicas]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.remove("index.version.created_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings51);
        org.apache.lucene.index.MergePolicy mergePolicy53 = indexSettings52.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings54 = indexSettings52.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings58.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings79);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap84 = settings79.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings4.diff(settings54, settings79);
        org.elasticsearch.common.unit.SizeValue sizeValue87 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue88 = settings79.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue87);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap91 = indexMetaData90.getCustoms();
        long long92 = indexMetaData90.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData90);
        boolean boolean95 = indexMetaData90.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version96 = indexMetaData90.getCreationVersion();
        org.elasticsearch.Version version97 = settings79.getAsVersion("active_allocations", version96);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder0.put("index.number_of_replicas", version96);
        java.util.Map<java.lang.String, java.lang.String> strMap99 = builder98.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(mergePolicy53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(sizeValue88);
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertNotNull(strImmutableOpenMap91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(version96);
        org.junit.Assert.assertNotNull(version97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(strMap99);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.shadow_replicas", "index.", "index.blocks.write", "index.uuid", "index.version.upgraded_string", "index.number_of_replicas", "index.blocks.metadata", "index.blocks.metadata", "index.shared_filesystem", "hi!", "index.creation_date_string", "_all", "index.creation_date_string", "index.version.upgraded_string", "index.", "index.blocks.metadata", "index.blocks.metadata" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder25.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList45);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.put(objDictionary48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(version6);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params13 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder12, params13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(params13);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        boolean boolean9 = indexMetaData0.isSameUUID("_na_");
        int int10 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.readDiffFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.diff(settings13, settings35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings35, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.settings.Setting.Property property45 = indexScopedSettings40.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting47 = indexScopedSettings40.get("index.blocks.read");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertTrue("'" + property45 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property45.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(wildcardSetting47);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isQueryStringLenient();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings6.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings6.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings14 = indexSettings6.getValue(settingsSetting13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(settingsSetting13);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for id [-1]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.blocks.read", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int62 = builder61.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj64 = new java.lang.Object();
        boolean boolean65 = settings63.equals(obj64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder61.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings63.getAsBytesSize("index.version.upgraded_string", byteSizeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings0.diff(settings58, settings63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData77 = indexMetaData75.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        boolean boolean80 = indexMetaData75.equals((java.lang.Object) builder79);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData81 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap82 = indexMetaData81.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData84 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap85 = indexMetaData84.getCustoms();
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData84, settings86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData83, settings86);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData81, settings86);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting90 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings91 = indexSettings89.getValue(settingsSetting90);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings91);
        org.elasticsearch.Version version93 = indexSettings92.getIndexVersionCreated();
        java.lang.String str94 = indexSettings92.getNodeName();
        org.elasticsearch.Version version95 = indexSettings92.getIndexVersionCreated();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.Version version96 = settings73.getAsVersion("index.data_path", version95);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: Failed to parse version setting [index.data_path] with value []");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNull(mappingMetaData77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(indexMetaData81);
        org.junit.Assert.assertNotNull(strImmutableOpenMap82);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNotNull(indexMetaData84);
        org.junit.Assert.assertNotNull(strImmutableOpenMap85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settingsSetting90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(version93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(version95);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder6 = builder2.put("index.creation_date", 0L, byteSizeUnit5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        // The following exception was thrown during execution in test generation
        try {
            long long5 = builder1.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("primary_terms");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [primary_terms]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("primary_terms");
        long long4 = builder1.version();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Set<java.lang.String> strSet10 = settings6.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.putActiveAllocationIds((int) (short) 0, strSet10);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = builder1.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean17 = indexMetaData12.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = indexMetaData12.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData12.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean21 = indexMetaData12.equals((java.lang.Object) params20);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = indexMetaData0.toXContent(xContentBuilder11, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(params20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        boolean boolean12 = indexMetaData7.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData7.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean16 = indexMetaData7.equals((java.lang.Object) params15);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder6, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.apache.lucene.index.MergePolicy mergePolicy14 = indexSettings13.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings13.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue19 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue20 = settings15.getAsTime("index.blocks.metadata", timeValue19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        boolean boolean28 = indexSettings27.hasCustomDataPath();
        boolean boolean29 = indexSettings27.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue31 = settings15.getAsTime("index.shared_filesystem", timeValue30);
        java.lang.String[] strArray34 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray36 = settings15.getAsArray("index.data_path", strArray34, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings15.getGroups("state-");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput42 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(mergePolicy14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int62 = builder61.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj64 = new java.lang.Object();
        boolean boolean65 = settings63.equals(obj64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder61.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue71 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue72 = settings63.getAsBytesSize("index.version.upgraded_string", byteSizeValue71);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings0.diff(settings58, settings63);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting75 = indexScopedSettings0.get("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNull(byteSizeValue72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNull(wildcardSetting75);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("active_allocations", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder25.replacePropertyPlaceholders();
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.loadFromStream("index.blocks.read", inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        java.lang.String str68 = indexScopedSettings67.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings16.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings19);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue23 = settings19.getAsRatio("index.creation_date_string", "index.priority");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.priority]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray11 = settings2.getAsArray("index.shared_filesystem", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings2.getAsMemory("index.blocks.metadata", "index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.metadata] with value [index.blocks.read] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.apache.lucene.index.MergePolicy mergePolicy15 = indexSettings14.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getSettings();
        org.elasticsearch.common.settings.Settings settings18 = settings16.getAsSettings("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        org.elasticsearch.Version version37 = indexSettings36.getIndexVersionCreated();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher38 = indexSettings36.getParseFieldMatcher();
        boolean boolean39 = settings16.equals((java.lang.Object) parseFieldMatcher38);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(mergePolicy15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(parseFieldMatcher38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("state-");
        java.lang.String str2 = builder1.index();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "state-" + "'", str2, "state-");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings6.getNodeSettings();
        java.lang.String str12 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("state-");
        // The following exception was thrown during execution in test generation
        try {
            long long15 = builder11.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = builder1.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder5.putMapping("index.creation_date", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.index.Index index1 = indexMetaData0.getIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        long long5 = indexMetaData3.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean8 = indexMetaData3.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData3.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData3.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean12 = indexMetaData3.equals((java.lang.Object) params11);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = indexMetaData0.toXContent(xContentBuilder2, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(index1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        boolean boolean28 = indexMetaData23.equals((java.lang.Object) builder27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings34);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings39 = indexSettings37.getValue(settingsSetting38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings39.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        boolean boolean48 = indexMetaData43.equals((java.lang.Object) builder47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings54);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getValue(settingsSetting58);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap62 = indexMetaData61.getCustoms();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings63);
        org.apache.lucene.index.MergePolicy mergePolicy65 = indexSettings64.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings66 = indexSettings64.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getAsGroups(false);
        java.lang.String[] strArray71 = settings66.getAsArray("primary_terms");
        java.lang.String[] strArray73 = settings39.getAsArray("index.shared_filesystem", strArray71, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder0.put((java.lang.Object[]) strArray73);
        java.lang.String str76 = builder0.remove("index.shared_filesystem");
        java.lang.Class class78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder79 = builder0.put("index.uuid", class78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(mergePolicy65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings25.getAsMap();
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings2.diff(settings3, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder1.numberOfShards((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = builder31.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = builder4.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.settings(builder40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        java.lang.String[] strArray7 = settings5.getAsArray("index.version.upgraded");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings5, streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        int int7 = indexSettings3.getMaxRescoreWindow();
        java.lang.String str8 = indexSettings3.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_all" + "'", str8, "_all");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings9);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings9.filter(strPredicate12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings17);
        int int22 = indexSettings21.getMaxResultWindow();
        boolean boolean24 = indexSettings21.matchesIndexName("index.priority");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = settings13.getAsBytesSize("index.blocks.metadata", byteSizeValue25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue30 = settings13.getAsRatio("index.uuid", "index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.upgraded]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        boolean boolean30 = indexMetaData25.equals((java.lang.Object) builder29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings36);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings36);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting40 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings41 = indexSettings39.getValue(settingsSetting40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings41.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean50 = indexMetaData45.equals((java.lang.Object) builder49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings56);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings56);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings61 = indexSettings59.getValue(settingsSetting60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap64 = indexMetaData63.getCustoms();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings65);
        org.apache.lucene.index.MergePolicy mergePolicy67 = indexSettings66.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings68 = indexSettings66.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings68.getAsGroups(false);
        java.lang.String[] strArray73 = settings68.getAsArray("primary_terms");
        java.lang.String[] strArray75 = settings41.getAsArray("index.shared_filesystem", strArray73, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder2.put((java.lang.Object[]) strArray75);
        java.lang.String str78 = builder2.remove("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder1.settings(builder2);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settingsSetting40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(strImmutableOpenMap64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(mergePolicy67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) (byte) 10);
        long long5 = builder2.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.settings(settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.numberOfShards((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = builder15.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        int int2 = builder1.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.primaryTerm((int) (byte) 100, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue90 = settings57.getAsMemory("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#] with value [index.] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) (byte) 10);
        long long5 = builder2.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.settings(settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.putAlias(aliasMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting12 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings0.get(settingsSetting12);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData15.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        boolean boolean20 = indexMetaData15.equals((java.lang.Object) builder19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings26);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings31 = indexSettings29.getValue(settingsSetting30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = settings31.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction35 = null;
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder14.putProperties(strMap33, strPredicate34, strFunction35);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj39 = new java.lang.Object();
        boolean boolean40 = settings38.equals(obj39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData42.mapping("index.shadow_replicas");
        org.elasticsearch.Version version45 = indexMetaData42.getUpgradedVersion();
        org.elasticsearch.Version version46 = settings38.getAsVersion("index.shadow_replicas", version45);
        java.lang.Class<?> wildcardClass47 = settings38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder14.put("index.blocks.read", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder14.loadFromSource("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Failed to parse value [org.elasticsearch.common.settings.Settings] cannot be parsed to boolean [ true/1/on/yes OR false/0/off/no ]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(settingsSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        boolean boolean62 = indexMetaData57.equals((java.lang.Object) builder61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap64 = indexMetaData63.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap67 = indexMetaData66.getCustoms();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings68);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings68);
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings68);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting72 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings73 = indexSettings71.getValue(settingsSetting72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings73);
        java.util.Map<java.lang.String, java.lang.String> strMap75 = settings73.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction77 = null;
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder56.putProperties(strMap75, strPredicate76, strFunction77);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder56.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder56.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder56.put("active_allocations", false);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [active_allocations]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(strImmutableOpenMap64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settingsSetting72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.putAlias(aliasMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData7, xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(params9);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.apache.lucene.index.MergePolicy mergePolicy22 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getSettings();
        org.elasticsearch.common.settings.Settings settings25 = settings23.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue28 = settings23.getAsTime("index.blocks.metadata", timeValue27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings33);
        boolean boolean36 = indexSettings35.hasCustomDataPath();
        boolean boolean37 = indexSettings35.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings35.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings23.getAsTime("index.shared_filesystem", timeValue38);
        java.lang.String[] strArray42 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray44 = settings23.getAsArray("index.data_path", strArray42, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings23);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings51.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = settings51.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder50.putProperties(strMap55, strPredicate56, strFunction57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23, strPredicate56, indexScopedSettings59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(mergePolicy22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean39 = indexMetaData34.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap40 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData30.diff(indexMetaData34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings43.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData49.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        boolean boolean54 = indexMetaData49.equals((java.lang.Object) builder53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = settings65.getAsMap();
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings42.diff(settings43, settings65);
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.index.IndexSettings indexSettings74 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData34, settings65, strPredicate69, indexScopedSettings70);
        java.lang.String[] strArray76 = settings65.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder2.putArray("_na_", strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder77.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder77.putNull("index.blocks.read");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.put(objDictionary82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap40);
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNull(mappingMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        boolean boolean19 = indexSettings17.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings17.getNodeSettings();
        java.lang.String str21 = indexSettings17.getUUID();
        boolean boolean22 = indexSettings17.isQueryStringAllowLeadingWildcard();
        java.lang.String str23 = indexSettings17.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_all" + "'", str23, "_all");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        int int70 = indexMetaData63.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData63);
        int int72 = indexMetaData63.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("active_allocations", false);
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.put("index.version.created_string", (long) (byte) -1, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.loadFromStream("archived.", inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings6.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder5.putProperties(strMap10, strPredicate11, strFunction12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.settings(builder5);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = builder14.primaryTerm(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = settings5.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue9 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue10 = settings5.getAsTime("index.blocks.metadata", timeValue9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings15);
        boolean boolean18 = indexSettings17.hasCustomDataPath();
        boolean boolean19 = indexSettings17.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings17.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue21 = settings5.getAsTime("index.shared_filesystem", timeValue20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = settings5.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        boolean boolean8 = indexSettings3.matchesIndexName("index.blocks.read");
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig9 = indexSettings3.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig9);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        org.apache.lucene.index.MergePolicy mergePolicy72 = indexSettings71.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings73 = indexSettings71.getSettings();
        org.elasticsearch.common.settings.Settings settings75 = settings73.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue77 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue78 = settings73.getAsTime("index.blocks.metadata", timeValue77);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData81 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap82 = indexMetaData81.getCustoms();
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData81, settings83);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings83);
        boolean boolean86 = indexSettings85.hasCustomDataPath();
        boolean boolean87 = indexSettings85.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings85.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue89 = settings73.getAsTime("index.shared_filesystem", timeValue88);
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.common.settings.Setting.Property property91 = indexScopedSettings67.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(mergePolicy72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(timeValue78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(indexMetaData81);
        org.junit.Assert.assertNotNull(strImmutableOpenMap82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertTrue("'" + property91 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property91.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(0);
        java.lang.String str4 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.putAlias(builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings10);
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings11.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings11.getSettings();
        java.lang.String[] strArray15 = settings13.getAsArray("index.version.upgraded");
        java.lang.String[] strArray17 = settings3.getAsArray("index.blocks.read", strArray15, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.put((java.lang.Object[]) strArray15);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder2.put(objDictionary19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_shards");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putMapping("index.number_of_shards", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.apache.lucene.index.MergePolicy mergePolicy10 = indexSettings9.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings9.getSettings();
        org.elasticsearch.common.settings.Settings settings13 = settings11.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue15 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue16 = settings11.getAsTime("index.blocks.metadata", timeValue15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings21);
        boolean boolean24 = indexSettings23.hasCustomDataPath();
        boolean boolean25 = indexSettings23.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings23.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue27 = settings11.getAsTime("index.shared_filesystem", timeValue26);
        java.lang.String[] strArray30 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray32 = settings11.getAsArray("index.data_path", strArray30, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings11.getGroups("state-");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings40.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = settings40.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction46 = null;
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder39.putProperties(strMap44, strPredicate45, strFunction46);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate45, indexScopedSettings48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(mergePolicy10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder3.settings(settings27);
        org.elasticsearch.common.settings.Settings settings33 = settings27.getAsSettings("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(settings27);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        boolean boolean42 = indexMetaData37.equals((java.lang.Object) builder41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData46.getCustoms();
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings48);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings48);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings53 = indexSettings51.getValue(settingsSetting52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.apache.lucene.index.MergePolicy mergePolicy59 = indexSettings58.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings60);
        java.lang.String str62 = indexSettings61.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings61.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue64 = settings35.getAsTime("_all", timeValue63);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(mergePolicy59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValue64);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        boolean boolean14 = indexSettings13.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings13.getValue(settingsSetting15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings18.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        boolean boolean29 = indexMetaData24.equals((java.lang.Object) builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings40 = indexSettings38.getValue(settingsSetting39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = settings40.getAsMap();
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings17.diff(settings18, settings40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData51.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        boolean boolean56 = indexMetaData51.equals((java.lang.Object) builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData60.getCustoms();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings62);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings62);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings67 = indexSettings65.getValue(settingsSetting66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = settings67.getAsMap();
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings44.diff(settings45, settings67);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings17.dryRun(settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap76 = indexMetaData75.getCustoms();
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings77);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings77);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings77);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting81 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings82 = indexSettings80.getValue(settingsSetting81);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer83 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        indexScopedSettings17.addSettingsUpdateConsumer(settingsSetting81, settingsConsumer83, settingsConsumer84);
        org.elasticsearch.common.settings.Settings settings86 = indexSettings13.getValue(settingsSetting81);
        org.elasticsearch.common.settings.Settings settings87 = indexSettings3.getValue(settingsSetting81);
        java.lang.String str88 = indexSettings3.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settingsSetting81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        long long26 = indexMetaData24.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        long long30 = indexMetaData28.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        boolean boolean33 = indexMetaData28.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap34 = indexMetaData28.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData24.diff(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings37.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings37.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        boolean boolean48 = indexMetaData43.equals((java.lang.Object) builder47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings54);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getValue(settingsSetting58);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = settings59.getAsMap();
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings36.diff(settings37, settings59);
        java.util.function.Predicate<java.lang.String> strPredicate63 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting65 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        indexScopedSettings64.addSettingsUpdateConsumer(settingsSetting65, settingsConsumer66);
        org.elasticsearch.index.IndexSettings indexSettings68 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings59, strPredicate63, indexScopedSettings64);
        java.lang.String[] strArray70 = settings59.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder22.extendArray("state-", strArray70);
        java.util.concurrent.TimeUnit timeUnit74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder75 = builder71.put("", (long) '#', timeUnit74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap34);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settingsSetting65);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        long long6 = builder4.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params5 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder4, params5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(params5);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        int int10 = builder9.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = settings34.equals(obj35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("index.shadow_replicas");
        org.elasticsearch.Version version41 = indexMetaData38.getUpgradedVersion();
        org.elasticsearch.Version version42 = settings34.getAsVersion("index.shadow_replicas", version41);
        org.elasticsearch.Version version43 = settings29.getAsVersion("index.uuid", version42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        java.lang.Class<?> wildcardClass45 = indexMetaData0.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings37.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings5.getAsTime("hi!", timeValue38);
        indexScopedSettings0.validate(settings5);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings5, streamOutput41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings16.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings19);
        org.elasticsearch.common.settings.Settings settings22 = settings19.getAsSettings("index.priority");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue25 = settings22.getAsRatio("index.creation_date", "index.data_path");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.data_path]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer66, settingsConsumer67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer71 = null;
        indexScopedSettings69.addSettingsUpdateConsumer(settingsSetting70, settingsConsumer71);
        boolean boolean74 = indexScopedSettings69.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting76 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer77 = null;
        indexScopedSettings75.addSettingsUpdateConsumer(settingsSetting76, settingsConsumer77);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer79 = null;
        indexScopedSettings69.addSettingsUpdateConsumer(settingsSetting76, settingsConsumer79);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting81 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings69.get(settingsSetting81);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer83 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting81, settingsConsumer83, settingsConsumer84);
        java.lang.String str86 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertNotNull(settingsSetting70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertNotNull(settingsSetting76);
        org.junit.Assert.assertNotNull(settingsSetting81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("", 0.0d);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.put(objDictionary11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("archived.");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput69 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData63.writeTo(streamOutput69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings37.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings5.getAsTime("hi!", timeValue38);
        indexScopedSettings0.validate(settings5);
        boolean boolean41 = settings5.isEmpty();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.readDiffFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.metadata", custom3);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("_all", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder0.put("index.data_path", true);
        java.lang.String str30 = builder0.remove("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder0.put("", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings37);
        org.apache.lucene.index.MergePolicy mergePolicy39 = indexSettings38.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings40 = indexSettings38.getSettings();
        org.elasticsearch.common.settings.Settings settings42 = settings40.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue44 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue45 = settings40.getAsTime("index.blocks.metadata", timeValue44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData48.getCustoms();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings50);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings50);
        boolean boolean53 = indexSettings52.hasCustomDataPath();
        boolean boolean54 = indexSettings52.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings52.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue56 = settings40.getAsTime("index.shared_filesystem", timeValue55);
        java.lang.String[] strArray59 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray61 = settings40.getAsArray("index.data_path", strArray59, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder33.putArray("", strArray59);
        java.nio.file.Path path63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.loadFromPath(path63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(mergePolicy39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.read_only");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.read_only]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        org.elasticsearch.common.settings.Settings settings7 = indexSettings3.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue10 = settings7.getAsRatio("index.shared_filesystem.recover_on_any_node", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [state-]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData2.getSettings();
        java.lang.String[] strArray5 = settings3.getAsArray("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings6, streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom41 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.putCustom("index.", custom41);
        long long44 = builder42.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        boolean boolean28 = indexMetaData23.equals((java.lang.Object) builder27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings34);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings39 = indexSettings37.getValue(settingsSetting38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings39.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        boolean boolean48 = indexMetaData43.equals((java.lang.Object) builder47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings54);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getValue(settingsSetting58);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap62 = indexMetaData61.getCustoms();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings63);
        org.apache.lucene.index.MergePolicy mergePolicy65 = indexSettings64.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings66 = indexSettings64.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getAsGroups(false);
        java.lang.String[] strArray71 = settings66.getAsArray("primary_terms");
        java.lang.String[] strArray73 = settings39.getAsArray("index.shared_filesystem", strArray71, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder0.put((java.lang.Object[]) strArray73);
        java.util.concurrent.TimeUnit timeUnit77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder78 = builder0.put("state-", (-1L), timeUnit77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(mergePolicy65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = settings8.equals(obj9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.Version version15 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.Version version16 = settings8.getAsVersion("index.shadow_replicas", version15);
        java.lang.Class<?> wildcardClass17 = settings8.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("active_allocations", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.apache.lucene.index.MergePolicy mergePolicy24 = indexSettings23.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getSettings();
        org.elasticsearch.common.settings.Settings settings27 = settings25.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue29 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings25.getAsTime("index.blocks.metadata", timeValue29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        boolean boolean38 = indexSettings37.hasCustomDataPath();
        boolean boolean39 = indexSettings37.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue40 = indexSettings37.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue41 = settings25.getAsTime("index.shared_filesystem", timeValue40);
        java.lang.Class<?> wildcardClass42 = timeValue40.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder18.put("index.", (java.lang.Class) wildcardClass42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder18.put("index.shared_filesystem.recover_on_any_node", 1L);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder48 = builder46.put(objDictionary47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(mergePolicy24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        int int12 = builder11.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte15 = state14.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.state(state14);
        java.lang.String str17 = builder16.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 1 + "'", byte15 == (byte) 1);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for id [100]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = indexMetaData0.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = settings5.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue9 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue10 = settings5.getAsTime("index.blocks.metadata", timeValue9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings15);
        boolean boolean18 = indexSettings17.hasCustomDataPath();
        boolean boolean19 = indexSettings17.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings17.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue21 = settings5.getAsTime("index.shared_filesystem", timeValue20);
        java.lang.String[] strArray24 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray26 = settings5.getAsArray("index.data_path", strArray24, (java.lang.Boolean) false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = settings5.getAsMemory("", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [] with value [index.shadow_replicas] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str8 = builder7.index();
        int int9 = builder7.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings2.getGroups("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean10 = indexSettings9.isTTLPurgeDisabled();
        int int11 = indexSettings9.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.loadFromSource("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.upgraded_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        java.lang.String[] strArray7 = settings5.getAsArray("index.version.upgraded");
        org.elasticsearch.common.unit.TimeValue timeValue9 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue10 = settings5.getAsTime("index.data_path", timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("state-");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = builder1.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentParser xContentParser8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        org.elasticsearch.Version version27 = indexSettings26.getIndexVersionCreated();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings26.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexMetaData0.fromXContent(xContentParser8, parseFieldMatcher28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte6 = state5.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state5);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putAlias(builder9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 1 + "'", byte6 == (byte) 1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        java.nio.file.Path path88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder89 = builder84.loadFromPath(path88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder91 = builder84.put("", (long) 100, byteSizeUnit90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.primaryTerm(1, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putMapping("primary_terms", "index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        long long10 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        long long71 = builder69.primaryTerm((int) (short) 0);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = settings8.equals(obj9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.Version version15 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.Version version16 = settings8.getAsVersion("index.shadow_replicas", version15);
        java.lang.Class<?> wildcardClass17 = settings8.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("active_allocations", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.apache.lucene.index.MergePolicy mergePolicy24 = indexSettings23.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getSettings();
        org.elasticsearch.common.settings.Settings settings27 = settings25.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue29 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings25.getAsTime("index.blocks.metadata", timeValue29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        boolean boolean38 = indexSettings37.hasCustomDataPath();
        boolean boolean39 = indexSettings37.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue40 = indexSettings37.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue41 = settings25.getAsTime("index.shared_filesystem", timeValue40);
        java.lang.Class<?> wildcardClass42 = timeValue40.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder18.put("index.", (java.lang.Class) wildcardClass42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder18.put("index.shared_filesystem.recover_on_any_node", 1L);
        java.io.InputStream inputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder49 = builder18.loadFromStream("index.shadow_replicas", inputStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(mergePolicy24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(aliasMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(index3);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        boolean boolean19 = indexSettings17.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings17.getNodeSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        boolean boolean30 = indexSettings29.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings29.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue32 = settings20.getAsTime("", timeValue31);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(timeValue32);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        java.lang.String[] strArray7 = settings5.getAsArray("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = settings5.getAsMemory("index.number_of_shards", "index.creation_date_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_shards] with value [1] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        org.apache.lucene.index.MergePolicy mergePolicy72 = indexSettings71.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings73 = indexSettings71.getSettings();
        org.elasticsearch.common.settings.Settings settings75 = settings73.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue77 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue78 = settings73.getAsTime("index.blocks.metadata", timeValue77);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData81 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap82 = indexMetaData81.getCustoms();
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData81, settings83);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings83);
        boolean boolean86 = indexSettings85.hasCustomDataPath();
        boolean boolean87 = indexSettings85.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings85.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue89 = settings73.getAsTime("index.shared_filesystem", timeValue88);
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.common.settings.Settings settings91 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue94 = settings73.getAsRatio("", "index.priority");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.priority]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(mergePolicy72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(timeValue78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(indexMetaData81);
        org.junit.Assert.assertNotNull(strImmutableOpenMap82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput68 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData63.writeTo(streamOutput68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        java.lang.String str70 = indexMetaData63.getIndexUUID();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "_na_" + "'", str70, "_na_");
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.blocks.read");
        // The following exception was thrown during execution in test generation
        try {
            long long5 = builder1.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings6.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.readDiffFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings8.addSettingsUpdateConsumer(settingsSetting9, settingsConsumer10);
        boolean boolean13 = indexScopedSettings8.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer16 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(settingsSetting15, settingsConsumer16);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer18 = null;
        indexScopedSettings8.addSettingsUpdateConsumer(settingsSetting15, settingsConsumer18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        long long22 = indexMetaData20.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        long long26 = indexMetaData24.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        boolean boolean29 = indexMetaData24.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap30 = indexMetaData24.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData20.diff(indexMetaData24);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings33.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings33.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        boolean boolean44 = indexMetaData39.equals((java.lang.Object) builder43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData48.getCustoms();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings50);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings50);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings50);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting54 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings55 = indexSettings53.getValue(settingsSetting54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings55.getAsMap();
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings32.diff(settings33, settings55);
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting61 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer62 = null;
        indexScopedSettings60.addSettingsUpdateConsumer(settingsSetting61, settingsConsumer62);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData24, settings55, strPredicate59, indexScopedSettings60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = indexMetaData65.mapping("index.shadow_replicas");
        boolean boolean69 = indexMetaData65.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str70 = indexMetaData65.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff74 = indexMetaData65.diff(indexMetaData71);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = indexScopedSettings8.copy(settings55, indexMetaData71);
        boolean boolean77 = indexScopedSettings75.hasDynamicSetting("index.blocks.metadata");
        boolean boolean78 = indexMetaData0.equals((java.lang.Object) indexScopedSettings75);
        org.elasticsearch.common.io.stream.StreamInput streamInput79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = indexMetaData0.readFrom(streamInput79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap30);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settingsSetting54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settingsSetting61);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "_na_" + "'", str70, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaDataDiff74);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        int int7 = indexSettings3.getMaxRescoreWindow();
        int int8 = indexSettings3.getNumberOfShards();
        int int9 = indexSettings3.getNumberOfReplicas();
        boolean boolean10 = indexSettings3.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        boolean boolean17 = indexMetaData12.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings23);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings28 = indexSettings26.getValue(settingsSetting27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings28.filter(strPredicate30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings31.toXContent(xContentBuilder32, params33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder11, params33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        boolean boolean14 = indexSettings13.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings13.getValue(settingsSetting15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings18.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        boolean boolean29 = indexMetaData24.equals((java.lang.Object) builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings40 = indexSettings38.getValue(settingsSetting39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = settings40.getAsMap();
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings17.diff(settings18, settings40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData51.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        boolean boolean56 = indexMetaData51.equals((java.lang.Object) builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData60.getCustoms();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings62);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings62);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings67 = indexSettings65.getValue(settingsSetting66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = settings67.getAsMap();
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings44.diff(settings45, settings67);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings17.dryRun(settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap76 = indexMetaData75.getCustoms();
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings77);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings77);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings77);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting81 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings82 = indexSettings80.getValue(settingsSetting81);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer83 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer84 = null;
        indexScopedSettings17.addSettingsUpdateConsumer(settingsSetting81, settingsConsumer83, settingsConsumer84);
        org.elasticsearch.common.settings.Settings settings86 = indexSettings13.getValue(settingsSetting81);
        org.elasticsearch.common.settings.Settings settings87 = indexSettings3.getValue(settingsSetting81);
        boolean boolean88 = indexSettings3.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settingsSetting81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.version.minimum_compatible", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        java.lang.String str56 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap60 = indexMetaData59.getCustoms();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings61);
        boolean boolean64 = indexSettings63.hasCustomDataPath();
        boolean boolean65 = indexSettings63.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings63.getGlobalCheckpointInterval();
        boolean boolean67 = indexSettings63.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings68 = indexSettings63.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings69 = indexSettings63.getNodeSettings();
        indexScopedSettings0.validate("index.number_of_shards", settings69);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData2.getCustoms();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings4.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings25.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings25);
        org.elasticsearch.common.settings.Settings settings29 = indexSettings28.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder1.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.state(state31);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings25.filter(strPredicate27);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params30 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = settings28.toXContent(xContentBuilder29, params30);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(params30);
        org.junit.Assert.assertNull(xContentBuilder31);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData2.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.index.Index index12 = indexMetaData2.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData2.activeAllocationIds((int) (byte) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder85.put("index.auto_expand_replicas", "index.blocks.read");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings8.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings7.diff(settings8, settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings40.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue42 = settings8.getAsTime("hi!", timeValue41);
        java.lang.Boolean boolean45 = settings8.getAsBoolean("", (java.lang.Boolean) false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        long long49 = indexMetaData47.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean52 = indexMetaData47.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap53 = indexMetaData47.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData47.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params55 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean56 = indexMetaData47.equals((java.lang.Object) params55);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings8.toXContent(xContentBuilder46, params55);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder6, params55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertEquals("'" + boolean45 + "' != '" + false + "'", boolean45, false);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(params55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(xContentBuilder57);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.xcontent.XContentParser xContentParser5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        boolean boolean13 = indexSettings12.isWarmerEnabled();
        boolean boolean14 = indexSettings12.isShadowReplicaIndex();
        java.lang.String str15 = indexSettings12.getNodeName();
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        boolean boolean17 = indexSettings12.isShadowReplicaIndex();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = indexSettings12.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexMetaData0.fromXContent(xContentParser5, parseFieldMatcher18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher18);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.apache.lucene.index.MergePolicy mergePolicy22 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        java.lang.String str25 = indexSettings24.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings24.getRefreshInterval();
        java.lang.String str27 = indexSettings24.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(mergePolicy22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder3.settings(settings27);
        org.elasticsearch.common.settings.Settings settings33 = settings27.getAsSettings("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(settings27);
        boolean boolean35 = settings27.isEmpty();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte4 = state3.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.state(state3);
        int int6 = builder5.numberOfReplicas();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 1 + "'", byte4 == (byte) 1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        boolean boolean9 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData12);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("primary_terms");
        long long4 = builder1.version();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Set<java.lang.String> strSet10 = settings6.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.putActiveAllocationIds((int) (short) 0, strSet10);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.putAlias(aliasMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        java.lang.String str9 = indexSettings6.getNodeName();
        boolean boolean10 = indexSettings6.isOnSharedFilesystem();
        boolean boolean11 = indexSettings6.isShadowReplicaIndex();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher12 = indexSettings6.getParseFieldMatcher();
        boolean boolean13 = indexSettings6.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.creationDate((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder9.creationDate(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = builder43.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder43.putAlias(builder46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(mappingMetaData45);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings25.getAsMap();
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings2.diff(settings3, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(settings25);
        org.elasticsearch.common.settings.Settings settings31 = settings25.getAsSettings("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getGroups("", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.get("index.data_path");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.internalMap();
        java.lang.String[] strArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.putArray("index.shared_filesystem", strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom41 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.putCustom("index.", custom41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj52 = new java.lang.Object();
        boolean boolean53 = settings51.equals(obj52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData57 = indexMetaData55.mapping("index.shadow_replicas");
        org.elasticsearch.Version version58 = indexMetaData55.getUpgradedVersion();
        org.elasticsearch.Version version59 = settings51.getAsVersion("index.shadow_replicas", version58);
        java.lang.Class<?> wildcardClass60 = settings51.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder49.put("active_allocations", (java.lang.Class) wildcardClass60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder39.settings(builder49);
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = indexMetaData65.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData68);
        boolean boolean70 = indexMetaData65.equals((java.lang.Object) builder69);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap72 = indexMetaData71.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap75 = indexMetaData74.getCustoms();
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings76);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData73, settings76);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings76);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting80 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings81 = indexSettings79.getValue(settingsSetting80);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings81);
        java.util.Map<java.lang.String, java.lang.String> strMap83 = settings81.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate84 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction85 = null;
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder64.putProperties(strMap83, strPredicate84, strFunction85);
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj89 = new java.lang.Object();
        boolean boolean90 = settings88.equals(obj89);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData92 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData94 = indexMetaData92.mapping("index.shadow_replicas");
        org.elasticsearch.Version version95 = indexMetaData92.getUpgradedVersion();
        org.elasticsearch.Version version96 = settings88.getAsVersion("index.shadow_replicas", version95);
        java.lang.Class<?> wildcardClass97 = settings88.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder64.put("index.blocks.read", (java.lang.Class) wildcardClass97);
        org.elasticsearch.common.settings.Settings.Builder builder99 = builder49.put("archived.", (java.lang.Class) wildcardClass97);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNull(mappingMetaData57);
        org.junit.Assert.assertNotNull(version58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(strImmutableOpenMap75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settingsSetting80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(indexMetaData92);
        org.junit.Assert.assertNull(mappingMetaData94);
        org.junit.Assert.assertNotNull(version95);
        org.junit.Assert.assertNotNull(version96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getAsGroups(true);
        boolean boolean19 = settings16.isEmpty();
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings0.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings22 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("index.version.upgraded_string", settings22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.upgraded_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(settings20);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("primary_terms");
        long long4 = builder1.version();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Set<java.lang.String> strSet10 = settings6.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.putActiveAllocationIds((int) (short) 0, strSet10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.state(state13);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = settings26.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction32 = null;
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder25.putProperties(strMap30, strPredicate31, strFunction32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder21.settings(builder25);
        boolean boolean35 = settings13.equals((java.lang.Object) builder34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        boolean boolean42 = indexMetaData37.equals((java.lang.Object) builder41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData46.getCustoms();
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings48);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings48);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings53 = indexSettings51.getValue(settingsSetting52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings53);
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings53.filter(strPredicate55);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params58 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder59 = settings56.toXContent(xContentBuilder57, params58);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = settings13.toXContent(xContentBuilder36, params58);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder9, params58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(params58);
        org.junit.Assert.assertNull(xContentBuilder59);
        org.junit.Assert.assertNull(xContentBuilder60);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("_all");
        java.lang.String[] strArray60 = new java.lang.String[] { "index.shared_filesystem", "index.creation_date_string", "state-", "index.uuid", "primary_terms", "index.blocks.write", "index.version.minimum_compatible", "_all", "index.priority", "_na_", "index.auto_expand_replicas", "index.creation_date_string", "index.blocks.metadata", "index.blocks.read", "index.number_of_replicas", "hi!", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "state-", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.creation_date", "index.blocks.metadata", "index.number_of_replicas", "", "_all", "index.version.created", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder28.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("index.version.minimum_compatible", (float) 0);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = builder67.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder63.put(strMap68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder63.putNull("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.number_of_replicas", (long) (-1));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("archived.", false);
        org.elasticsearch.Version version9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder0.put("active_allocations", version9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings25.getAsMap();
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings2.diff(settings3, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(settings25);
        org.elasticsearch.common.settings.Settings settings31 = settings25.getAsSettings("index.version.created");
        java.lang.String str33 = settings25.get("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings16 = settings14.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings14.getAsTime("index.blocks.metadata", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        boolean boolean28 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings14.getAsTime("index.shared_filesystem", timeValue29);
        java.lang.String[] strArray33 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray35 = settings14.getAsArray("index.data_path", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        boolean boolean43 = indexMetaData38.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData44.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings49);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings54 = indexSettings52.getValue(settingsSetting53);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings54);
        org.elasticsearch.Version version56 = indexSettings55.getIndexVersionCreated();
        java.lang.String str57 = indexSettings55.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings55.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue59 = settings14.getAsTime("index.shared_filesystem.recover_on_any_node", timeValue58);
        boolean boolean60 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings14);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(version56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings17.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = builder2.build();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData3.getSettings();
        java.lang.String[] strArray6 = settings4.getAsArray("index.number_of_shards");
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("index.shadow_replicas");
        boolean boolean12 = indexMetaData8.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.Version version15 = indexMetaData8.getCreationVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer18 = null;
        indexScopedSettings16.addSettingsUpdateConsumer(settingsSetting17, settingsConsumer18);
        boolean boolean21 = indexScopedSettings16.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting23 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer24 = null;
        indexScopedSettings22.addSettingsUpdateConsumer(settingsSetting23, settingsConsumer24);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings16.addSettingsUpdateConsumer(settingsSetting23, settingsConsumer26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        long long30 = indexMetaData28.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        long long34 = indexMetaData32.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        boolean boolean37 = indexMetaData32.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData32.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff39 = indexMetaData28.diff(indexMetaData32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings41.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData50);
        boolean boolean52 = indexMetaData47.equals((java.lang.Object) builder51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings58);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings58);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings61.getValue(settingsSetting62);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = settings63.getAsMap();
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings40.diff(settings41, settings63);
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting69 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer70 = null;
        indexScopedSettings68.addSettingsUpdateConsumer(settingsSetting69, settingsConsumer70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData32, settings63, strPredicate67, indexScopedSettings68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData73.mapping("index.shadow_replicas");
        boolean boolean77 = indexMetaData73.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str78 = indexMetaData73.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = indexMetaData79.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff82 = indexMetaData73.diff(indexMetaData79);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings83 = indexScopedSettings16.copy(settings63, indexMetaData79);
        boolean boolean85 = indexScopedSettings83.hasDynamicSetting("index.blocks.metadata");
        boolean boolean86 = indexMetaData8.equals((java.lang.Object) indexScopedSettings83);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate7, indexScopedSettings83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settingsSetting23);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNotNull(indexMetaDataDiff39);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertNotNull(settingsSetting69);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_na_" + "'", str78, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNull(mappingMetaData81);
        org.junit.Assert.assertNotNull(indexMetaDataDiff82);
        org.junit.Assert.assertNotNull(indexScopedSettings83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        java.lang.String str8 = indexMetaData7.getIndexUUID();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings14.getGlobalCheckpointInterval();
        boolean boolean16 = indexSettings14.hasCustomDataPath();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings14.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexMetaData7.fromXContent(xContentParser10, parseFieldMatcher17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int57 = builder56.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj59 = new java.lang.Object();
        boolean boolean60 = settings58.equals(obj59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder56.settings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap63 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings64.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings64);
        boolean boolean69 = indexSettings68.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting70 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings71 = indexSettings68.getValue(settingsSetting70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings0.diff(settings58, settings71);
        java.lang.String str74 = settings58.get("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(settingsSetting70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        java.lang.String str5 = indexSettings3.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.Version version69 = indexMetaData63.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNotNull(version69);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean9 = indexSettings8.isWarmerEnabled();
        boolean boolean10 = indexSettings8.isDefaultAllowUnmappedFields();
        boolean boolean11 = indexSettings8.isTTLPurgeDisabled();
        boolean boolean12 = indexSettings8.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.Class<?> wildcardClass3 = builder2.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap3 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params5 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder4, params5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap3);
        org.junit.Assert.assertNotNull(params5);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.upgraded", (int) (byte) -1);
        java.io.InputStream inputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.loadFromStream("index.version.upgraded", inputStream30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings19.filter(strPredicate21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings22.toXContent(xContentBuilder23, params24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = indexMetaData0.toXContent(xContentBuilder2, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(params24);
        org.junit.Assert.assertNull(xContentBuilder25);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        boolean boolean30 = indexMetaData25.equals((java.lang.Object) builder29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings36);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings36);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting40 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings41 = indexSettings39.getValue(settingsSetting40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings41.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction45 = null;
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder24.putProperties(strMap43, strPredicate44, strFunction45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings54);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap60 = indexMetaData59.getCustoms();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings61);
        java.lang.String[] strArray69 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray70 = settings61.getAsArray("index.shared_filesystem", strArray69);
        java.lang.String[] strArray72 = settings54.getAsArray("index.version.created_string", strArray69, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap74 = indexMetaData73.getCustoms();
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData73, settings75);
        java.lang.String[] strArray83 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray84 = settings75.getAsArray("index.shared_filesystem", strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder46.put("index.uuid", "primary_terms", strArray69, strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder0.putArray("_all", strArray84);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder88 = builder86.put(objDictionary87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settingsSetting40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("");
        long long11 = builder10.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.", (float) 60000L);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder22.put("index.shadow_replicas", (long) 100, byteSizeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings6.getNodeSettings();
        java.lang.String[] strArray13 = settings11.getAsArray("index.priority");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = settings11.toXContent(xContentBuilder14, params15);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings11, streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertNull(xContentBuilder16);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer66, settingsConsumer67);
        boolean boolean70 = indexScopedSettings0.hasDynamicSetting("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        boolean boolean13 = indexMetaData8.equals((java.lang.Object) builder12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData14.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings19);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting23 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings24 = indexSettings22.getValue(settingsSetting23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings24.filter(strPredicate26);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = settings27.toXContent(xContentBuilder28, params29);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = indexMetaData0.toXContent(xContentBuilder7, params29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settingsSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(params29);
        org.junit.Assert.assertNull(xContentBuilder30);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("_all", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder0.put("index.data_path", true);
        java.lang.String str30 = builder0.remove("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder0.put("", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        boolean boolean43 = indexMetaData38.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData44.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings49);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings54 = indexSettings52.getValue(settingsSetting53);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = settings54.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder37.putProperties(strMap56, strPredicate57, strFunction58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder36.settings(builder37);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder37.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray95 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList96 = new java.util.ArrayList<java.lang.String>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList96, strArray95);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder37.putArray("primary_terms", (java.util.List<java.lang.String>) strList96);
        org.elasticsearch.common.settings.Settings.Builder builder99 = builder33.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList96);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = indexMetaData0.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean9 = indexSettings8.isQueryStringAnalyzeWildcard();
        boolean boolean10 = indexSettings8.isDefaultAllowUnmappedFields();
        boolean boolean11 = indexSettings8.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.apache.lucene.index.MergePolicy mergePolicy22 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        java.lang.String str25 = indexSettings24.getNodeName();
        org.elasticsearch.Version version26 = indexSettings24.getIndexVersionCreated();
        java.lang.String str27 = indexSettings24.getDefaultField();
        long long28 = indexSettings24.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(mergePolicy22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_all" + "'", str27, "_all");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings6);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings6);
        boolean boolean10 = indexMetaData3.isSameUUID("index.version.upgraded_string");
        boolean boolean12 = indexMetaData3.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData3.getState();
        byte byte14 = state13.id();
        byte byte15 = state13.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder2.state(state13);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = builder16.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [hi!]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        org.elasticsearch.common.settings.Settings settings88 = builder84.build();
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder84.put("index.version.upgraded_string", (double) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder91.put("index.version.created_string", (double) 100L);
        java.lang.Class class96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder97 = builder91.put("primary_terms", class96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(index3);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("primary_terms");
        long long4 = builder1.version();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Set<java.lang.String> strSet10 = settings6.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.putActiveAllocationIds((int) (short) 0, strSet10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.state(state13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.removeAlias("index.data_path");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.putMapping("index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = settings16.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction22 = null;
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder15.putProperties(strMap20, strPredicate21, strFunction22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder11.settings(builder15);
        boolean boolean25 = settings3.equals((java.lang.Object) builder24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = builder24.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.shadow_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        boolean boolean17 = indexMetaData12.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings23);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings28 = indexSettings26.getValue(settingsSetting27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings28);
        org.elasticsearch.Version version30 = indexSettings29.getIndexVersionCreated();
        boolean boolean31 = indexSettings29.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings32 = indexSettings29.getNodeSettings();
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings29.getMergePolicy();
        boolean boolean34 = indexMetaData0.equals((java.lang.Object) indexSettings29);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings29.getRefreshInterval();
        org.elasticsearch.common.settings.Settings settings36 = indexSettings29.getNodeSettings();
        org.elasticsearch.Version version37 = indexSettings29.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(version37);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        java.util.Set<java.lang.String> strSet71 = null; // flaky: indexMetaData63.activeAllocationIds((int) (byte) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData63.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput75 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData63.writeTo(streamOutput75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNull(mappingMetaData73);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_shards", false);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.put(objDictionary7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("primary_terms");
        long long4 = builder1.version();
        java.lang.String str5 = builder1.index();
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.uuid" + "'", str5, "index.uuid");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getSettings();
        java.lang.String str12 = settings10.get("index.version.upgraded_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue15 = settings10.getAsRatio("index.version.created", "index.priority");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Ratio should be in [0-1.0], got [5000099.0]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        boolean boolean9 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mappingOrDefault("index.version.created");
        int int13 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.readDiffFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData30.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        boolean boolean35 = indexMetaData30.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings41);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting45 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings46 = indexSettings44.getValue(settingsSetting45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings46.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder29.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.apache.lucene.index.MergePolicy mergePolicy56 = indexSettings55.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getSettings();
        org.elasticsearch.common.settings.Settings settings59 = settings57.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue62 = settings57.getAsTime("index.blocks.metadata", timeValue61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData65.getCustoms();
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings67);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings67);
        boolean boolean70 = indexSettings69.hasCustomDataPath();
        boolean boolean71 = indexSettings69.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings69.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = settings57.getAsTime("index.shared_filesystem", timeValue72);
        java.lang.String[] strArray76 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray78 = settings57.getAsArray("index.data_path", strArray76, (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings57.filter(strPredicate79);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction81 = null;
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder2.putProperties(strMap48, strPredicate79, strFunction81);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder2.put("", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder85.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap88 = indexMetaData87.getCustoms();
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData87, settings89);
        org.apache.lucene.index.MergePolicy mergePolicy91 = indexSettings90.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings92 = indexSettings90.getSettings();
        org.elasticsearch.common.settings.Settings settings94 = settings92.getAsSettings("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap95 = settings94.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate96 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction97 = null;
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder86.putProperties(strMap95, strPredicate96, strFunction97);
        java.util.Map<java.lang.String, java.lang.String> strMap99 = builder86.internalMap();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settingsSetting45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(mergePolicy56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertNotNull(strImmutableOpenMap88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(mergePolicy91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertNotNull(strPredicate96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(strMap99);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.Version version29 = indexSettings28.getIndexVersionCreated();
        java.lang.String str30 = indexSettings28.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings28.getRefreshInterval();
        boolean boolean32 = indexSettings28.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings33 = indexSettings28.getNodeSettings();
        java.lang.String[] strArray35 = settings33.getAsArray("index.priority");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params37 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = settings33.toXContent(xContentBuilder36, params37);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = indexMetaData0.toXContent(xContentBuilder21, params37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(params37);
        org.junit.Assert.assertNull(xContentBuilder38);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(true);
        boolean boolean22 = settings19.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        int int7 = indexSettings3.getMaxRescoreWindow();
        boolean boolean8 = indexSettings3.isTTLPurgeDisabled();
        int int9 = indexSettings3.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("primary_terms");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings2.getAsGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue9 = settings2.getAsMemory("primary_terms", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [primary_terms] with value [hi!] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.index.Index index3 = indexMetaData2.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData2.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings22.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = settings22.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction28 = null;
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder21.putProperties(strMap26, strPredicate27, strFunction28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder17.settings(builder21);
        boolean boolean31 = settings9.equals((java.lang.Object) builder30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData33.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        boolean boolean38 = indexMetaData33.equals((java.lang.Object) builder37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData42.getCustoms();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings44);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings44);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings44);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings49 = indexSettings47.getValue(settingsSetting48);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings49);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings49.filter(strPredicate51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings52.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings9.toXContent(xContentBuilder32, params54);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData2, xContentBuilder5, params54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settingsSetting48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.version.created_string", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        java.lang.String str19 = indexSettings17.getNodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        boolean boolean25 = indexScopedSettings20.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer28 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer28);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        long long34 = indexMetaData32.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        long long38 = indexMetaData36.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        boolean boolean41 = indexMetaData36.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap42 = indexMetaData36.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData32.diff(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData51.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        boolean boolean56 = indexMetaData51.equals((java.lang.Object) builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData60.getCustoms();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings62);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings62);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings67 = indexSettings65.getValue(settingsSetting66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = settings67.getAsMap();
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings44.diff(settings45, settings67);
        java.util.function.Predicate<java.lang.String> strPredicate71 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting73 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer74 = null;
        indexScopedSettings72.addSettingsUpdateConsumer(settingsSetting73, settingsConsumer74);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData36, settings67, strPredicate71, indexScopedSettings72);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData77.mapping("index.shadow_replicas");
        boolean boolean81 = indexMetaData77.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str82 = indexMetaData77.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData85 = indexMetaData83.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff86 = indexMetaData77.diff(indexMetaData83);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = indexScopedSettings20.copy(settings67, indexMetaData83);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting88 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer89 = null;
        indexScopedSettings87.addSettingsUpdateConsumer(settingsSetting88, settingsConsumer89);
        org.elasticsearch.common.settings.Settings settings91 = indexSettings17.getValue(settingsSetting88);
        java.lang.String str94 = settings91.get("index.auto_expand_replicas", "index.blocks.write");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settingsSetting73);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNull(mappingMetaData79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "_na_" + "'", str82, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNull(mappingMetaData85);
        org.junit.Assert.assertNotNull(indexMetaDataDiff86);
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertNotNull(settingsSetting88);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "index.blocks.write" + "'", str94, "index.blocks.write");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = builder11.build();
        org.elasticsearch.common.io.stream.StreamInput streamInput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData14.readDiffFrom(streamInput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings8.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings7.diff(settings8, settings30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings35.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        boolean boolean46 = indexMetaData41.equals((java.lang.Object) builder45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings52);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getValue(settingsSetting56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = settings57.getAsMap();
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings34.diff(settings35, settings57);
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings7.dryRun(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int64 = builder63.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj66 = new java.lang.Object();
        boolean boolean67 = settings65.equals(obj66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder63.settings(settings65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings71.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings71);
        boolean boolean76 = indexSettings75.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings75.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings7.diff(settings65, settings78);
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79, strPredicate80, indexScopedSettings81);
        java.lang.Class<?> wildcardClass83 = settings79.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        boolean boolean15 = indexMetaData10.equals((java.lang.Object) builder14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings21);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings21);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings26 = indexSettings24.getValue(settingsSetting25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = settings26.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings26);
        org.apache.lucene.util.Version version30 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData34 = indexMetaData32.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData35);
        boolean boolean37 = indexMetaData32.equals((java.lang.Object) builder36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap42 = indexMetaData41.getCustoms();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings43);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings43);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings43);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting47 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings48 = indexSettings46.getValue(settingsSetting47);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings48);
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.Settings settings51 = settings48.filter(strPredicate50);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params53 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = settings51.toXContent(xContentBuilder52, params53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = indexMetaData0.toXContent(xContentBuilder31, params53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNull(mappingMetaData34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settingsSetting47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(params53);
        org.junit.Assert.assertNull(xContentBuilder54);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings8.addSettingsUpdateConsumer(settingsSetting9, settingsConsumer10);
        boolean boolean13 = indexScopedSettings8.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer16 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(settingsSetting15, settingsConsumer16);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer18 = null;
        indexScopedSettings8.addSettingsUpdateConsumer(settingsSetting15, settingsConsumer18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        long long22 = indexMetaData20.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        long long26 = indexMetaData24.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        boolean boolean29 = indexMetaData24.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap30 = indexMetaData24.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData20.diff(indexMetaData24);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings33.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings33.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        boolean boolean44 = indexMetaData39.equals((java.lang.Object) builder43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData48.getCustoms();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings50);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings50);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings50);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting54 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings55 = indexSettings53.getValue(settingsSetting54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings55.getAsMap();
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings32.diff(settings33, settings55);
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting61 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer62 = null;
        indexScopedSettings60.addSettingsUpdateConsumer(settingsSetting61, settingsConsumer62);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData24, settings55, strPredicate59, indexScopedSettings60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = indexMetaData65.mapping("index.shadow_replicas");
        boolean boolean69 = indexMetaData65.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str70 = indexMetaData65.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff74 = indexMetaData65.diff(indexMetaData71);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = indexScopedSettings8.copy(settings55, indexMetaData71);
        boolean boolean77 = indexScopedSettings75.hasDynamicSetting("index.blocks.metadata");
        boolean boolean78 = indexMetaData0.equals((java.lang.Object) indexScopedSettings75);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings82.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        org.elasticsearch.Version version87 = indexSettings86.getIndexVersionCreated();
        java.lang.String str88 = indexSettings86.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue89 = indexSettings86.getRefreshInterval();
        boolean boolean90 = indexSettings86.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings91 = indexSettings86.getNodeSettings();
        java.lang.String[] strArray93 = settings91.getAsArray("index.priority");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params95 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = settings91.toXContent(xContentBuilder94, params95);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder79, params95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap30);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settingsSetting54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settingsSetting61);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "_na_" + "'", str70, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaDataDiff74);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(params95);
        org.junit.Assert.assertNull(xContentBuilder96);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        boolean boolean32 = indexMetaData27.equals((java.lang.Object) builder31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getValue(settingsSetting42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings43.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder26.putProperties(strMap45, strPredicate46, strFunction47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder26.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder26.loadFromSource("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings56);
        org.apache.lucene.index.MergePolicy mergePolicy58 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Settings settings61 = settings59.getAsSettings("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings61.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder26.put(strMap62);
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction65 = null;
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder25.putProperties(strMap62, strPredicate64, strFunction65);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder68 = builder25.put(objDictionary67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(mergePolicy58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.version.upgraded_string", custom8);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.primaryTerm(10, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getSettings();
        java.lang.String str12 = settings10.get("index.version.upgraded_string");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings10.getGroups("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings70.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        boolean boolean75 = indexSettings74.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting76 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings77 = indexSettings74.getValue(settingsSetting76);
        org.elasticsearch.common.settings.Settings settings78 = indexScopedSettings67.dryRun(settings77);
        java.util.Map<java.lang.String, java.lang.Object> strMap79 = settings78.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(settingsSetting76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap79);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings9 = indexSettings8.getSettings();
        java.lang.String str10 = indexSettings8.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings8.getGlobalCheckpointInterval();
        boolean boolean12 = indexSettings8.hasCustomDataPath();
        int int13 = indexSettings8.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getGroups("index.number_of_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean49 = indexMetaData44.equals((java.lang.Object) builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings55);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getValue(settingsSetting59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings60.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings37.diff(settings38, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings65.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        boolean boolean76 = indexMetaData71.equals((java.lang.Object) builder75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData79, settings82);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings82);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings87 = indexSettings85.getValue(settingsSetting86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = settings87.getAsMap();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings64.diff(settings65, settings87);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings37.dryRun(settings65);
        org.elasticsearch.index.IndexSettings indexSettings92 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30, strPredicate36, indexScopedSettings37);
        org.apache.lucene.util.Version version93 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(version93);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) (byte) 10);
        long long5 = builder2.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.settings(settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.putMapping(mappingMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings6.getSettings();
        java.lang.String str10 = indexSettings6.customDataPath();
        int int11 = indexSettings6.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = builder11.build();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData14.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer66, settingsConsumer67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings72);
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings74.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = indexSettings74.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings74.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexSettings74.getSettings();
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings79);
        java.lang.String str83 = settings79.get("index.version.minimum_compatible", "");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.apache.lucene.index.MergePolicy mergePolicy22 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getAsGroups(false);
        java.lang.Boolean boolean29 = settings23.getAsBoolean("_na_", (java.lang.Boolean) true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = settings23.getAsMemory("index.priority", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.priority] with value [index.shadow_replicas] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(mergePolicy22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + true + "'", boolean29, true);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) (byte) 10);
        long long5 = builder2.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.settings(settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.creationDate(0L);
        int int16 = builder2.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        java.lang.String str20 = settings18.get("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        boolean boolean27 = indexMetaData22.equals((java.lang.Object) builder26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings33);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings38 = indexSettings36.getValue(settingsSetting37);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings38);
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings38.filter(strPredicate40);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings41.toXContent(xContentBuilder42, params43);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = settings18.toXContent(xContentBuilder21, params43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(params43);
        org.junit.Assert.assertNull(xContentBuilder44);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings12.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean23 = indexMetaData18.equals((java.lang.Object) builder22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings29);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getValue(settingsSetting33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = settings34.getAsMap();
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings11.diff(settings12, settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings44.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue46 = settings12.getAsTime("hi!", timeValue45);
        java.lang.Boolean boolean49 = settings12.getAsBoolean("", (java.lang.Boolean) false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        long long53 = indexMetaData51.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        boolean boolean56 = indexMetaData51.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap57 = indexMetaData51.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters58 = indexMetaData51.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params59 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean60 = indexMetaData51.equals((java.lang.Object) params59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = settings12.toXContent(xContentBuilder50, params59);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder10, params59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + false + "'", boolean49, false);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap57);
        org.junit.Assert.assertNull(discoveryNodeFilters58);
        org.junit.Assert.assertNotNull(params59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(xContentBuilder61);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.unit.SizeValue sizeValue11 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue12 = settings9.getAsSize("index.blocks.metadata", sizeValue11);
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings9);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getGroups("index.version.minimum_compatible", false);
        boolean boolean18 = settings9.equals((java.lang.Object) strMap17);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(sizeValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.replacePropertyPlaceholders();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(objDictionary5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder1.removeAlias("index.blocks.read");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = builder1.mapping("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(mappingMetaData29);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.put("index.version.created_string", (long) '#', timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean9 = indexSettings8.isWarmerEnabled();
        boolean boolean10 = indexSettings8.isWarmerEnabled();
        boolean boolean11 = indexSettings8.hasCustomDataPath();
        java.lang.String str12 = indexSettings8.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        int int70 = indexMetaData63.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData63);
        org.elasticsearch.common.io.stream.StreamInput streamInput72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff73 = indexMetaData63.readDiffFrom(streamInput72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings19.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        java.lang.Boolean boolean28 = settings19.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.Version version30 = indexSettings29.getIndexVersionCreated();
        boolean boolean31 = indexSettings29.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings29.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeValue32);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) 100);
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.settings(settings6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.putMapping(mappingMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap3 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.common.xcontent.XContentParser xContentParser6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher15 = indexSettings13.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexMetaData0.fromXContent(xContentParser6, parseFieldMatcher15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher15);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData0.getMappings();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = indexMetaData0.primaryTerm((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = settings5.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue9 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue10 = settings5.getAsTime("index.blocks.metadata", timeValue9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings15);
        boolean boolean18 = indexSettings17.hasCustomDataPath();
        boolean boolean19 = indexSettings17.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings17.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue21 = settings5.getAsTime("index.shared_filesystem", timeValue20);
        java.lang.String[] strArray24 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray26 = settings5.getAsArray("index.data_path", strArray24, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mapping("index.shadow_replicas");
        org.elasticsearch.Version version31 = indexMetaData28.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData28.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.apache.lucene.index.MergePolicy mergePolicy42 = indexSettings41.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getSettings();
        org.elasticsearch.common.settings.Settings settings45 = settings43.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue48 = settings43.getAsTime("index.blocks.metadata", timeValue47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings53);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings53);
        boolean boolean56 = indexSettings55.hasCustomDataPath();
        boolean boolean57 = indexSettings55.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings55.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue59 = settings43.getAsTime("index.shared_filesystem", timeValue58);
        java.lang.String[] strArray62 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray64 = settings43.getAsArray("index.data_path", strArray62, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings43.getGroups("state-");
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap74 = indexMetaData73.getCustoms();
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData73, settings75);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings75);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        java.lang.String[] strArray90 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray91 = settings82.getAsArray("index.shared_filesystem", strArray90);
        java.lang.String[] strArray93 = settings75.getAsArray("index.version.created_string", strArray90, (java.lang.Boolean) false);
        java.lang.String[] strArray95 = settings43.getAsArray("index.number_of_shards", strArray93, (java.lang.Boolean) false);
        java.lang.String[] strArray96 = settings5.getAsArray("", strArray93);
        java.lang.String str99 = settings5.get("index.", "active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(mergePolicy42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "active_allocations" + "'", str99, "active_allocations");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings16.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings19);
        org.elasticsearch.common.settings.Settings settings22 = settings19.getAsSettings("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        boolean boolean29 = indexMetaData24.equals((java.lang.Object) builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings40 = indexSettings38.getValue(settingsSetting39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings40);
        org.elasticsearch.Version version42 = indexSettings41.getIndexVersionCreated();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher43 = indexSettings41.getParseFieldMatcher();
        java.lang.String str44 = indexSettings41.getUUID();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = indexSettings41.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = settings19.getAsBytesSize("index.data_path", byteSizeValue45);
        org.elasticsearch.common.settings.Settings settings48 = settings19.getAsSettings("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(parseFieldMatcher43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "_na_" + "'", str44, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValue45);
        org.junit.Assert.assertNotNull(byteSizeValue46);
        org.junit.Assert.assertNotNull(settings48);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_all");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(builder24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.primaryTerm((int) ' ', 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) (short) -1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        boolean boolean9 = indexMetaData0.isSameUUID("_na_");
        int int10 = indexMetaData0.getNumberOfShards();
        int int11 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.readDiffFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int5 = builder4.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.state(state9);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.putAlias(builder11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.removeAlias("index.shared_filesystem");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putMapping("index.shadow_replicas", "index.number_of_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.data_path");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.data_path]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        java.lang.String str19 = indexSettings17.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher20 = indexSettings17.getParseFieldMatcher();
        boolean boolean21 = indexSettings17.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean39 = indexMetaData34.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version40 = indexMetaData34.getCreationVersion();
        org.elasticsearch.Version version41 = settings30.getAsVersion("index.version.minimum_compatible", version40);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder0.put("state-", version41);
        org.elasticsearch.common.settings.Settings settings43 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = settings43.getAsMemory("index.number_of_replicas", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_replicas] with value [index.version.created] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        boolean boolean9 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        int int16 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version19 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.Version version21 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(version21);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings17.getIndexMetaData();
        int int20 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData19.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.upgraded", (int) (byte) -1);
        java.lang.String str30 = builder28.remove("index.blocks.write");
        java.lang.String str32 = builder28.remove("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.primaryTerm(1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.remove("index.version.created_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings51);
        org.apache.lucene.index.MergePolicy mergePolicy53 = indexSettings52.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings54 = indexSettings52.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData56.getCustoms();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings58.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings79);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap84 = settings79.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings4.diff(settings54, settings79);
        org.elasticsearch.common.unit.SizeValue sizeValue87 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue88 = settings79.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue87);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap91 = indexMetaData90.getCustoms();
        long long92 = indexMetaData90.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData90);
        boolean boolean95 = indexMetaData90.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version96 = indexMetaData90.getCreationVersion();
        org.elasticsearch.Version version97 = settings79.getAsVersion("active_allocations", version96);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder0.put("index.number_of_replicas", version96);
        org.elasticsearch.common.settings.Settings.Builder builder99 = builder0.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(mergePolicy53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(sizeValue88);
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertNotNull(strImmutableOpenMap91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(version96);
        org.junit.Assert.assertNotNull(version97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putAlias(builder9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(index7);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData2.getCustoms();
        long long4 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        long long8 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean11 = indexMetaData6.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData2.diff(indexMetaData6);
        boolean boolean14 = indexMetaData0.equals((java.lang.Object) indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData6.includeFilters();
        org.apache.lucene.util.Version version16 = indexMetaData6.getMinimumCompatibleVersion();
        long long17 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean23 = indexMetaData18.equals((java.lang.Object) builder22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings29);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getValue(settingsSetting33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.apache.lucene.index.MergePolicy mergePolicy40 = indexSettings39.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings41 = indexSettings39.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings41);
        boolean boolean45 = indexSettings43.matchesIndexName("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(mergePolicy40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getGroups("index.number_of_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean49 = indexMetaData44.equals((java.lang.Object) builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings55);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getValue(settingsSetting59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings60.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings37.diff(settings38, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings65.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        boolean boolean76 = indexMetaData71.equals((java.lang.Object) builder75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData79, settings82);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings82);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings87 = indexSettings85.getValue(settingsSetting86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = settings87.getAsMap();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings64.diff(settings65, settings87);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings37.dryRun(settings65);
        org.elasticsearch.index.IndexSettings indexSettings92 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30, strPredicate36, indexScopedSettings37);
        java.util.Set<java.lang.String> strSet93 = settings30.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings17.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.");
        boolean boolean23 = indexMetaData19.isSameUUID("index.blocks.write");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings16.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData20.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        boolean boolean25 = indexMetaData20.equals((java.lang.Object) builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings31);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings31);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings36 = indexSettings34.getValue(settingsSetting35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.apache.lucene.index.MergePolicy mergePolicy42 = indexSettings41.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getAsGroups(false);
        java.lang.String[] strArray48 = settings43.getAsArray("primary_terms");
        java.lang.String[] strArray50 = settings16.getAsArray("index.shared_filesystem", strArray48, (java.lang.Boolean) false);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings16, streamOutput51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(mergePolicy42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("primary_terms");
        long long10 = builder7.version();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        java.util.Set<java.lang.String> strSet16 = settings12.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder7.putActiveAllocationIds((int) (short) 0, strSet16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder2.putActiveAllocationIds(0, strSet16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder2.putMapping(mappingMetaData19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj36 = new java.lang.Object();
        boolean boolean37 = settings35.equals(obj36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mapping("index.shadow_replicas");
        org.elasticsearch.Version version42 = indexMetaData39.getUpgradedVersion();
        org.elasticsearch.Version version43 = settings35.getAsVersion("index.shadow_replicas", version42);
        java.lang.Class<?> wildcardClass44 = settings35.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder33.put("active_allocations", (java.lang.Class) wildcardClass44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings52);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray68 = settings59.getAsArray("index.shared_filesystem", strArray67);
        java.lang.String[] strArray70 = settings52.getAsArray("index.version.created_string", strArray67, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder33.putArray("index.auto_expand_replicas", strArray70);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [active_allocations]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexSettings8.getValue(settingsSetting9);
        boolean boolean11 = indexSettings8.isDefaultAllowUnmappedFields();
        int int12 = indexSettings8.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getGroups("index.number_of_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean49 = indexMetaData44.equals((java.lang.Object) builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings55);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getValue(settingsSetting59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings60.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings37.diff(settings38, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings65.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        boolean boolean76 = indexMetaData71.equals((java.lang.Object) builder75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData79, settings82);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings82);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings87 = indexSettings85.getValue(settingsSetting86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = settings87.getAsMap();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings64.diff(settings65, settings87);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings37.dryRun(settings65);
        org.elasticsearch.index.IndexSettings indexSettings92 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30, strPredicate36, indexScopedSettings37);
        org.elasticsearch.common.io.stream.StreamInput streamInput93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData94 = indexMetaData0.readFrom(streamInput93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        boolean boolean9 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("active_allocations");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = builder14.build();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = settings29.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction35 = null;
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder28.putProperties(strMap33, strPredicate34, strFunction35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder24.settings(builder28);
        boolean boolean38 = settings16.equals((java.lang.Object) builder37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData43);
        boolean boolean45 = indexMetaData40.equals((java.lang.Object) builder44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData46.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings51);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings51);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings51);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting55 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings56 = indexSettings54.getValue(settingsSetting55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings56);
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings56.filter(strPredicate58);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params61 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = settings59.toXContent(xContentBuilder60, params61);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings16.toXContent(xContentBuilder39, params61);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = indexMetaData0.toXContent(xContentBuilder12, params61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settingsSetting55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(params61);
        org.junit.Assert.assertNull(xContentBuilder62);
        org.junit.Assert.assertNull(xContentBuilder63);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        boolean boolean16 = indexMetaData12.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str17 = indexMetaData12.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap20 = indexMetaData12.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
    }
}
