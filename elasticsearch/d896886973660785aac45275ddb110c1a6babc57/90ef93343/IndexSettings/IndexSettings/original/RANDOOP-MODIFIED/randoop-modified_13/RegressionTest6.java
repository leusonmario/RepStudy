import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getByPrefix("index.blocks.read_only");
        java.lang.String str21 = settings19.toDelimitedString(' ');
        org.elasticsearch.common.settings.Settings settings23 = settings19.getByPrefix("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings19.getGroups("primary_terms", false);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings19, streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("archived.");
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        boolean boolean10 = indexMetaData0.isSameUUID("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings20.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexSettings20.getIndexMetaData();
        java.lang.String str23 = indexMetaData22.getIndexUUID();
        long long24 = indexMetaData22.getVersion();
        org.apache.lucene.util.Version version25 = indexMetaData22.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData22.getActiveAllocationIds();
        boolean boolean27 = indexMetaData0.equals((java.lang.Object) strSetImmutableOpenIntMap26);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("index.blocks.write");
        boolean boolean14 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("hi!", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder0.put("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", 1L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings9.getTranslogSyncInterval();
        int int11 = indexSettings9.getMaxRescoreWindow();
        boolean boolean12 = indexSettings9.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings16.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings19, streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.putCustom("_na_", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) (byte) 100);
        java.lang.String str12 = builder9.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.index.Index index20 = indexMetaData15.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap21 = indexMetaData15.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap23 = indexMetaData15.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings26);
        int int31 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData24.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version34 = indexMetaData24.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData15.diff(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = indexMetaData24.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder9.state(state36);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(index20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNull(version34);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("_all");
        java.lang.String[] strArray60 = new java.lang.String[] { "index.shared_filesystem", "index.creation_date_string", "state-", "index.uuid", "primary_terms", "index.blocks.write", "index.version.minimum_compatible", "_all", "index.priority", "_na_", "index.auto_expand_replicas", "index.creation_date_string", "index.blocks.metadata", "index.blocks.read", "index.number_of_replicas", "hi!", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "state-", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.creation_date", "index.blocks.metadata", "index.number_of_replicas", "", "_all", "index.version.created", "index.auto_expand_replicas" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder28.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("index.version.minimum_compatible", (float) 0);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = builder67.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder63.put(strMap68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder63.putNull("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("_all", (long) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        boolean boolean8 = indexSettings6.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = builder8.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.numberOfReplicas(0);
        java.lang.String str12 = builder8.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings10);
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings11.getMergePolicy();
        boolean boolean13 = indexSettings11.isQueryStringAllowLeadingWildcard();
        java.lang.String str14 = indexSettings11.customDataPath();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings11.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        int int17 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version18 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.requireFilters();
        int int20 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(version18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings5.getAsGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue9 = settings5.getAsRatio("index.data_path", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        boolean boolean14 = indexMetaData0.equals((java.lang.Object) indexSettings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int16 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        java.lang.String str8 = settings2.toDelimitedString(' ');
        java.lang.String str10 = settings2.get("index.version.upgraded_string");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = settings2.getAsMap();
        java.lang.Boolean boolean14 = settings2.getAsBoolean("index.priority", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean10 = indexSettings9.isTTLPurgeDisabled();
        boolean boolean11 = indexSettings9.hasCustomDataPath();
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings9.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mergePolicy12);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        long long2 = builder1.version();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        java.lang.String[] strArray38 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.minimum_compatible", "index.version.upgraded", "_na_", "_na_", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "", "index.", "_all", "index.blocks.read_only", "index.blocks.write", "index.uuid", "index.priority", "index.priority", "index.blocks.metadata", "index.uuid", "index.version.upgraded_string", "index.version.created", "_all", "index.uuid", "index.version.upgraded_string", "hi!", "index.version.upgraded" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder11.putArray("index.shadow_replicas", (java.util.List<java.lang.String>) strList39);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder11.put("index.priority", (long) 10000);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder44.normalizePrefix("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean8 = indexSettings3.isTTLPurgeDisabled();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings3.getTranslogSyncInterval();
        java.lang.String str10 = indexSettings3.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig11 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean12 = indexSettings3.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_all" + "'", str10, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 10000);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.unit.TimeValue timeValue4 = indexSettings3.getGlobalCheckpointInterval();
        boolean boolean5 = indexSettings3.hasCustomDataPath();
        java.lang.String str6 = indexSettings3.getNodeName();
        java.lang.String str7 = indexSettings3.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(timeValue4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean39 = indexMetaData34.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version40 = indexMetaData34.getCreationVersion();
        org.elasticsearch.Version version41 = settings30.getAsVersion("index.version.minimum_compatible", version40);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder0.put("state-", version41);
        java.lang.String str44 = builder42.remove("index.uuid");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (byte) 10);
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.settings(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder7.numberOfShards((int) (short) 1);
        boolean boolean21 = indexMetaData0.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        java.lang.String str28 = settings25.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings25);
        org.elasticsearch.common.settings.Settings settings31 = settings25.getAsSettings("index.priority");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("index.shadow_replicas");
        boolean boolean12 = indexMetaData8.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        boolean boolean27 = indexMetaData22.equals((java.lang.Object) builder26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings33);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings38 = indexSettings36.getValue(settingsSetting37);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings38.getAsMap();
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings15.diff(settings16, settings38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings43.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData49.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        boolean boolean54 = indexMetaData49.equals((java.lang.Object) builder53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = settings65.getAsMap();
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings42.diff(settings43, settings65);
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings15.dryRun(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int72 = builder71.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj74 = new java.lang.Object();
        boolean boolean75 = settings73.equals(obj74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder71.settings(settings73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings79);
        boolean boolean84 = indexSettings83.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting85 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings86 = indexSettings83.getValue(settingsSetting85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings15.diff(settings73, settings86);
        java.util.function.Predicate<java.lang.String> strPredicate88 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings89 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings90 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData8, settings87, strPredicate88, indexScopedSettings89);
        org.elasticsearch.index.IndexSettings indexSettings91 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings87);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue92 = indexSettings91.getFlushThresholdSize();
        boolean boolean93 = indexSettings91.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNull(mappingMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(settingsSetting85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(indexScopedSettings89);
        org.junit.Assert.assertNotNull(byteSizeValue92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings19.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        java.lang.Boolean boolean28 = settings19.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings31 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings34);
        org.apache.lucene.index.MergePolicy mergePolicy36 = indexSettings35.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings37 = indexSettings35.getSettings();
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings39.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings39);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(mergePolicy36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        long long4 = builder3.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        boolean boolean9 = indexMetaData0.isSameUUID("_na_");
        int int10 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        boolean boolean18 = indexMetaData11.isSameUUID("index.version.upgraded_string");
        boolean boolean20 = indexMetaData11.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData11.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings29);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings29);
        boolean boolean34 = indexMetaData24.equals((java.lang.Object) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        long long37 = indexMetaData35.getVersion();
        org.elasticsearch.index.Index index38 = indexMetaData35.getMergeSourceIndex();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff39 = indexMetaData24.diff(indexMetaData35);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData35.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData11.diff(indexMetaData35);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData11.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNull(index38);
        org.junit.Assert.assertNotNull(indexMetaDataDiff39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData0.mapping("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(mappingMetaData23);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.creationDate((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder9.creationDate(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = builder43.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        long long55 = indexMetaData53.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData53);
        boolean boolean58 = indexMetaData53.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version59 = indexMetaData53.getCreationVersion();
        org.elasticsearch.Version version60 = settings49.getAsVersion("index.version.minimum_compatible", version59);
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder43.settings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder62.numberOfShards(100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("index.", 10000);
        java.lang.String[] strArray51 = new java.lang.String[] { "index.version.upgraded_string", "index.version.minimum_compatible", "index.", "index.version.upgraded_string", "index.data_path", "index.version.upgraded_string", "state-", "index.shared_filesystem", "index.shared_filesystem", "_na_", "index.blocks.write", "index.version.minimum_compatible", "archived.", "index.version.minimum_compatible", "index.shadow_replicas", "index.shared_filesystem.recover_on_any_node", "index.creation_date_string", "index.creation_date_string", "index.shared_filesystem.recover_on_any_node" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder30.putArray("", (java.util.List<java.lang.String>) strList52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings58.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings58.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData64.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        boolean boolean69 = indexMetaData64.equals((java.lang.Object) builder68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap74 = indexMetaData73.getCustoms();
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData73, settings75);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings75);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings75);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting79 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings80 = indexSettings78.getValue(settingsSetting79);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings80);
        java.util.Map<java.lang.String, java.lang.String> strMap82 = settings80.getAsMap();
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings57.diff(settings58, settings80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder56.settings(settings80);
        org.elasticsearch.common.settings.Settings settings86 = settings80.getAsSettings("index.version.created");
        java.util.Map<java.lang.String, java.lang.String> strMap87 = settings86.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder54.put(strMap87);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settingsSetting79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings6.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexSettings6.getIndexMetaData();
        org.elasticsearch.index.Index index11 = indexMetaData10.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData10.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        int int14 = indexMetaData10.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData10.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(index11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.apache.lucene.util.Version version21 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean30 = indexMetaData22.equals((java.lang.Object) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.apache.lucene.index.MergePolicy mergePolicy35 = indexSettings34.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings36 = indexSettings34.getSettings();
        org.elasticsearch.common.settings.Settings settings38 = settings36.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue40 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue41 = settings36.getAsTime("index.blocks.metadata", timeValue40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData44.getCustoms();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings46);
        boolean boolean49 = indexSettings48.hasCustomDataPath();
        boolean boolean50 = indexSettings48.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings48.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue52 = settings36.getAsTime("index.shared_filesystem", timeValue51);
        java.lang.String[] strArray55 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray57 = settings36.getAsArray("index.data_path", strArray55, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData62 = indexMetaData60.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        boolean boolean65 = indexMetaData60.equals((java.lang.Object) builder64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap67 = indexMetaData66.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings71);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting75 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings76 = indexSettings74.getValue(settingsSetting75);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings76);
        org.elasticsearch.Version version78 = indexSettings77.getIndexVersionCreated();
        java.lang.String str79 = indexSettings77.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue80 = indexSettings77.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue81 = settings36.getAsTime("index.shared_filesystem.recover_on_any_node", timeValue80);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings36);
        org.elasticsearch.Version version83 = indexMetaData0.getUpgradedVersion();
        java.util.Set<java.lang.String> strSet85 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.io.stream.StreamInput streamInput86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = indexMetaData0.readFrom(streamInput86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(mergePolicy35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNull(mappingMetaData62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settingsSetting75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(version78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertNotNull(version83);
        org.junit.Assert.assertNull(strSet85);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        long long18 = indexMetaData11.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.apache.lucene.index.MergePolicy mergePolicy24 = indexSettings23.getMergePolicy();
        boolean boolean25 = indexMetaData11.equals((java.lang.Object) indexSettings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings28);
        org.apache.lucene.index.MergePolicy mergePolicy30 = indexSettings29.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings31 = indexSettings29.getSettings();
        java.lang.String[] strArray33 = settings31.getAsArray("index.version.upgraded");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings31);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings31);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(mergePolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(mergePolicy30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder4.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("", 0.0d);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) builder14);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("active_allocations", false);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.version.minimum_compatible", false);
        java.lang.String[] strArray37 = settings32.getAsArray("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder0.extendArray("index.version.created", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        boolean boolean48 = indexMetaData43.equals((java.lang.Object) builder47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings54);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getValue(settingsSetting58);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = settings59.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate62 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction63 = null;
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder42.putProperties(strMap61, strPredicate62, strFunction63);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder42.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder42.loadFromSource("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.apache.lucene.index.MergePolicy mergePolicy74 = indexSettings73.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings75 = indexSettings73.getSettings();
        org.elasticsearch.common.settings.Settings settings77 = settings75.getAsSettings("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap78 = settings77.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder42.put(strMap78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder41.put(strMap78);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder41.put("primary_terms", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder83.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", 5000099.0d);
        java.util.concurrent.TimeUnit timeUnit89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder83.put("state-", (long) (short) 100, timeUnit89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData14.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings19);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19);
        java.lang.String str23 = indexSettings22.getNodeName();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings22.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.Version version34 = indexSettings33.getIndexVersionCreated();
        java.lang.String str35 = indexSettings33.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings33.getRefreshInterval();
        boolean boolean37 = indexSettings33.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings38 = indexSettings33.getNodeSettings();
        java.lang.String[] strArray40 = settings38.getAsArray("index.priority");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params42 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = settings38.toXContent(xContentBuilder41, params42);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings24.toXContent(xContentBuilder26, params42);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue48 = settings45.getAsBytesSize("index.version.minimum_compatible", byteSizeValue47);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(params42);
        org.junit.Assert.assertNull(xContentBuilder43);
        org.junit.Assert.assertNull(xContentBuilder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNull(byteSizeValue48);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean21 = indexMetaData16.equals((java.lang.Object) builder20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings30.getValue(settingsSetting31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings32.getAsMap();
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings9.diff(settings10, settings32);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings35);
        org.elasticsearch.common.settings.Settings settings37 = indexSettings36.getNodeSettings();
        java.util.Set<java.lang.String> strSet38 = settings37.names();
        boolean boolean39 = settings37.isEmpty();
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings37);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(true);
        boolean boolean22 = settings19.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index25 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(index25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.apache.lucene.util.Version version21 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.creationDate((long) ' ');
        java.util.Set<java.lang.String> strSet27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.putActiveAllocationIds((int) (byte) 1, strSet27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings9 = indexSettings8.getSettings();
        java.lang.String str10 = indexSettings8.customDataPath();
        java.lang.String str11 = indexSettings8.customDataPath();
        boolean boolean12 = indexSettings8.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings3.getRefreshInterval();
        java.lang.String str8 = indexSettings3.getNodeName();
        boolean boolean10 = indexSettings3.matchesIndexName("index.shadow_replicas");
        int int11 = indexSettings3.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("archived.", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder9.settings(builder10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder10.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder10.putArray("primary_terms", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.version.minimum_compatible", (float) '4');
        java.util.Map<java.lang.String, java.lang.String> strMap75 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder7.put(strMap75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", (long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData81 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap83 = indexMetaData82.getCustoms();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData82, settings84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData81, settings84);
        boolean boolean87 = indexSettings86.hasCustomDataPath();
        boolean boolean88 = indexSettings86.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings89 = indexSettings86.getNodeSettings();
        java.lang.String[] strArray91 = settings89.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder76.putArray("index.version.upgraded", strArray91);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder76.put("archived.", "index.data_path");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(indexMetaData81);
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strImmutableOpenMap83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        boolean boolean11 = indexMetaData7.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData7.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_BLOCK;
        boolean boolean16 = indexMetaData7.equals((java.lang.Object) clusterBlock15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mapping("index.shadow_replicas");
        boolean boolean21 = indexMetaData17.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData17.getSettings();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData31);
        boolean boolean33 = indexMetaData28.equals((java.lang.Object) builder32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings39);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings44 = indexSettings42.getValue(settingsSetting43);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings44);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = settings44.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction48 = null;
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder27.putProperties(strMap46, strPredicate47, strFunction48);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder27.put("_all", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder27.put("index.data_path", true);
        java.lang.String str57 = builder27.remove("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder27.put("", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap63 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings64);
        org.apache.lucene.index.MergePolicy mergePolicy66 = indexSettings65.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings65.getSettings();
        org.elasticsearch.common.settings.Settings settings69 = settings67.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue71 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue72 = settings67.getAsTime("index.blocks.metadata", timeValue71);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap76 = indexMetaData75.getCustoms();
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings77);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings77);
        boolean boolean80 = indexSettings79.hasCustomDataPath();
        boolean boolean81 = indexSettings79.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue82 = indexSettings79.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings67.getAsTime("index.shared_filesystem", timeValue82);
        java.lang.String[] strArray86 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray88 = settings67.getAsArray("index.data_path", strArray86, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder60.putArray("", strArray86);
        java.lang.String[] strArray91 = settings23.getAsArray("_all", strArray86, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput93 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData7.writeTo(streamOutput93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNotNull(clusterBlock15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settingsSetting43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(mergePolicy66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(strArray91);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        boolean boolean7 = indexMetaData2.equals((java.lang.Object) builder6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = indexSettings16.getValue(settingsSetting17);
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.apache.lucene.index.MergePolicy mergePolicy24 = indexSettings23.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups(false);
        java.lang.String[] strArray30 = settings25.getAsArray("primary_terms");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings25.getAsGroups();
        org.elasticsearch.common.settings.Settings settings33 = settings25.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder1.numberOfShards(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder1.numberOfShards(10000);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(mergePolicy24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings0.getScope();
        boolean boolean6 = indexScopedSettings0.hasDynamicSetting("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str9 = builder7.get("index.data_path");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings settings11 = builder7.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getAsGroups(false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        boolean boolean22 = indexMetaData17.equals((java.lang.Object) builder21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings28);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings33 = indexSettings31.getValue(settingsSetting32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings33.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder16.putProperties(strMap35, strPredicate36, strFunction37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder15.settings(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder16.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder42.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder45.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData48.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        boolean boolean53 = indexMetaData48.equals((java.lang.Object) builder52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings59);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting63 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings64 = indexSettings62.getValue(settingsSetting63);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings64.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder47.putProperties(strMap66, strPredicate67, strFunction68);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder47.put("active_allocations", true);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder72.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder73.putNull("index.blocks.read_only");
        boolean boolean77 = indexScopedSettings0.updateSettings(settings11, builder45, builder73, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder73.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settingsSetting63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData11.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        boolean boolean23 = indexSettings22.hasCustomDataPath();
        boolean boolean24 = indexSettings22.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings22.getNodeSettings();
        java.lang.String[] strArray27 = settings25.getAsArray("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings31);
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings32.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getSettings();
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings34.getAsTime("index.blocks.metadata", timeValue38);
        org.elasticsearch.common.unit.TimeValue timeValue40 = settings25.getAsTime("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", timeValue39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings25);
        org.elasticsearch.common.io.stream.StreamInput streamInput42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData11.readDiffFrom(streamInput42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(timeValue40);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putMapping(mappingMetaData3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings23.getGroups("index.number_of_replicas");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings23.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        long long11 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        long long15 = indexMetaData13.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        boolean boolean18 = indexMetaData13.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData13.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData9.diff(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        java.lang.String str26 = settings23.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings23);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.index.Index index35 = indexMetaData30.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData30.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData30.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        int int46 = indexMetaData39.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData39.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version49 = indexMetaData39.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff50 = indexMetaData30.diff(indexMetaData39);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData39.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder29.state(state51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder8.state(state51);
        byte byte54 = state51.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(index35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNull(version49);
        org.junit.Assert.assertNotNull(indexMetaDataDiff50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + byte54 + "' != '" + (byte) 0 + "'", byte54 == (byte) 0);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getByPrefix("index.blocks.read_only");
        org.elasticsearch.common.unit.SizeValue sizeValue21 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue22 = settings19.getAsSize("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", sizeValue21);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(sizeValue22);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.getDefaultField();
        int int7 = indexSettings3.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings3.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray20 = settings11.getAsArray("index.shared_filesystem", strArray19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        boolean boolean22 = indexSettings21.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.apache.lucene.index.MergePolicy mergePolicy14 = indexSettings13.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings13.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue19 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue20 = settings15.getAsTime("index.blocks.metadata", timeValue19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        boolean boolean28 = indexSettings27.hasCustomDataPath();
        boolean boolean29 = indexSettings27.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue31 = settings15.getAsTime("index.shared_filesystem", timeValue30);
        java.lang.String[] strArray34 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray36 = settings15.getAsArray("index.data_path", strArray34, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings15.getGroups("state-");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        java.lang.String str41 = indexSettings40.getNodeName();
        int int42 = indexSettings40.getMaxRescoreWindow();
        boolean boolean43 = indexSettings40.isOnSharedFilesystem();
        boolean boolean44 = indexSettings40.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(mergePolicy14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.apache.lucene.index.MergePolicy mergePolicy22 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        java.lang.String str25 = indexSettings24.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings24.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings24.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(mergePolicy22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_all" + "'", str25, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertNotNull(timeValue27);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.index.Index index12 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index14 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertNull(index14);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder4.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("", 0.0d);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) builder14);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.apache.lucene.index.MergePolicy mergePolicy14 = indexSettings13.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings13.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("primary_terms");
        boolean boolean18 = settings17.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.upgraded_string");
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version22 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap23 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(mergePolicy14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = indexSettings5.hasCustomDataPath();
        long long7 = indexSettings5.getGcDeletesInMillis();
        java.lang.String str8 = indexSettings5.getUUID();
        java.lang.String str9 = indexSettings5.getUUID();
        int int10 = indexSettings5.getMaxRescoreWindow();
        boolean boolean11 = indexSettings5.isQueryStringAnalyzeWildcard();
        int int12 = indexSettings5.getNumberOfShards();
        java.lang.String str13 = indexSettings5.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 60000L + "'", long7 == 60000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_all" + "'", str13, "_all");
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings6);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mappingOrDefault("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData13);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long11 = indexMetaData0.getVersion();
        int int12 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet14 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.putAlias(aliasMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.getDefaultField();
        int int7 = indexSettings3.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings3.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray20 = settings11.getAsArray("index.shared_filesystem", strArray19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.putAlias(aliasMetaData23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mapping("index.shadow_replicas");
        boolean boolean31 = indexMetaData27.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.Settings settings33 = indexMetaData27.getSettings();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        boolean boolean35 = settings33.isEmpty();
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings0.applySettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings36.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("archived.");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isQueryStringLenient();
        int int11 = indexSettings6.getMaxRescoreWindow();
        org.elasticsearch.Version version12 = indexSettings6.getIndexVersionCreated();
        boolean boolean13 = indexSettings6.isOnSharedFilesystem();
        boolean boolean14 = indexSettings6.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings6.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings6.isWarmerEnabled();
        int int17 = indexSettings6.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        boolean boolean9 = indexSettings6.hasCustomDataPath();
        long long10 = indexSettings6.getGcDeletesInMillis();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexSettings6.getIndexMetaData();
        org.elasticsearch.Version version12 = indexMetaData11.getCreationVersion();
        org.elasticsearch.index.Index index13 = indexMetaData11.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData11.getSettings();
        org.elasticsearch.Version version15 = indexMetaData11.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version15);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getSettings();
        java.lang.String str11 = indexSettings5.getUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings5.getIndexMetaData();
        java.lang.String str13 = indexSettings5.customDataPath();
        org.apache.lucene.index.MergePolicy mergePolicy14 = indexSettings5.getMergePolicy();
        int int15 = indexSettings5.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mergePolicy14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean8 = indexSettings3.isTTLPurgeDisabled();
        org.elasticsearch.index.translog.Translog.Durability durability9 = indexSettings3.getTranslogDurability();
        int int10 = indexSettings3.getMaxResultWindow();
        boolean boolean11 = indexSettings3.isQueryStringAnalyzeWildcard();
        boolean boolean12 = indexSettings3.isOnSharedFilesystem();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher13 = indexSettings3.getParseFieldMatcher();
        long long14 = indexSettings3.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + durability9 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability9.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 60000L + "'", long14 == 60000L);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_shards", false);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.version.upgradedindex.shadow_replicas=-1a", true);
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.put("hi!", (long) (byte) 0, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = indexSettings5.hasCustomDataPath();
        java.lang.String str7 = indexSettings5.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher8 = indexSettings5.getParseFieldMatcher();
        boolean boolean9 = indexSettings5.isIndexUsingShadowReplicas();
        java.lang.String str10 = indexSettings5.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_all" + "'", str10, "_all");
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        long long23 = indexMetaData21.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean26 = indexMetaData21.isSameUUID("index.shadow_replicas");
        long long27 = indexMetaData21.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap28 = indexMetaData21.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        boolean boolean34 = indexMetaData29.equals((java.lang.Object) builder33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings40);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings40);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings45 = indexSettings43.getValue(settingsSetting44);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings49);
        org.apache.lucene.index.MergePolicy mergePolicy51 = indexSettings50.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings52 = indexSettings50.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings52.getAsGroups(false);
        java.lang.String[] strArray57 = settings52.getAsArray("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings52);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData21);
        long long60 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version61 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settingsSetting44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(mergePolicy51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNotNull(version61);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData11.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        boolean boolean23 = indexSettings22.hasCustomDataPath();
        boolean boolean24 = indexSettings22.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings22.getNodeSettings();
        java.lang.String[] strArray27 = settings25.getAsArray("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings31);
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings32.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getSettings();
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings34.getAsTime("index.blocks.metadata", timeValue38);
        org.elasticsearch.common.unit.TimeValue timeValue40 = settings25.getAsTime("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", timeValue39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings25);
        boolean boolean42 = indexSettings41.isQueryStringAnalyzeWildcard();
        boolean boolean43 = indexSettings41.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting0 = org.elasticsearch.index.IndexSettings.INDEX_CHECK_ON_STARTUP;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        boolean boolean7 = indexMetaData2.equals((java.lang.Object) builder6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = indexSettings16.getValue(settingsSetting17);
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings18);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings18.filter(strPredicate20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings21.toXContent(xContentBuilder22, params23);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = strSetting0.toXContent(xContentBuilder1, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSetting0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(params23);
        org.junit.Assert.assertNull(xContentBuilder24);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (byte) 100);
        long long8 = builder5.version();
        long long9 = builder5.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder12.putProperties(strMap31, strPredicate32, strFunction33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder11.settings(builder12);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder12.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder12.putArray("primary_terms", (java.util.List<java.lang.String>) strList71);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("index.version.minimum_compatible", (float) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder5.settings(builder76);
        java.lang.Class<?> wildcardClass78 = builder77.getClass();
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings6.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.Version version19 = indexSettings18.getIndexVersionCreated();
        java.lang.String str20 = indexSettings18.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings18.getRefreshInterval();
        boolean boolean22 = indexSettings18.isQueryStringLenient();
        int int23 = indexSettings18.getMaxRescoreWindow();
        org.elasticsearch.Version version24 = indexSettings18.getIndexVersionCreated();
        boolean boolean25 = indexSettings18.isOnSharedFilesystem();
        boolean boolean26 = indexSettings18.isDefaultAllowUnmappedFields();
        boolean boolean27 = settings11.equals((java.lang.Object) indexSettings18);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings35.getGlobalCheckpointInterval();
        int int37 = indexSettings35.getNumberOfShards();
        java.lang.String str38 = indexSettings35.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData2.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings13);
        java.lang.String str18 = indexSettings17.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings6.getNodeSettings();
        org.elasticsearch.Version version12 = indexSettings6.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        java.lang.String str27 = builder2.remove("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder2.put("index.priority", false);
        org.elasticsearch.common.settings.Settings settings31 = builder2.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.apache.lucene.index.MergePolicy mergePolicy37 = indexSettings36.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings38 = indexSettings36.getSettings();
        org.elasticsearch.common.settings.Settings settings40 = settings38.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue42 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue43 = settings38.getAsTime("index.blocks.metadata", timeValue42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = settings31.getAsTime("index.version.created", timeValue43);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(mergePolicy37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean4 = indexSettings3.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getGlobalCheckpointInterval();
        boolean boolean7 = indexSettings3.isDefaultAllowUnmappedFields();
        boolean boolean8 = indexSettings3.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj36 = new java.lang.Object();
        boolean boolean37 = settings35.equals(obj36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mapping("index.shadow_replicas");
        org.elasticsearch.Version version42 = indexMetaData39.getUpgradedVersion();
        org.elasticsearch.Version version43 = settings35.getAsVersion("index.shadow_replicas", version42);
        org.elasticsearch.Version version44 = settings30.getAsVersion("index.uuid", version43);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30);
        org.apache.lucene.util.Version version46 = indexMetaData0.getMinimumCompatibleVersion();
        int int47 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData48.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        boolean boolean53 = indexMetaData48.equals((java.lang.Object) builder52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings59);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting63 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings64 = indexSettings62.getValue(settingsSetting63);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap67 = indexMetaData66.getCustoms();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings68);
        org.apache.lucene.index.MergePolicy mergePolicy70 = indexSettings69.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings71 = indexSettings69.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings71.getAsGroups(false);
        java.lang.String[] strArray76 = settings71.getAsArray("primary_terms");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings71.getAsGroups();
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings71);
        boolean boolean79 = indexSettings78.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNull(version46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settingsSetting63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(mergePolicy70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexSettings8.getValue(settingsSetting9);
        boolean boolean11 = indexSettings8.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version12 = indexSettings8.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexSettings8.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings8.getRefreshInterval();
        java.lang.String str15 = indexSettings8.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder5.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = settings13.equals(obj14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mapping("index.shadow_replicas");
        org.elasticsearch.Version version20 = indexMetaData17.getUpgradedVersion();
        org.elasticsearch.Version version21 = settings13.getAsVersion("index.shadow_replicas", version20);
        java.lang.Class<?> wildcardClass22 = settings13.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder11.put("active_allocations", (java.lang.Class) wildcardClass22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.apache.lucene.index.MergePolicy mergePolicy29 = indexSettings28.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getSettings();
        org.elasticsearch.common.settings.Settings settings32 = settings30.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue34 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue35 = settings30.getAsTime("index.blocks.metadata", timeValue34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings40);
        boolean boolean43 = indexSettings42.hasCustomDataPath();
        boolean boolean44 = indexSettings42.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings42.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue46 = settings30.getAsTime("index.shared_filesystem", timeValue45);
        java.lang.Class<?> wildcardClass47 = timeValue45.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder23.put("index.", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder0.put("index.blocks.read", (java.lang.Class) wildcardClass47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings56);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings56);
        java.lang.String str60 = indexSettings59.getNodeName();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings59.getNodeSettings();
        java.lang.String[] strArray63 = new java.lang.String[] {};
        java.lang.String[] strArray64 = settings61.getAsArray("index.priority", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder49.putArray("index.blocks.read", strArray64);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder65.putNull("index.version.created");
        java.lang.String str69 = builder65.remove("primary_terms");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(mergePolicy29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        boolean boolean8 = indexSettings3.matchesIndexName("index.blocks.read");
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings3.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeValue9);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        boolean boolean19 = indexSettings17.hasCustomDataPath();
        boolean boolean20 = indexSettings17.isTTLPurgeDisabled();
        int int21 = indexSettings17.getMaxRescoreWindow();
        boolean boolean22 = indexSettings17.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean10 = indexSettings9.isTTLPurgeDisabled();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings9.getMergePolicy();
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings9.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher13 = indexSettings9.getParseFieldMatcher();
        boolean boolean14 = indexSettings9.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertNotNull(parseFieldMatcher13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("_all", custom11);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("active_allocations", false);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.version.minimum_compatible", false);
        java.lang.String[] strArray37 = settings32.getAsArray("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder0.extendArray("index.version.created", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        boolean boolean48 = indexMetaData43.equals((java.lang.Object) builder47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings54);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getValue(settingsSetting58);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = settings59.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate62 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction63 = null;
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder42.putProperties(strMap61, strPredicate62, strFunction63);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder42.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder42.loadFromSource("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.apache.lucene.index.MergePolicy mergePolicy74 = indexSettings73.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings75 = indexSettings73.getSettings();
        org.elasticsearch.common.settings.Settings settings77 = settings75.getAsSettings("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap78 = settings77.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder42.put(strMap78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder41.put(strMap78);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder41.put("primary_terms", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder83.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", 5000099.0d);
        java.lang.String str88 = builder86.get("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder25.putNull("index.shared_filesystem");
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.loadFromStream("index.creation_date", inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet8 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings6);
        org.apache.lucene.index.MergePolicy mergePolicy8 = indexSettings7.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings7.getSettings();
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue13 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue14 = settings9.getAsTime("index.blocks.metadata", timeValue13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings19);
        boolean boolean22 = indexSettings21.hasCustomDataPath();
        boolean boolean23 = indexSettings21.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings21.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue25 = settings9.getAsTime("index.shared_filesystem", timeValue24);
        java.lang.String[] strArray28 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray30 = settings9.getAsArray("index.data_path", strArray28, (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings32 = settings9.filter(strPredicate31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = indexMetaData35.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        boolean boolean40 = indexMetaData35.equals((java.lang.Object) builder39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap42 = indexMetaData41.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData44.getCustoms();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings46);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings46);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting50 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings51 = indexSettings49.getValue(settingsSetting50);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = settings51.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction55 = null;
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder34.putProperties(strMap53, strPredicate54, strFunction55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap60 = indexMetaData59.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap63 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings64);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings64);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings71);
        java.lang.String[] strArray79 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray80 = settings71.getAsArray("index.shared_filesystem", strArray79);
        java.lang.String[] strArray82 = settings64.getAsArray("index.version.created_string", strArray79, (java.lang.Boolean) false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap84 = indexMetaData83.getCustoms();
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData83, settings85);
        java.lang.String[] strArray93 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray94 = settings85.getAsArray("index.shared_filesystem", strArray93);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder56.put("index.uuid", "primary_terms", strArray79, strArray94);
        java.lang.String[] strArray96 = settings9.getAsArray("", strArray79);
        boolean boolean97 = settings9.isEmpty();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = builder1.settings(settings9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(mergePolicy8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNull(mappingMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settingsSetting50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings16 = settings14.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings14.getAsTime("index.blocks.metadata", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        boolean boolean28 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings14.getAsTime("index.shared_filesystem", timeValue29);
        java.lang.String[] strArray33 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray35 = settings14.getAsArray("index.data_path", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        boolean boolean42 = indexMetaData0.equals((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = indexMetaData0.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder28, params29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(params29);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean23 = indexMetaData18.equals((java.lang.Object) builder22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings29);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getValue(settingsSetting33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        org.elasticsearch.common.settings.Settings settings36 = indexMetaData18.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap37 = indexMetaData18.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet39 = null; // flaky: indexMetaData18.activeAllocationIds((int) 'a');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder41.removeAllAliases();
        boolean boolean43 = settings17.equals((java.lang.Object) builder42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        boolean boolean46 = indexSettings44.matchesIndexName("index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap37);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings16.filter(strPredicate18);
        java.util.Set<java.lang.String> strSet20 = settings19.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [false]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getAsGroups(false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue12 = settings7.getAsRatio("state-", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        long long23 = indexMetaData21.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean26 = indexMetaData21.isSameUUID("index.shadow_replicas");
        long long27 = indexMetaData21.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap28 = indexMetaData21.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        boolean boolean34 = indexMetaData29.equals((java.lang.Object) builder33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings40);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings40);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings45 = indexSettings43.getValue(settingsSetting44);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings49);
        org.apache.lucene.index.MergePolicy mergePolicy51 = indexSettings50.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings52 = indexSettings50.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings52.getAsGroups(false);
        java.lang.String[] strArray57 = settings52.getAsArray("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings52);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData21);
        long long60 = indexMetaData0.getCreationDate();
        long long61 = indexMetaData0.getVersion();
        org.elasticsearch.Version version62 = indexMetaData0.getUpgradedVersion();
        java.lang.String str63 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settingsSetting44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(mergePolicy51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_na_" + "'", str63, "_na_");
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        boolean boolean9 = indexMetaData0.isSameUUID("_na_");
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        boolean boolean14 = indexMetaData0.equals((java.lang.Object) indexSettings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfReplicas(10000);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData11.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        boolean boolean23 = indexSettings22.hasCustomDataPath();
        boolean boolean24 = indexSettings22.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings22.getNodeSettings();
        java.lang.String[] strArray27 = settings25.getAsArray("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings31);
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings32.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getSettings();
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings34.getAsTime("index.blocks.metadata", timeValue38);
        org.elasticsearch.common.unit.TimeValue timeValue40 = settings25.getAsTime("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", timeValue39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings25);
        java.lang.String str42 = indexSettings41.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "_na_" + "'", str42, "_na_");
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean8 = indexSettings3.isTTLPurgeDisabled();
        org.elasticsearch.index.translog.Translog.Durability durability9 = indexSettings3.getTranslogDurability();
        boolean boolean10 = indexSettings3.isOnSharedFilesystem();
        java.lang.String str11 = indexSettings3.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + durability9 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability9.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings47.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(strMap68);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean10 = indexSettings9.isQueryStringAnalyzeWildcard();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings9.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings9.getTranslogSyncInterval();
        java.lang.String str13 = indexSettings9.customDataPath();
        java.lang.String str14 = indexSettings9.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings17.getIndexMetaData();
        int int20 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean23 = indexMetaData19.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        java.util.Set<java.lang.String> strSet26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.putActiveAllocationIds((int) (short) 100, strSet26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.blocks.write");
        boolean boolean13 = indexMetaData0.isSameUUID("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("archived.", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder9.settings(builder10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder10.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder10.putArray("primary_terms", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.version.minimum_compatible", (float) '4');
        java.util.Map<java.lang.String, java.lang.String> strMap75 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder7.put(strMap75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", (long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData81 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap83 = indexMetaData82.getCustoms();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData82, settings84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData81, settings84);
        boolean boolean87 = indexSettings86.hasCustomDataPath();
        boolean boolean88 = indexSettings86.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings89 = indexSettings86.getNodeSettings();
        java.lang.String[] strArray91 = settings89.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder76.putArray("index.version.upgraded", strArray91);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder76.put("index.creation_date", 0);
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder76.loadFromSource("false");
        org.elasticsearch.common.settings.Settings.Builder builder99 = builder76.normalizePrefix("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(indexMetaData81);
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(strImmutableOpenMap83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder69.putMapping(mappingMetaData70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.created");
        boolean boolean10 = indexMetaData0.isSameUUID("");
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexMetaData0.readFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.loadFromSource("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder5.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.blocks.write", false);
        java.lang.String str11 = builder9.remove("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings11.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        boolean boolean22 = indexMetaData17.equals((java.lang.Object) builder21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings28);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings33 = indexSettings31.getValue(settingsSetting32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings33.getAsMap();
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings10.diff(settings11, settings33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean49 = indexMetaData44.equals((java.lang.Object) builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings55);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getValue(settingsSetting59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings60.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings37.diff(settings38, settings60);
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings10.dryRun(settings38);
        java.lang.String str65 = indexScopedSettings10.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap67 = indexMetaData66.getCustoms();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int72 = builder71.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj74 = new java.lang.Object();
        boolean boolean75 = settings73.equals(obj74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder71.settings(settings73);
        java.lang.Boolean boolean79 = settings73.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue81 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue82 = settings73.getAsBytesSize("index.version.upgraded_string", byteSizeValue81);
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings10.diff(settings68, settings73);
        boolean boolean84 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings83);
        java.lang.Boolean boolean87 = settings83.getAsBoolean("_all", (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings83);
        java.util.Set<java.lang.String> strSet90 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters92 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + boolean79 + "' != '" + false + "'", boolean79, false);
        org.junit.Assert.assertNull(byteSizeValue82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + boolean87 + "' != '" + true + "'", boolean87, true);
        org.junit.Assert.assertNull(strSet90);
        org.junit.Assert.assertNull(discoveryNodeFilters92);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings15.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getSettings();
        java.lang.String[] strArray19 = settings17.getAsArray("index.version.upgraded");
        java.lang.String[] strArray21 = settings7.getAsArray("index.blocks.read", strArray19, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder6.put((java.lang.Object[]) strArray19);
        java.lang.String str24 = builder6.remove("_all");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder3.put(strMap25);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        java.lang.String str30 = builder2.remove("primary_terms");
        java.lang.String str32 = builder2.get("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray54 = settings45.getAsArray("index.shared_filesystem", strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.putArray("index.creation_date", strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder41.put("active_allocations", (double) 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("_na_", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap65 = indexMetaData64.getCustoms();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings66);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        long long72 = indexMetaData70.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData70);
        boolean boolean75 = indexMetaData70.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version76 = indexMetaData70.getCreationVersion();
        org.elasticsearch.Version version77 = settings66.getAsVersion("index.version.minimum_compatible", version76);
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings66);
        java.lang.String[] strArray80 = settings78.getAsArray("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder61.put((java.lang.Object[]) strArray80);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder2.putArray("index.version.upgraded_string", strArray80);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder82.put("index.shared_filesystem.recover_on_any_node", false);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder82.put("index.shared_filesystem", (int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(version77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = settings6.equals(obj7);
        org.elasticsearch.common.settings.Settings settings10 = settings6.getByPrefix("");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings11.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(timeValue12);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("_all", "index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.apache.lucene.index.MergePolicy mergePolicy9 = indexSettings8.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings8.getSettings();
        org.elasticsearch.common.settings.Settings settings12 = settings10.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue14 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue15 = settings10.getAsTime("index.blocks.metadata", timeValue14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        boolean boolean23 = indexSettings22.hasCustomDataPath();
        boolean boolean24 = indexSettings22.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue26 = settings10.getAsTime("index.shared_filesystem", timeValue25);
        java.lang.String[] strArray29 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray31 = settings10.getAsArray("index.data_path", strArray29, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings10);
        org.elasticsearch.index.translog.Translog.Durability durability33 = indexSettings32.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(mergePolicy9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + durability33 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability33.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long11 = indexMetaData0.getVersion();
        int int12 = indexMetaData0.getNumberOfShards();
        int int13 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.creationDate((long) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = builder18.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.numberOfShards(10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.common.io.stream.StreamInput streamInput2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff3 = indexMetaData0.readDiffFrom(streamInput2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version21 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = builder22.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(indexMetaData23);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = settings5.getAsSettings("primary_terms");
        boolean boolean8 = settings7.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.version.upgraded_string");
        java.lang.String str13 = settings7.get("index.creation_date_string", "state-");
        java.lang.Boolean boolean16 = settings7.getAsBoolean("index.version.upgraded_string", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "state-" + "'", str13, "state-");
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings10);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings10);
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getValue(settingsSetting15);
        org.elasticsearch.common.settings.Settings settings18 = settings16.getByPrefix("index.blocks.metadata");
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.String str22 = settings20.get("index.number_of_replicas");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings20.getAsGroups();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.String str28 = settings26.get("index.number_of_replicas");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData30.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        boolean boolean35 = indexMetaData30.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings41);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting45 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings46 = indexSettings44.getValue(settingsSetting45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings46);
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings46.filter(strPredicate48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings49.toXContent(xContentBuilder50, params51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = settings26.toXContent(xContentBuilder29, params51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = indexMetaData0.toXContent(xContentBuilder25, params51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settingsSetting45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(xContentBuilder53);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("", 0.0d);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("=52 primary_terms=true ", (long) (short) -1, byteSizeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.", (float) 60000L);
        java.lang.String str27 = builder22.get("index.uuid");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder22.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("_na_", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.version((long) (byte) 0);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        int int7 = indexSettings3.getMaxRescoreWindow();
        org.elasticsearch.Version version8 = indexSettings3.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings3.getSettings();
        boolean boolean11 = indexSettings3.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) (byte) 10);
        long long5 = builder2.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.settings(settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfShards((-1));
        java.lang.String str18 = builder15.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.shadow_replicas", (float) '#');
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("index.version.upgraded_string", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getNodeSettings();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = indexSettings5.getFlushThresholdSize();
        boolean boolean12 = indexSettings5.isQueryStringAllowLeadingWildcard();
        boolean boolean13 = indexSettings5.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.diff(settings13, settings35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings35, strPredicate39, indexScopedSettings40);
        org.elasticsearch.index.Index index45 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state47 = indexMetaData4.getState();
        byte byte48 = state47.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNull(index45);
        org.junit.Assert.assertTrue("'" + state47 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state47.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 0 + "'", byte48 == (byte) 0);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings17.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamInput streamInput20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = indexMetaData19.readFrom(streamInput20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(indexMetaData19);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings12.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean23 = indexMetaData18.equals((java.lang.Object) builder22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings29);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getValue(settingsSetting33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = settings34.getAsMap();
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings11.diff(settings12, settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder10.settings(settings34);
        org.elasticsearch.common.settings.Settings settings40 = settings34.getAsSettings("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder8.settings(settings34);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = indexSettings43.getIndexMetaData();
        int int45 = indexSettings43.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("1");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings6.getValue(settingsSetting8);
        org.elasticsearch.Version version10 = indexSettings6.getIndexVersionCreated();
        boolean boolean11 = indexSettings6.isQueryStringAnalyzeWildcard();
        int int12 = indexSettings6.getNumberOfReplicas();
        java.lang.String str13 = indexSettings6.getDefaultField();
        int int14 = indexSettings6.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings6.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = settings15.getAsMap();
        java.lang.Boolean boolean19 = settings15.getAsBoolean("index.creation_date_string", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_all" + "'", str13, "_all");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        boolean boolean13 = indexMetaData9.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        boolean boolean27 = indexMetaData22.equals((java.lang.Object) builder26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings33);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings38 = indexSettings36.getValue(settingsSetting37);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings38.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings38);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj44 = new java.lang.Object();
        boolean boolean45 = settings43.equals(obj44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mapping("index.shadow_replicas");
        org.elasticsearch.Version version50 = indexMetaData47.getUpgradedVersion();
        org.elasticsearch.Version version51 = settings43.getAsVersion("index.shadow_replicas", version50);
        org.elasticsearch.Version version52 = settings38.getAsVersion("index.uuid", version51);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings38);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff54 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state55 = indexMetaData0.getState();
        byte byte56 = state55.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNotNull(version50);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertNotNull(version52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff54);
        org.junit.Assert.assertTrue("'" + state55 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state55.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        int int9 = indexSettings6.getNumberOfShards();
        int int10 = indexSettings6.getNumberOfShards();
        java.lang.String str11 = indexSettings6.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig12 = indexSettings6.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_all" + "'", str11, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig12);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        org.elasticsearch.common.settings.Settings settings88 = builder84.build();
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder84.put("index.version.upgraded_string", (double) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder91.put("index.version.created_string", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder94.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder95.put("index.blocks.metadata", (double) ' ');
        java.util.Map<java.lang.String, java.lang.String> strMap99 = builder98.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(strMap99);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.shadow_replicas", (float) '#');
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings16 = settings14.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings14.getAsTime("index.blocks.metadata", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        boolean boolean28 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings14.getAsTime("index.shared_filesystem", timeValue29);
        java.lang.String[] strArray33 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray35 = settings14.getAsArray("index.data_path", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder6.putArray("index.number_of_shards", strArray33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings39);
        org.apache.lucene.index.MergePolicy mergePolicy41 = indexSettings40.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings42 = indexSettings40.getSettings();
        org.elasticsearch.common.settings.Settings settings44 = settings42.getAsSettings("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean50 = indexMetaData45.equals((java.lang.Object) builder49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings56);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings56);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings61 = indexSettings59.getValue(settingsSetting60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.Version version63 = indexSettings62.getIndexVersionCreated();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher64 = indexSettings62.getParseFieldMatcher();
        boolean boolean65 = settings42.equals((java.lang.Object) parseFieldMatcher64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings42.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap72 = indexMetaData71.getCustoms();
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings73);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings73);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings73);
        java.lang.String str77 = indexSettings76.getNodeName();
        org.elasticsearch.common.settings.Settings settings78 = indexSettings76.getNodeSettings();
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.lang.String[] strArray81 = settings78.getAsArray("index.priority", strArray80);
        java.lang.String[] strArray82 = settings42.getAsArray("10", strArray81);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder6.put((java.lang.Object[]) strArray82);
        java.lang.String str85 = builder83.get("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(mergePolicy41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(parseFieldMatcher64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("_na_", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.number_of_replicas");
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings6.getSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = settings9.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.removeAlias("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder27.replacePropertyPlaceholders();
        java.lang.String[] strArray55 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.minimum_compatible", "index.version.upgraded", "_na_", "_na_", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "", "index.", "_all", "index.blocks.read_only", "index.blocks.write", "index.uuid", "index.priority", "index.priority", "index.blocks.metadata", "index.uuid", "index.version.upgraded_string", "index.version.created", "_all", "index.uuid", "index.version.upgraded_string", "hi!", "index.version.upgraded" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.putArray("index.shadow_replicas", (java.util.List<java.lang.String>) strList56);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder28.put("index.priority", (long) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder14.settings(builder28);
        java.lang.String str64 = builder28.remove("0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = indexSettings5.hasCustomDataPath();
        boolean boolean7 = indexSettings5.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings5.getGlobalCheckpointInterval();
        boolean boolean9 = indexSettings5.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData10.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData10.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData10.mappingOrDefault("_na_");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData10.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(mappingMetaData16);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        boolean boolean32 = indexMetaData27.equals((java.lang.Object) builder31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getValue(settingsSetting42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings43.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder26.putProperties(strMap45, strPredicate46, strFunction47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder26.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder26.loadFromSource("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings56);
        org.apache.lucene.index.MergePolicy mergePolicy58 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Settings settings61 = settings59.getAsSettings("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings61.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder26.put(strMap62);
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction65 = null;
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder25.putProperties(strMap62, strPredicate64, strFunction65);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder25.put("index.version.created", (float) (byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(mergePolicy58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte6 = state5.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.primaryTerm((int) (short) 100, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 1 + "'", byte6 == (byte) 1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("0");
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("index.shadow_replicas");
        boolean boolean12 = indexMetaData8.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData8.getSettings();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = settings14.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings17.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.diff(settings13, settings35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings35, strPredicate39, indexScopedSettings40);
        org.elasticsearch.index.Index index45 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.common.io.stream.StreamInput streamInput47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = indexMetaData4.readFrom(streamInput47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNull(index45);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean8 = indexSettings3.isQueryStringLenient();
        boolean boolean9 = indexSettings3.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings3.getSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = indexSettings3.getParseFieldMatcher();
        int int12 = indexSettings3.getMaxRescoreWindow();
        boolean boolean13 = indexSettings3.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings3.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings3.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(parseFieldMatcher11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(timeValue15);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        boolean boolean12 = indexSettings6.matchesIndexName("index.number_of_replicas");
        org.elasticsearch.index.translog.Translog.Durability durability13 = indexSettings6.getTranslogDurability();
        int int14 = indexSettings6.getMaxResultWindow();
        boolean boolean15 = indexSettings6.isQueryStringAllowLeadingWildcard();
        boolean boolean16 = indexSettings6.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings6.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings6.getTranslogSyncInterval();
        java.lang.String str19 = indexSettings6.getNodeName();
        java.lang.String str20 = indexSettings6.customDataPath();
        java.lang.String str21 = indexSettings6.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + durability13 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability13.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean8 = indexSettings3.isQueryStringLenient();
        boolean boolean9 = indexSettings3.hasCustomDataPath();
        boolean boolean10 = indexSettings3.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexSettings3.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData11.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = settings34.equals(obj35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("index.shadow_replicas");
        org.elasticsearch.Version version41 = indexMetaData38.getUpgradedVersion();
        org.elasticsearch.Version version42 = settings34.getAsVersion("index.shadow_replicas", version41);
        org.elasticsearch.Version version43 = settings29.getAsVersion("index.uuid", version42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        boolean boolean45 = indexSettings44.isIndexUsingShadowReplicas();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig46 = indexSettings44.getMergeSchedulerConfig();
        java.lang.String str47 = indexSettings44.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getGroups("index.number_of_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean49 = indexMetaData44.equals((java.lang.Object) builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings55);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getValue(settingsSetting59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings60.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings37.diff(settings38, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings65.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        boolean boolean76 = indexMetaData71.equals((java.lang.Object) builder75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData79, settings82);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings82);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings87 = indexSettings85.getValue(settingsSetting86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = settings87.getAsMap();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings64.diff(settings65, settings87);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings37.dryRun(settings65);
        org.elasticsearch.index.IndexSettings indexSettings92 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30, strPredicate36, indexScopedSettings37);
        java.util.Set<java.lang.String> strSet94 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.settings.Settings settings95 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version96 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state97 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(strSet94);
        org.junit.Assert.assertNotNull(settings95);
        org.junit.Assert.assertNull(version96);
        org.junit.Assert.assertTrue("'" + state97 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state97.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.creationDate((long) (byte) 10);
        long long9 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.state(state16);
        byte byte18 = state16.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder3.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder3.primaryTerm((int) (short) 0, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        java.lang.String str27 = builder0.get("index.number_of_shards");
        java.lang.String str29 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder0.put("", (long) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        boolean boolean7 = indexMetaData2.equals((java.lang.Object) builder6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings18 = indexSettings16.getValue(settingsSetting17);
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.apache.lucene.index.MergePolicy mergePolicy24 = indexSettings23.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups(false);
        java.lang.String[] strArray30 = settings25.getAsArray("primary_terms");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings25.getAsGroups();
        org.elasticsearch.common.settings.Settings settings33 = settings25.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings35 = settings33.getAsSettings("index.creation_date");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = builder38.build();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings40.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings40.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings53.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings53.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate58 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder52.putProperties(strMap57, strPredicate58, strFunction59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder48.settings(builder52);
        boolean boolean62 = settings40.equals((java.lang.Object) builder61);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData64.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        boolean boolean69 = indexMetaData64.equals((java.lang.Object) builder68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap74 = indexMetaData73.getCustoms();
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData73, settings75);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings75);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings75);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting79 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings80 = indexSettings78.getValue(settingsSetting79);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings80);
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.Settings settings83 = settings80.filter(strPredicate82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params85 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder86 = settings83.toXContent(xContentBuilder84, params85);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder87 = settings40.toXContent(xContentBuilder63, params85);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder88 = settings35.toXContent(xContentBuilder36, params85);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder1, params85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(mergePolicy24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settingsSetting79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(params85);
        org.junit.Assert.assertNull(xContentBuilder86);
        org.junit.Assert.assertNull(xContentBuilder87);
        org.junit.Assert.assertNull(xContentBuilder88);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("index.creation_date");
        org.elasticsearch.index.Index index5 = indexMetaData2.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        long long7 = builder6.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = indexSettings5.hasCustomDataPath();
        boolean boolean7 = indexSettings5.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings5.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings5.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean4 = indexSettings3.isIndexUsingShadowReplicas();
        int int5 = indexSettings3.getNumberOfReplicas();
        boolean boolean7 = indexSettings3.matchesIndexName("");
        int int8 = indexSettings3.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexSettings3.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings25.getAsMap();
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings2.diff(settings3, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(settings25);
        org.elasticsearch.common.settings.Settings settings31 = settings25.getAsSettings("index.version.created");
        boolean boolean32 = settings31.isEmpty();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings37);
        org.apache.lucene.index.MergePolicy mergePolicy39 = indexSettings38.getMergePolicy();
        boolean boolean40 = indexSettings38.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings38.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig42 = indexSettings38.getMergeSchedulerConfig();
        boolean boolean43 = indexSettings38.isTTLPurgeDisabled();
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings38.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings38.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue46 = settings31.getAsTime("state-", timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(mergePolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(timeValue46);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.putAlias(aliasMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        boolean boolean28 = indexMetaData23.equals((java.lang.Object) builder27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings34);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings39 = indexSettings37.getValue(settingsSetting38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings39.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        boolean boolean48 = indexMetaData43.equals((java.lang.Object) builder47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings54);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings59 = indexSettings57.getValue(settingsSetting58);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap62 = indexMetaData61.getCustoms();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings63);
        org.apache.lucene.index.MergePolicy mergePolicy65 = indexSettings64.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings66 = indexSettings64.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getAsGroups(false);
        java.lang.String[] strArray71 = settings66.getAsArray("primary_terms");
        java.lang.String[] strArray73 = settings39.getAsArray("index.shared_filesystem", strArray71, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder0.put((java.lang.Object[]) strArray73);
        java.lang.String str76 = builder74.remove("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder74.put("_all", false);
        java.util.concurrent.TimeUnit timeUnit82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put("index.shared_filesystem", (long) (byte) 1, timeUnit82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(mergePolicy65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings settings31 = builder30.build();
        java.io.InputStream inputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder30.loadFromStream("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", inputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData2.getSettings();
        java.lang.String[] strArray5 = settings3.getAsArray("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.util.Set<java.lang.String> strSet7 = settings3.names();
        java.lang.String str10 = settings3.get("index.shared_filesystem.recover_on_any_node", "index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.uuid" + "'", str10, "index.uuid");
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.customDataPath();
        int int7 = indexSettings3.getMaxRescoreWindow();
        org.elasticsearch.Version version8 = indexSettings3.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings3.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexSettings3.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData11.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings19.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        java.lang.Boolean boolean28 = settings19.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.index.translog.Translog.Durability durability30 = indexSettings29.getTranslogDurability();
        int int31 = indexSettings29.getNumberOfShards();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings29.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
        org.junit.Assert.assertTrue("'" + durability30 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability30.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(timeValue32);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean21 = indexMetaData16.equals((java.lang.Object) builder20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings30.getValue(settingsSetting31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings32.getAsMap();
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings9.diff(settings10, settings32);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings35);
        long long38 = indexMetaData0.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (byte) 0);
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        org.apache.lucene.util.Version version36 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version37 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings40.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings40.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData46.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        boolean boolean51 = indexMetaData46.equals((java.lang.Object) builder50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings57);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings57);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting61 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings62 = indexSettings60.getValue(settingsSetting61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings62);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = settings62.getAsMap();
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings39.diff(settings40, settings62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap69 = indexMetaData68.getCustoms();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings70);
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings72.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue74 = settings40.getAsTime("hi!", timeValue73);
        java.lang.Boolean boolean77 = settings40.getAsBoolean("", (java.lang.Boolean) false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap80 = indexMetaData79.getCustoms();
        long long81 = indexMetaData79.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData79);
        boolean boolean84 = indexMetaData79.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap85 = indexMetaData79.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters86 = indexMetaData79.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params87 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean88 = indexMetaData79.equals((java.lang.Object) params87);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder89 = settings40.toXContent(xContentBuilder78, params87);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = indexMetaData0.toXContent(xContentBuilder38, params87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settingsSetting61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + false + "'", boolean77, false);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(strImmutableOpenMap80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap85);
        org.junit.Assert.assertNull(discoveryNodeFilters86);
        org.junit.Assert.assertNotNull(params87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(xContentBuilder89);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        boolean boolean27 = indexSettings26.isQueryStringAllowLeadingWildcard();
        int int28 = indexSettings26.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexSettings26.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.creationDate((long) (byte) 10);
        long long35 = builder32.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder32.settings(settings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings38);
        java.lang.String str45 = indexSettings44.getUUID();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig46 = indexSettings44.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "_na_" + "'", str45, "_na_");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig46);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("active_allocations", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder26.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", false);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.put("", "state-");
        org.elasticsearch.common.settings.Settings settings37 = builder31.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings37.getGroups("_na_", false);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder25.put(strMap41);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj25 = new java.lang.Object();
        boolean boolean26 = settings24.equals(obj25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mapping("index.shadow_replicas");
        org.elasticsearch.Version version31 = indexMetaData28.getUpgradedVersion();
        org.elasticsearch.Version version32 = settings24.getAsVersion("index.shadow_replicas", version31);
        java.lang.Class<?> wildcardClass33 = settings24.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.put("index.blocks.read", (java.lang.Class) wildcardClass33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder0.loadFromSource("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        java.nio.file.Path path37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder38 = builder0.loadFromPath(path37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        boolean boolean14 = indexMetaData0.equals((java.lang.Object) indexSettings12);
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getNodeSettings();
        org.elasticsearch.Version version17 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(version7);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.diff(settings13, settings35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings35, strPredicate39, indexScopedSettings40);
        boolean boolean45 = false; // flaky: indexSettings44.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings35.getGlobalCheckpointInterval();
        boolean boolean37 = indexSettings35.isQueryStringAnalyzeWildcard();
        java.lang.String str38 = indexSettings35.getNodeName();
        boolean boolean39 = indexSettings35.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.number_of_replicas", (float) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder28.loadFromSource("1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings16 = settings14.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings14.getAsTime("index.blocks.metadata", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        boolean boolean28 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings14.getAsTime("index.shared_filesystem", timeValue29);
        java.lang.String[] strArray33 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray35 = settings14.getAsArray("index.data_path", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings36.getTranslogSyncInterval();
        int int38 = indexSettings36.getNumberOfShards();
        java.lang.String str39 = indexSettings36.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        boolean boolean9 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = builder12.build();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData13.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = indexMetaData0.activeAllocationIds(0);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData0.mapping("archived.");
        org.elasticsearch.Version version16 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(version16);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder5.primaryTerm(10000, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isShadowReplicaIndex();
        int int6 = indexSettings3.getNumberOfShards();
        java.lang.String str7 = indexSettings3.getDefaultField();
        int int8 = indexSettings3.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_all" + "'", str7, "_all");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10000 + "'", int8 == 10000);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.priority");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData11.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        boolean boolean23 = indexSettings22.hasCustomDataPath();
        boolean boolean24 = indexSettings22.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings22.getNodeSettings();
        java.lang.String[] strArray27 = settings25.getAsArray("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings31);
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings32.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getSettings();
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings34.getAsTime("index.blocks.metadata", timeValue38);
        org.elasticsearch.common.unit.TimeValue timeValue40 = settings25.getAsTime("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", timeValue39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings25);
        org.elasticsearch.common.settings.Settings settings42 = indexSettings41.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        java.lang.String str46 = settings42.get("primary_terms", "hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        boolean boolean16 = indexMetaData12.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str17 = indexMetaData12.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData12);
        long long20 = indexMetaData12.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        boolean boolean28 = indexMetaData23.equals((java.lang.Object) builder27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings34);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings39 = indexSettings37.getValue(settingsSetting38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings39.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction43 = null;
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder22.putProperties(strMap41, strPredicate42, strFunction43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder44.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.loadFromSource("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder21.settings(builder50);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting55 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer56 = null;
        indexScopedSettings54.addSettingsUpdateConsumer(settingsSetting55, settingsConsumer56);
        boolean boolean59 = indexScopedSettings54.hasDynamicSetting("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData60.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap64 = indexMetaData63.getCustoms();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings65);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings65);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting69 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings70 = indexSettings68.getValue(settingsSetting69);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings70.getAsGroups(true);
        boolean boolean73 = settings70.isEmpty();
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings54.dryRun(settings70);
        java.lang.String str76 = settings74.get("archived.");
        java.util.Set<java.lang.String> strSet77 = settings74.names();
        boolean boolean78 = settings74.isEmpty();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder50.put(settings74);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settingsSetting38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertNotNull(settingsSetting55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(strImmutableOpenMap64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settingsSetting69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.get("index.data_path");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = settings6.equals(obj7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("index.shadow_replicas");
        org.elasticsearch.Version version13 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.Version version14 = settings6.getAsVersion("index.shadow_replicas", version13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder0.put("_na_", version14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.loadFromSource("active_allocations");
        org.elasticsearch.common.settings.Settings settings18 = builder17.build();
        java.lang.String str20 = builder17.remove("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap31 = indexMetaData22.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.apache.lucene.util.Version version33 = indexMetaData22.getMinimumCompatibleVersion();
        java.lang.Class<?> wildcardClass34 = indexMetaData22.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder17.put("1", (java.lang.Class) wildcardClass34);
        java.lang.String str37 = builder17.remove("0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap31);
        org.junit.Assert.assertNull(version33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        long long8 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = settings9.equals(obj10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.Version version16 = indexMetaData13.getUpgradedVersion();
        org.elasticsearch.Version version17 = settings9.getAsVersion("index.shadow_replicas", version16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher21 = indexSettings20.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher21);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        int int70 = indexMetaData63.getNumberOfShards();
        long long71 = indexMetaData63.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap72 = indexMetaData63.getMappings();
        int int73 = indexMetaData63.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index14 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(index14);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("index.creation_date");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = settings9.equals(obj10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.settings(settings9);
        java.lang.Boolean boolean15 = settings9.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = settings9.getAsBytesSize("index.version.upgraded_string", byteSizeValue17);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings22.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.Version version27 = indexSettings26.getIndexVersionCreated();
        java.lang.String str28 = indexSettings26.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getRefreshInterval();
        boolean boolean30 = indexSettings26.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings31 = indexSettings26.getNodeSettings();
        java.lang.String[] strArray33 = settings31.getAsArray("index.priority");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings31.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings9.toXContent(xContentBuilder19, params35);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData2, xContentBuilder5, params35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings5.getGlobalCheckpointInterval();
        boolean boolean12 = indexSettings5.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings5.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteSizeValue13);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings7);
        boolean boolean11 = indexMetaData4.isSameUUID("index.version.upgraded_string");
        boolean boolean13 = indexMetaData4.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.state(state14);
        int int16 = builder15.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData30.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        boolean boolean35 = indexMetaData30.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings41);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting45 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings46 = indexSettings44.getValue(settingsSetting45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings46.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder29.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings54);
        org.apache.lucene.index.MergePolicy mergePolicy56 = indexSettings55.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getSettings();
        org.elasticsearch.common.settings.Settings settings59 = settings57.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue62 = settings57.getAsTime("index.blocks.metadata", timeValue61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData65.getCustoms();
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings67);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings67);
        boolean boolean70 = indexSettings69.hasCustomDataPath();
        boolean boolean71 = indexSettings69.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings69.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue73 = settings57.getAsTime("index.shared_filesystem", timeValue72);
        java.lang.String[] strArray76 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray78 = settings57.getAsArray("index.data_path", strArray76, (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings57.filter(strPredicate79);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction81 = null;
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder2.putProperties(strMap48, strPredicate79, strFunction81);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder2.put("", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder85.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder86.loadFromSource("index.version.minimum_compatible");
        java.lang.String str90 = builder86.remove("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder86.putNull("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder92.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settingsSetting45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(mergePolicy56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        boolean boolean9 = indexSettings6.hasCustomDataPath();
        long long10 = indexSettings6.getGcDeletesInMillis();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexSettings6.getIndexMetaData();
        org.elasticsearch.Version version12 = indexMetaData11.getCreationVersion();
        org.elasticsearch.index.Index index13 = indexMetaData11.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData11.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int17 = builder16.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj19 = new java.lang.Object();
        boolean boolean20 = settings18.equals(obj19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.settings(settings18);
        org.elasticsearch.common.settings.Settings settings23 = settings18.getByPrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings settings25 = settings23.getByPrefix("");
        org.elasticsearch.common.settings.Settings settings27 = settings23.getAsSettings("archived.");
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.shadow_replicas", "index.", "index.blocks.write", "index.uuid", "index.version.upgraded_string", "index.number_of_replicas", "index.blocks.metadata", "index.blocks.metadata", "index.shared_filesystem", "hi!", "index.creation_date_string", "_all", "index.creation_date_string", "index.version.upgraded_string", "index.", "index.blocks.metadata", "index.blocks.metadata" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder25.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings settings48 = builder25.build();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder25.put("index.version.upgraded_string", "archived.");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj29 = new java.lang.Object();
        boolean boolean30 = settings28.equals(obj29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData34 = indexMetaData32.mapping("index.shadow_replicas");
        org.elasticsearch.Version version35 = indexMetaData32.getUpgradedVersion();
        org.elasticsearch.Version version36 = settings28.getAsVersion("index.shadow_replicas", version35);
        org.elasticsearch.Version version37 = settings23.getAsVersion("index.uuid", version36);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.settings.Settings settings40 = settings23.getByPrefix("archived.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNull(mappingMetaData34);
        org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean4 = indexSettings3.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getNodeSettings();
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        boolean boolean9 = settings5.isEmpty();
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        boolean boolean9 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_shards", false);
        java.lang.String str8 = builder6.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.loadFromSource("_all");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings9);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings9.filter(strPredicate12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings17);
        int int22 = indexSettings21.getMaxResultWindow();
        boolean boolean24 = indexSettings21.matchesIndexName("index.priority");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = settings13.getAsBytesSize("index.blocks.metadata", byteSizeValue25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13);
        boolean boolean28 = indexSettings27.isTTLPurgeDisabled();
        boolean boolean29 = indexSettings27.isWarmerEnabled();
        boolean boolean30 = indexSettings27.isShadowReplicaIndex();
        java.lang.String str31 = indexSettings27.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexSettings27.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexMetaData32);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings6.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        boolean boolean12 = indexMetaData8.isSameUUID("index.auto_expand_replicas");
        org.elasticsearch.Version version13 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData8.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("primary_terms");
        long long4 = builder1.version();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Set<java.lang.String> strSet10 = settings6.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.putActiveAllocationIds((int) (short) 0, strSet10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.putCustom("", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("index.shared_filesystem", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData18.getState();
        byte byte25 = state24.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder17.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.creationDate((long) (short) 100);
        java.lang.String str29 = builder28.index();
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "index.uuid" + "'", str29, "index.uuid");
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData11.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        boolean boolean23 = indexSettings22.hasCustomDataPath();
        boolean boolean24 = indexSettings22.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings22.getNodeSettings();
        java.lang.String[] strArray27 = settings25.getAsArray("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings31);
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings32.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getSettings();
        org.elasticsearch.common.settings.Settings settings36 = settings34.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue38 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue39 = settings34.getAsTime("index.blocks.metadata", timeValue38);
        org.elasticsearch.common.unit.TimeValue timeValue40 = settings25.getAsTime("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", timeValue39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings25);
        int int42 = indexMetaData11.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData11.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mapping("index.shadow_replicas");
        boolean boolean8 = indexMetaData4.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        boolean boolean22 = indexMetaData17.equals((java.lang.Object) builder21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings28);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings33 = indexSettings31.getValue(settingsSetting32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings33.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings33);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj39 = new java.lang.Object();
        boolean boolean40 = settings38.equals(obj39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData42.mapping("index.shadow_replicas");
        org.elasticsearch.Version version45 = indexMetaData42.getUpgradedVersion();
        org.elasticsearch.Version version46 = settings38.getAsVersion("index.shadow_replicas", version45);
        org.elasticsearch.Version version47 = settings33.getAsVersion("index.uuid", version46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings33);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue52 = settings33.getAsRatio("index.priority", "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(version47);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings6.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder5.putProperties(strMap10, strPredicate11, strFunction12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.settings(builder5);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean21 = indexMetaData16.equals((java.lang.Object) builder20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings30.getValue(settingsSetting31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder15.putProperties(strMap34, strPredicate35, strFunction36);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder37.put("index.uuid", (float) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder14.settings(builder43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder44.putCustom("index.version.upgraded", custom46);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData63.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData63.excludeFilters();
        long long72 = indexMetaData63.getCreationDate();
        org.elasticsearch.Version version73 = indexMetaData63.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData63.mapping("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(version73);
        org.junit.Assert.assertNull(mappingMetaData75);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.Setting.Property property27 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting29, settingsConsumer30);
        boolean boolean33 = indexScopedSettings28.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer36 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer36);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer38 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(settingsSetting35, settingsConsumer38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.apache.lucene.index.MergePolicy mergePolicy49 = indexSettings48.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getSettings();
        org.elasticsearch.common.settings.Settings settings52 = settings50.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue54 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue55 = settings50.getAsTime("index.blocks.metadata", timeValue54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        boolean boolean63 = indexSettings62.hasCustomDataPath();
        boolean boolean64 = indexSettings62.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings62.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue66 = settings50.getAsTime("index.shared_filesystem", timeValue65);
        java.lang.String[] strArray69 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray71 = settings50.getAsArray("index.data_path", strArray69, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings50);
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings50);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.common.settings.Settings settings76 = settings73.getByPrefix("index.");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(settings73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + property27 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property27.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(mergePolicy49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings76);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.version.created", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.removeAlias("false");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.created");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.created]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        boolean boolean12 = indexMetaData7.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version13 = indexMetaData7.getCreationVersion();
        org.elasticsearch.Version version14 = settings3.getAsVersion("index.version.minimum_compatible", version13);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue18 = settings15.getAsRatio("index.auto_expand_replicas", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.shadow_replicas]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        long long23 = indexMetaData21.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean26 = indexMetaData21.isSameUUID("index.shadow_replicas");
        long long27 = indexMetaData21.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap28 = indexMetaData21.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        boolean boolean34 = indexMetaData29.equals((java.lang.Object) builder33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings40);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings40);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings45 = indexSettings43.getValue(settingsSetting44);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings49);
        org.apache.lucene.index.MergePolicy mergePolicy51 = indexSettings50.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings52 = indexSettings50.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings52.getAsGroups(false);
        java.lang.String[] strArray57 = settings52.getAsArray("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings52);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData21);
        long long60 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData63 = builder61.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder61.version((long) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settingsSetting44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(mergePolicy51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        boolean boolean9 = indexMetaData0.isSameUUID("_na_");
        int int10 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        boolean boolean18 = indexMetaData11.isSameUUID("index.version.upgraded_string");
        boolean boolean20 = indexMetaData11.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData11.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        boolean boolean29 = indexMetaData24.equals((java.lang.Object) builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings40 = indexSettings38.getValue(settingsSetting39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData42.getCustoms();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings44);
        org.apache.lucene.index.MergePolicy mergePolicy46 = indexSettings45.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings53.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = settings53.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate58 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder52.putProperties(strMap57, strPredicate58, strFunction59);
        org.elasticsearch.common.settings.Settings settings61 = settings47.filter(strPredicate58);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings47);
        org.elasticsearch.Version version63 = indexSettings62.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(mergePolicy46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(version63);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        int int11 = indexSettings6.getNumberOfShards();
        boolean boolean12 = indexSettings6.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getRefreshInterval();
        boolean boolean14 = indexSettings6.isDefaultAllowUnmappedFields();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig15 = indexSettings6.getMergeSchedulerConfig();
        boolean boolean16 = indexSettings6.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getGroups("index.number_of_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        boolean boolean49 = indexMetaData44.equals((java.lang.Object) builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings55);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings60 = indexSettings58.getValue(settingsSetting59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings60.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings37.diff(settings38, settings60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings65.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        boolean boolean76 = indexMetaData71.equals((java.lang.Object) builder75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData79, settings82);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings82);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting86 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings87 = indexSettings85.getValue(settingsSetting86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = settings87.getAsMap();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings64.diff(settings65, settings87);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings37.dryRun(settings65);
        org.elasticsearch.index.IndexSettings indexSettings92 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30, strPredicate36, indexScopedSettings37);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher93 = null; // flaky: indexSettings92.getParseFieldMatcher();
        java.lang.String str94 = null; // flaky: indexSettings92.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settingsSetting86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "_all" + "'", str94, "_all");
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.auto_expand_replicas", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        long long15 = indexMetaData13.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        boolean boolean18 = indexMetaData13.isSameUUID("index.shadow_replicas");
        long long19 = indexMetaData13.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        long long21 = indexMetaData13.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData13.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder12.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder6.state(state22);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        java.lang.Object obj69 = null;
        boolean boolean70 = indexMetaData63.equals(obj69);
        long long71 = indexMetaData63.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData63.getState();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isQueryStringLenient();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings6.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings6.getTranslogSyncInterval();
        java.lang.String str13 = indexSettings6.customDataPath();
        java.lang.String str14 = indexSettings6.getUUID();
        int int15 = indexSettings6.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom41 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.putCustom("index.", custom41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj52 = new java.lang.Object();
        boolean boolean53 = settings51.equals(obj52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData57 = indexMetaData55.mapping("index.shadow_replicas");
        org.elasticsearch.Version version58 = indexMetaData55.getUpgradedVersion();
        org.elasticsearch.Version version59 = settings51.getAsVersion("index.shadow_replicas", version58);
        java.lang.Class<?> wildcardClass60 = settings51.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder49.put("active_allocations", (java.lang.Class) wildcardClass60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder39.settings(builder49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder62.removeAllAliases();
        long long64 = builder62.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNull(mappingMetaData57);
        org.junit.Assert.assertNotNull(version58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 35L + "'", long64 == 35L);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher8 = indexSettings6.getParseFieldMatcher();
        java.lang.String str9 = indexSettings6.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings6.getTranslogDurability();
        boolean boolean11 = indexSettings6.hasCustomDataPath();
        boolean boolean12 = indexSettings6.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.creation_date");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings16.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings19);
        org.elasticsearch.Version version21 = indexMetaData2.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData2.includeFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings26);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher32 = indexSettings30.getParseFieldMatcher();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher33 = indexSettings30.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexMetaData2.fromXContent(xContentParser23, parseFieldMatcher33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher32);
        org.junit.Assert.assertNotNull(parseFieldMatcher33);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        boolean boolean19 = indexSettings17.hasCustomDataPath();
        boolean boolean20 = indexSettings17.isTTLPurgeDisabled();
        int int21 = indexSettings17.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexSettings17.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = indexSettings17.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings24 = indexMetaData23.getSettings();
        boolean boolean25 = settings24.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        java.lang.String str9 = indexSettings6.getNodeName();
        boolean boolean10 = indexSettings6.isOnSharedFilesystem();
        boolean boolean11 = indexSettings6.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings6.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getTranslogSyncInterval();
        long long14 = indexSettings6.getGcDeletesInMillis();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig15 = indexSettings6.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 60000L + "'", long14 == 60000L);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig15);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        boolean boolean13 = indexMetaData8.equals((java.lang.Object) builder12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData14.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings19);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting23 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings24 = indexSettings22.getValue(settingsSetting23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings24);
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData8.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap27 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.index.Index index31 = indexMetaData8.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings32 = indexMetaData8.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData0.diff(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settingsSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNull(index31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData2.getSettings();
        java.lang.String[] strArray5 = settings3.getAsArray("index.number_of_shards");
        java.lang.String str7 = settings3.get("index.auto_expand_replicas");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings3.getAsGroups(true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings3.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings8.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings7.diff(settings8, settings30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings35.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        boolean boolean46 = indexMetaData41.equals((java.lang.Object) builder45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings52);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getValue(settingsSetting56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = settings57.getAsMap();
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings34.diff(settings35, settings57);
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings7.dryRun(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int64 = builder63.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj66 = new java.lang.Object();
        boolean boolean67 = settings65.equals(obj66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder63.settings(settings65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings71.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings71);
        boolean boolean76 = indexSettings75.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings75.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings7.diff(settings65, settings78);
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79, strPredicate80, indexScopedSettings81);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap84 = indexMetaData83.getCustoms();
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData83, settings85);
        java.lang.String str88 = settings85.get("hi!");
        java.lang.String str91 = settings85.get("index.version.created", "");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings85);
        java.lang.String str93 = indexSettings92.customDataPath();
        boolean boolean94 = indexSettings92.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer66, settingsConsumer67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings72);
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings74.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = indexSettings74.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings74.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexSettings74.getSettings();
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings79);
        org.elasticsearch.common.settings.Setting.Property property81 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertTrue("'" + property81 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property81.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj1 = new java.lang.Object();
        boolean boolean2 = settings0.equals(obj1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getGroups("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.apache.lucene.index.MergePolicy mergePolicy10 = indexSettings9.getMergePolicy();
        boolean boolean11 = indexSettings9.isQueryStringAllowLeadingWildcard();
        java.lang.String str12 = indexSettings9.getDefaultField();
        int int13 = indexSettings9.getMaxRescoreWindow();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings9.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue15 = settings0.getAsTime("hi!", timeValue14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.index.Index index22 = indexMetaData17.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap23 = indexMetaData17.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.Version version25 = indexMetaData17.getUpgradedVersion();
        org.elasticsearch.Version version26 = settings0.getAsVersion("index.uuid", version25);
        org.elasticsearch.common.unit.SizeValue sizeValue28 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue29 = settings0.getAsSize("index.number_of_shards", sizeValue28);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(mergePolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(index22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNull(sizeValue29);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet6 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = indexSettings5.hasCustomDataPath();
        boolean boolean7 = indexSettings5.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings5.getGlobalCheckpointInterval();
        boolean boolean9 = indexSettings5.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting12 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer13 = null;
        indexScopedSettings11.addSettingsUpdateConsumer(settingsSetting12, settingsConsumer13);
        boolean boolean16 = indexScopedSettings11.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer19 = null;
        indexScopedSettings17.addSettingsUpdateConsumer(settingsSetting18, settingsConsumer19);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer21 = null;
        indexScopedSettings11.addSettingsUpdateConsumer(settingsSetting18, settingsConsumer21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        long long25 = indexMetaData23.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        boolean boolean32 = indexMetaData27.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap33 = indexMetaData27.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData23.diff(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings36.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings36.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData42.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        boolean boolean47 = indexMetaData42.equals((java.lang.Object) builder46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData48.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings53);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings53);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings53);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting57 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings58 = indexSettings56.getValue(settingsSetting57);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings58);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = settings58.getAsMap();
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings35.diff(settings36, settings58);
        java.util.function.Predicate<java.lang.String> strPredicate62 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer65 = null;
        indexScopedSettings63.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer65);
        org.elasticsearch.index.IndexSettings indexSettings67 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings58, strPredicate62, indexScopedSettings63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData68.mapping("index.shadow_replicas");
        boolean boolean72 = indexMetaData68.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str73 = indexMetaData68.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData74.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff77 = indexMetaData68.diff(indexMetaData74);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = indexScopedSettings11.copy(settings58, indexMetaData74);
        org.elasticsearch.index.Index index79 = indexMetaData74.getMergeSourceIndex();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff80 = indexMetaData10.diff(indexMetaData74);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap81 = indexMetaData74.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settingsSetting12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap33);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settingsSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "_na_" + "'", str73, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(indexMetaDataDiff77);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNull(index79);
        org.junit.Assert.assertNotNull(indexMetaDataDiff80);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap81);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.shared_filesystem.recover_on_any_node", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder7.put("", 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_shards", false);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.putNull("index.shared_filesystem.recover_on_any_node");
        java.lang.String str12 = builder10.get("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData2.getCustoms();
        long long4 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        long long8 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean11 = indexMetaData6.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData2.diff(indexMetaData6);
        boolean boolean14 = indexMetaData0.equals((java.lang.Object) indexMetaData6);
        org.elasticsearch.Version version15 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version16 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = builder18.build();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings20.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings20.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        boolean boolean34 = indexSettings33.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting35 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings36 = indexSettings33.getValue(settingsSetting35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings36);
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("index.priority");
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings36);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings36);
        org.elasticsearch.common.settings.Settings settings43 = settings36.getByPrefix("index.blocks.write");
        boolean boolean44 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings43);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(settingsSetting35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        java.lang.String str9 = indexSettings6.getNodeName();
        java.lang.String str10 = indexSettings6.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj1 = new java.lang.Object();
        boolean boolean2 = settings0.equals(obj1);
        org.elasticsearch.common.settings.Settings settings4 = settings0.getAsSettings("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings4.getGroups("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        boolean boolean9 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) (byte) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean4 = indexSettings3.isIndexUsingShadowReplicas();
        int int5 = indexSettings3.getNumberOfShards();
        boolean boolean6 = indexSettings3.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings3.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeValue7);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        boolean boolean9 = indexMetaData0.isSameUUID("_na_");
        int int10 = indexMetaData0.getNumberOfShards();
        int int11 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        boolean boolean17 = indexMetaData13.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mapping("index.shadow_replicas");
        boolean boolean22 = indexMetaData18.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        boolean boolean23 = indexMetaData13.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings26);
        org.elasticsearch.Version version31 = indexSettings30.getIndexVersionCreated();
        java.lang.String str32 = indexSettings30.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings30.getRefreshInterval();
        boolean boolean34 = indexSettings30.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings35 = indexSettings30.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings35);
        java.util.Set<java.lang.String> strSet37 = settings35.names();
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings35);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = indexSettings38.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(byteSizeValue39);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings3.getRefreshInterval();
        java.lang.String str8 = indexSettings3.getNodeName();
        boolean boolean10 = indexSettings3.matchesIndexName("index.shadow_replicas");
        java.lang.String str11 = indexSettings3.getDefaultField();
        boolean boolean12 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_all" + "'", str11, "_all");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings6.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.apache.lucene.index.MergePolicy mergePolicy14 = indexSettings13.getMergePolicy();
        boolean boolean15 = indexSettings13.isQueryStringAllowLeadingWildcard();
        java.lang.String str16 = indexSettings13.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings13.getRefreshInterval();
        java.lang.String str18 = indexSettings13.getNodeName();
        java.lang.String str19 = indexSettings13.getUUID();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = indexSettings13.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = settings8.getAsBytesSize("active_allocations", byteSizeValue20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(mergePolicy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValue20);
        org.junit.Assert.assertNotNull(byteSizeValue21);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = indexSettings5.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings5.getGlobalCheckpointInterval();
        java.lang.String str8 = indexSettings5.customDataPath();
        boolean boolean9 = indexSettings5.isShadowReplicaIndex();
        org.elasticsearch.Version version10 = indexSettings5.getIndexVersionCreated();
        boolean boolean11 = indexSettings5.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        int int9 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.index.Index index14 = indexMetaData11.getMergeSourceIndex();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings18);
        int int24 = indexSettings23.getNumberOfShards();
        boolean boolean25 = indexSettings23.isQueryStringAllowLeadingWildcard();
        boolean boolean26 = indexSettings23.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (byte) 10);
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.settings(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder7.numberOfShards((int) (short) 1);
        boolean boolean21 = indexMetaData0.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        java.lang.String str28 = settings25.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings25);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        java.lang.String str17 = settings14.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings14);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.apache.lucene.index.MergePolicy mergePolicy20 = indexSettings18.getMergePolicy();
        org.elasticsearch.Version version21 = indexSettings18.getIndexVersionCreated();
        int int22 = indexSettings18.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mergePolicy20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        boolean boolean34 = indexMetaData29.equals((java.lang.Object) builder33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings40);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings40);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings45 = indexSettings43.getValue(settingsSetting44);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings45);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings45.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction49 = null;
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder28.putProperties(strMap47, strPredicate48, strFunction49);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder28.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder28.put("", (long) '4');
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder28.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder28.put("_all", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder61.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData68.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        boolean boolean73 = indexMetaData68.equals((java.lang.Object) builder72);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap75 = indexMetaData74.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings79);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData76, settings79);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings79);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting83 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings84 = indexSettings82.getValue(settingsSetting83);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings84);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap87 = indexMetaData86.getCustoms();
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData86, settings88);
        org.apache.lucene.index.MergePolicy mergePolicy90 = indexSettings89.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings91 = indexSettings89.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings91);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap94 = settings91.getAsGroups(false);
        java.lang.String[] strArray96 = settings91.getAsArray("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder61.putArray("index.version.upgradedindex.shadow_replicas=-1a", strArray96);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder0.putArray("10", strArray96);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settingsSetting44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(strImmutableOpenMap75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settingsSetting83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertNotNull(strImmutableOpenMap87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(mergePolicy90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.creationDate((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder9.creationDate(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = builder43.mapping("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder43.numberOfReplicas(1);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder43.putAlias(builder48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        long long8 = indexMetaData0.getCreationDate();
        boolean boolean10 = indexMetaData0.isSameUUID("index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray20 = settings11.getAsArray("index.shared_filesystem", strArray19);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder7.putArray("index.creation_date", strArray19);
        org.elasticsearch.common.settings.Settings settings22 = builder7.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean10 = indexSettings9.isQueryStringAnalyzeWildcard();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings9.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings9.getTranslogSyncInterval();
        java.lang.String str13 = indexSettings9.customDataPath();
        int int14 = indexSettings9.getMaxRescoreWindow();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings9.getGlobalCheckpointInterval();
        int int16 = indexSettings9.getNumberOfShards();
        boolean boolean17 = indexSettings9.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings10 = indexSettings8.getValue(settingsSetting9);
        boolean boolean11 = indexSettings8.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version12 = indexSettings8.getIndexVersionCreated();
        java.lang.String str13 = indexSettings8.getDefaultField();
        boolean boolean14 = indexSettings8.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_all" + "'", str13, "_all");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.Version version71 = indexMetaData63.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap72 = indexMetaData63.getMappings();
        int int73 = indexMetaData63.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(version71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean8 = indexSettings3.isQueryStringLenient();
        boolean boolean9 = indexSettings3.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings3.getSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = indexSettings3.getParseFieldMatcher();
        int int12 = indexSettings3.getMaxRescoreWindow();
        boolean boolean13 = indexSettings3.isOnSharedFilesystem();
        org.elasticsearch.Version version14 = indexSettings3.getIndexVersionCreated();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig15 = indexSettings3.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(parseFieldMatcher11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig15);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping("index.version.upgraded_string", "10");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        java.lang.String str17 = settings14.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings14);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = indexSettings18.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings18.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        boolean boolean31 = indexSettings30.isQueryStringAnalyzeWildcard();
        boolean boolean32 = indexSettings30.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38);
        org.elasticsearch.common.settings.Settings settings42 = indexSettings41.getSettings();
        java.lang.String str43 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getGlobalCheckpointInterval();
        boolean boolean45 = indexSettings41.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting47 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer48 = null;
        indexScopedSettings46.addSettingsUpdateConsumer(settingsSetting47, settingsConsumer48);
        boolean boolean51 = indexScopedSettings46.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer56 = null;
        indexScopedSettings46.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer56);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting58 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings46.get(settingsSetting58);
        org.elasticsearch.common.settings.Settings settings60 = indexSettings41.getValue(settingsSetting58);
        org.elasticsearch.common.settings.Settings settings61 = indexSettings30.getValue(settingsSetting58);
        org.elasticsearch.common.settings.Settings settings62 = indexSettings18.getValue(settingsSetting58);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteSizeValue20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settingsSetting47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(settingsSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = settings8.equals(obj9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.Version version15 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.Version version16 = settings8.getAsVersion("index.shadow_replicas", version15);
        java.lang.Class<?> wildcardClass17 = settings8.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("active_allocations", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int22 = builder21.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = settings23.equals(obj24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder21.settings(settings23);
        org.elasticsearch.common.settings.Settings settings28 = settings23.getByPrefix("index.version.minimum_compatible");
        java.lang.String[] strArray30 = settings23.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder18.putArray("index.auto_expand_replicas", strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction54 = null;
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder33.putProperties(strMap52, strPredicate53, strFunction54);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder33.put("primary_terms", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.shadow_replicas", "index.", "index.blocks.write", "index.uuid", "index.version.upgraded_string", "index.number_of_replicas", "index.blocks.metadata", "index.blocks.metadata", "index.shared_filesystem", "hi!", "index.creation_date_string", "_all", "index.creation_date_string", "index.version.upgraded_string", "index.", "index.blocks.metadata", "index.blocks.metadata" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder58.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder18.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put("index.blocks.read_only", (float) '#');
        org.elasticsearch.common.settings.Settings settings85 = builder84.build();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.loadFromSource("_na_");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = settings34.equals(obj35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("index.shadow_replicas");
        org.elasticsearch.Version version41 = indexMetaData38.getUpgradedVersion();
        org.elasticsearch.Version version42 = settings34.getAsVersion("index.shadow_replicas", version41);
        org.elasticsearch.Version version43 = settings29.getAsVersion("index.uuid", version42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        int int45 = indexSettings44.getMaxRescoreWindow();
        boolean boolean46 = indexSettings44.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = indexSettings44.getFlushThresholdSize();
        boolean boolean48 = indexSettings44.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteSizeValue47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        long long8 = indexMetaData0.getVersion();
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.apache.lucene.index.MergePolicy mergePolicy14 = indexSettings13.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings13.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = settings15.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue19 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue20 = settings15.getAsTime("index.blocks.metadata", timeValue19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        boolean boolean28 = indexSettings27.hasCustomDataPath();
        boolean boolean29 = indexSettings27.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue31 = settings15.getAsTime("index.shared_filesystem", timeValue30);
        java.lang.String[] strArray34 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray36 = settings15.getAsArray("index.data_path", strArray34, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings15);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mapping("index.shadow_replicas");
        boolean boolean43 = indexMetaData39.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = indexMetaData52.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        boolean boolean57 = indexMetaData52.equals((java.lang.Object) builder56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap62 = indexMetaData61.getCustoms();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings63);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings63);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings63);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting67 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings68 = indexSettings66.getValue(settingsSetting67);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = settings68.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings71 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings68);
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj74 = new java.lang.Object();
        boolean boolean75 = settings73.equals(obj74);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData77.mapping("index.shadow_replicas");
        org.elasticsearch.Version version80 = indexMetaData77.getUpgradedVersion();
        org.elasticsearch.Version version81 = settings73.getAsVersion("index.shadow_replicas", version80);
        org.elasticsearch.Version version82 = settings68.getAsVersion("index.uuid", version81);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings68);
        boolean boolean84 = settings38.equals((java.lang.Object) indexMetaData39);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings38);
        org.elasticsearch.common.settings.Settings settings86 = indexSettings85.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings87 = indexSettings85.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(mergePolicy14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNull(mappingMetaData54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settingsSetting67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNull(mappingMetaData79);
        org.junit.Assert.assertNotNull(version80);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNotNull(version82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings15.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings15.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings15.getValue(settingsSetting18);
        org.elasticsearch.common.settings.Settings settings20 = indexSettings15.getNodeSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean10 = indexSettings9.isTTLPurgeDisabled();
        boolean boolean11 = indexSettings9.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings9.getSettings();
        org.elasticsearch.common.unit.SizeValue sizeValue14 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue15 = settings12.getAsSize("index.auto_expand_replicas", sizeValue14);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNull(sizeValue15);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexSettings6.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings15.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getSettings();
        org.elasticsearch.common.settings.Settings settings19 = settings17.getAsSettings("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        int int21 = indexMetaData11.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData11.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings28);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray44 = settings35.getAsArray("index.shared_filesystem", strArray43);
        java.lang.String[] strArray46 = settings28.getAsArray("index.version.created_string", strArray43, (java.lang.Boolean) false);
        boolean boolean47 = indexMetaData11.equals((java.lang.Object) settings28);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(true);
        boolean boolean22 = settings19.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index25 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.version((long) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(index25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder4.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("", 0.0d);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) builder14);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData0.getActiveAllocationIds();
        long long18 = indexMetaData0.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        java.lang.String str7 = indexSettings5.getNodeName();
        boolean boolean8 = indexSettings5.isQueryStringAllowLeadingWildcard();
        int int9 = indexSettings5.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.data_path");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = builder25.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [_na_]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = settings8.equals(obj9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.Version version15 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.Version version16 = settings8.getAsVersion("index.shadow_replicas", version15);
        java.lang.Class<?> wildcardClass17 = settings8.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("active_allocations", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.apache.lucene.index.MergePolicy mergePolicy24 = indexSettings23.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getSettings();
        org.elasticsearch.common.settings.Settings settings27 = settings25.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue29 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings25.getAsTime("index.blocks.metadata", timeValue29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        boolean boolean38 = indexSettings37.hasCustomDataPath();
        boolean boolean39 = indexSettings37.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue40 = indexSettings37.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue41 = settings25.getAsTime("index.shared_filesystem", timeValue40);
        java.lang.Class<?> wildcardClass42 = timeValue40.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder18.put("index.", (java.lang.Class) wildcardClass42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder18.put("index.shared_filesystem.recover_on_any_node", 1L);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder54.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj62 = new java.lang.Object();
        boolean boolean63 = settings61.equals(obj62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = indexMetaData65.mapping("index.shadow_replicas");
        org.elasticsearch.Version version68 = indexMetaData65.getUpgradedVersion();
        org.elasticsearch.Version version69 = settings61.getAsVersion("index.shadow_replicas", version68);
        java.lang.Class<?> wildcardClass70 = settings61.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder58.put("index.number_of_replicas", (java.lang.Class) wildcardClass70);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder54.put("hi!", (java.lang.Class) wildcardClass70);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder18.put("archived.", (java.lang.Class) wildcardClass70);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(mergePolicy24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertNotNull(version68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings72);
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings74.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = indexSettings74.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings74.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexSettings74.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        int int81 = indexMetaData63.getTotalNumberOfShards();
        org.elasticsearch.Version version82 = indexMetaData63.getCreationVersion();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(version82);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte4 = state3.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.state(state3);
        long long6 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.creationDate((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 1 + "'", byte4 == (byte) 1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("_all", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings30.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putProperties(strMap34, strPredicate35, strFunction36);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder25.put(strMap34);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", (long) '4');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder38.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.normalizePrefix("index.blocks.write");
        java.lang.String str47 = builder45.get("0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean24 = indexMetaData19.equals((java.lang.Object) builder23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings30);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getValue(settingsSetting34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.diff(settings13, settings35);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer42 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(settingsSetting41, settingsConsumer42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings35, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting46 = indexScopedSettings40.get("index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNotNull(wildcardSetting46);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        java.lang.String str19 = indexSettings17.getNodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer22 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting21, settingsConsumer22);
        boolean boolean25 = indexScopedSettings20.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer28 = null;
        indexScopedSettings26.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer28);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer30 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(settingsSetting27, settingsConsumer30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        long long34 = indexMetaData32.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        long long38 = indexMetaData36.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        boolean boolean41 = indexMetaData36.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap42 = indexMetaData36.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData32.diff(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData51.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        boolean boolean56 = indexMetaData51.equals((java.lang.Object) builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData60.getCustoms();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings62);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings62);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings67 = indexSettings65.getValue(settingsSetting66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = settings67.getAsMap();
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings44.diff(settings45, settings67);
        java.util.function.Predicate<java.lang.String> strPredicate71 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting73 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer74 = null;
        indexScopedSettings72.addSettingsUpdateConsumer(settingsSetting73, settingsConsumer74);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData36, settings67, strPredicate71, indexScopedSettings72);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData77.mapping("index.shadow_replicas");
        boolean boolean81 = indexMetaData77.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str82 = indexMetaData77.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData85 = indexMetaData83.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff86 = indexMetaData77.diff(indexMetaData83);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = indexScopedSettings20.copy(settings67, indexMetaData83);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting88 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer89 = null;
        indexScopedSettings87.addSettingsUpdateConsumer(settingsSetting88, settingsConsumer89);
        org.elasticsearch.common.settings.Settings settings91 = indexSettings17.getValue(settingsSetting88);
        int int92 = indexSettings17.getMaxResultWindow();
        boolean boolean93 = indexSettings17.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settingsSetting66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settingsSetting73);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNull(mappingMetaData79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "_na_" + "'", str82, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNull(mappingMetaData85);
        org.junit.Assert.assertNotNull(indexMetaDataDiff86);
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertNotNull(settingsSetting88);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10000 + "'", int92 == 10000);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isQueryStringLenient();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings6.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings6.getTranslogSyncInterval();
        java.lang.String str13 = indexSettings6.customDataPath();
        java.lang.String str14 = indexSettings6.getUUID();
        boolean boolean15 = indexSettings6.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings19);
        org.apache.lucene.index.MergePolicy mergePolicy21 = indexSettings20.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings20.getSettings();
        org.elasticsearch.common.settings.Settings settings24 = settings22.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue26 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue27 = settings22.getAsTime("index.blocks.metadata", timeValue26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings32);
        boolean boolean35 = indexSettings34.hasCustomDataPath();
        boolean boolean36 = indexSettings34.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings34.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue38 = settings22.getAsTime("index.shared_filesystem", timeValue37);
        java.lang.String[] strArray41 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray43 = settings22.getAsArray("index.data_path", strArray41, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings22);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings45);
        org.elasticsearch.common.settings.Settings settings48 = settings46.getAsSettings("0");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(mergePolicy21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (byte) 10);
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.settings(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder7.numberOfShards((int) (short) 1);
        boolean boolean21 = indexMetaData0.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        java.lang.String str28 = settings25.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        org.elasticsearch.common.settings.Settings settings27 = indexSettings26.getSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = settings27.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        boolean boolean17 = indexMetaData12.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings23);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings28 = indexSettings26.getValue(settingsSetting27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings28);
        org.elasticsearch.Version version30 = indexSettings29.getIndexVersionCreated();
        boolean boolean31 = indexSettings29.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings32 = indexSettings29.getNodeSettings();
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings29.getMergePolicy();
        boolean boolean34 = indexMetaData0.equals((java.lang.Object) indexSettings29);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings29.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability36 = indexSettings29.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings37 = indexSettings29.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + durability36 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability36.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings37);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(true);
        boolean boolean22 = settings19.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        boolean boolean24 = indexSettings23.isQueryStringAllowLeadingWildcard();
        int int25 = indexSettings23.getMaxResultWindow();
        boolean boolean26 = indexSettings23.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version12 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer66 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting64, settingsConsumer66, settingsConsumer67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings72);
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings74.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = indexSettings74.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings74.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexSettings74.getSettings();
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings79);
        java.lang.String str83 = settings79.get("index.auto_expand_replicas", "index.version.upgradedindex.shadow_replicas=-1a");
        java.lang.String[] strArray85 = null;
        java.lang.String[] strArray86 = settings79.getAsArray("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", strArray85);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "index.version.upgradedindex.shadow_replicas=-1a" + "'", str83, "index.version.upgradedindex.shadow_replicas=-1a");
        org.junit.Assert.assertNull(strArray86);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.apache.lucene.index.MergePolicy mergePolicy22 = indexSettings21.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        boolean boolean25 = indexSettings24.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings24.getMergeSchedulerConfig();
        boolean boolean28 = indexSettings24.matchesIndexName("index.priority");
        boolean boolean29 = indexSettings24.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(mergePolicy22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData63.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        boolean boolean73 = indexMetaData63.equals((java.lang.Object) builder72);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("index.shadow_replicas");
        boolean boolean12 = indexMetaData8.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData8.activeAllocationIds(100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("index.shadow_replicas");
        boolean boolean20 = indexMetaData16.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData16.mappingOrDefault("index.auto_expand_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData8.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(indexMetaDataDiff25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj25 = new java.lang.Object();
        boolean boolean26 = settings24.equals(obj25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mapping("index.shadow_replicas");
        org.elasticsearch.Version version31 = indexMetaData28.getUpgradedVersion();
        org.elasticsearch.Version version32 = settings24.getAsVersion("index.shadow_replicas", version31);
        java.lang.Class<?> wildcardClass33 = settings24.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.put("index.blocks.read", (java.lang.Class) wildcardClass33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder0.loadFromSource("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder0.putNull("");
        java.nio.file.Path path39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder38.loadFromPath(path39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings19.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        java.lang.Boolean boolean28 = settings19.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings31 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData34 = indexMetaData0.mapping("_na_");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        long long38 = indexMetaData36.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        boolean boolean41 = indexMetaData36.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version42 = indexMetaData36.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData36.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff46 = indexMetaData0.diff(indexMetaData36);
        java.util.Set<java.lang.String> strSet48 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNull(mappingMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(indexMetaDataDiff46);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = settings34.equals(obj35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("index.shadow_replicas");
        org.elasticsearch.Version version41 = indexMetaData38.getUpgradedVersion();
        org.elasticsearch.Version version42 = settings34.getAsVersion("index.shadow_replicas", version41);
        org.elasticsearch.Version version43 = settings29.getAsVersion("index.uuid", version42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        java.util.Set<java.lang.String> strSet45 = settings29.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = builder6.build();
        java.lang.String str8 = builder6.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        boolean boolean19 = indexMetaData14.equals((java.lang.Object) builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting29 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings28.getValue(settingsSetting29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings30.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings30);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj36 = new java.lang.Object();
        boolean boolean37 = settings35.equals(obj36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mapping("index.shadow_replicas");
        org.elasticsearch.Version version42 = indexMetaData39.getUpgradedVersion();
        org.elasticsearch.Version version43 = settings35.getAsVersion("index.shadow_replicas", version42);
        org.elasticsearch.Version version44 = settings30.getAsVersion("index.uuid", version43);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30);
        org.apache.lucene.util.Version version46 = indexMetaData0.getMinimumCompatibleVersion();
        int int47 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData48.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        boolean boolean53 = indexMetaData48.equals((java.lang.Object) builder52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings59);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting63 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings64 = indexSettings62.getValue(settingsSetting63);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap67 = indexMetaData66.getCustoms();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings68);
        org.apache.lucene.index.MergePolicy mergePolicy70 = indexSettings69.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings71 = indexSettings69.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings71.getAsGroups(false);
        java.lang.String[] strArray76 = settings71.getAsArray("primary_terms");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings71.getAsGroups();
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings71);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings71, streamOutput79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settingsSetting29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNull(version46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settingsSetting63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(mergePolicy70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        int int16 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version19 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        boolean boolean28 = indexSettings27.hasCustomDataPath();
        boolean boolean29 = indexSettings27.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings27.getNodeSettings();
        java.lang.String[] strArray32 = settings30.getAsArray("");
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int37 = builder36.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj39 = new java.lang.Object();
        boolean boolean40 = settings38.equals(obj39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder36.settings(settings38);
        java.lang.Boolean boolean44 = settings38.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue47 = settings38.getAsBytesSize("index.version.upgraded_string", byteSizeValue46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings51.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings51);
        org.elasticsearch.Version version56 = indexSettings55.getIndexVersionCreated();
        java.lang.String str57 = indexSettings55.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings55.getRefreshInterval();
        boolean boolean59 = indexSettings55.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings55.getNodeSettings();
        java.lang.String[] strArray62 = settings60.getAsArray("index.priority");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings60.toXContent(xContentBuilder63, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings38.toXContent(xContentBuilder48, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings30.toXContent(xContentBuilder34, params64);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = indexMetaData0.toXContent(xContentBuilder21, params64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + boolean44 + "' != '" + false + "'", boolean44, false);
        org.junit.Assert.assertNull(byteSizeValue47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(version56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version23 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings26);
        org.elasticsearch.Version version31 = indexSettings30.getIndexVersionCreated();
        java.lang.String str32 = indexSettings30.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings30.getRefreshInterval();
        boolean boolean34 = indexSettings30.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings30.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.apache.lucene.index.MergePolicy mergePolicy40 = indexSettings39.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings41 = indexSettings39.getSettings();
        org.elasticsearch.common.settings.Settings settings43 = settings41.getAsSettings("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings41);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings41);
        java.lang.String str46 = indexSettings45.getUUID();
        boolean boolean47 = indexSettings45.isQueryStringAllowLeadingWildcard();
        boolean boolean48 = indexSettings45.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(mergePolicy40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "_na_" + "'", str46, "_na_");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getAsGroups(true);
        boolean boolean19 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings16.getGroups("index.version.created_string", true);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings16);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean39 = indexMetaData34.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap40 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData30.diff(indexMetaData34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings43.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData49.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        boolean boolean54 = indexMetaData49.equals((java.lang.Object) builder53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = settings65.getAsMap();
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings42.diff(settings43, settings65);
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.index.IndexSettings indexSettings74 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData34, settings65, strPredicate69, indexScopedSettings70);
        java.lang.String[] strArray76 = settings65.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder2.putArray("_na_", strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder77.normalizePrefix("");
        org.elasticsearch.common.settings.Settings settings80 = builder77.build();
        java.lang.Class<?> wildcardClass81 = builder77.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap40);
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNull(mappingMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap3 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(version6);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.get("index.data_path");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings7);
        int int12 = indexSettings11.getMaxResultWindow();
        boolean boolean14 = indexSettings11.matchesIndexName("index.priority");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = indexSettings11.getFlushThresholdSize();
        java.lang.String str16 = indexSettings11.getDefaultField();
        boolean boolean17 = settings4.equals((java.lang.Object) indexSettings11);
        java.lang.String str18 = indexSettings11.customDataPath();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteSizeValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("_all", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings30.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putProperties(strMap34, strPredicate35, strFunction36);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder25.put(strMap34);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", (long) '4');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder38.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.normalizePrefix("index.blocks.write");
        java.lang.String str47 = builder45.get("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("_na_");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings6.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder5.putProperties(strMap10, strPredicate11, strFunction12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.settings(builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        java.lang.String str30 = builder28.remove("archived.");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.put(objDictionary31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.uuid", custom3);
        int int5 = builder4.numberOfShards();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        java.util.Set<java.lang.String> strSet71 = null; // flaky: indexMetaData63.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.settings.Settings settings72 = indexMetaData63.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        int int74 = indexMetaData63.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder75 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder75.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder75.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings82 = builder75.build();
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings82);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(settings82);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings4.diff(settings5, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder3.settings(settings27);
        org.elasticsearch.common.settings.Settings settings33 = settings27.getAsSettings("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData38 = indexMetaData36.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        boolean boolean41 = indexMetaData36.equals((java.lang.Object) builder40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData42.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings47);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings47);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting51 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings52 = indexSettings50.getValue(settingsSetting51);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = settings52.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction56 = null;
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder35.putProperties(strMap54, strPredicate55, strFunction56);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder35.put("_all", "state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap63 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings64.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings64);
        org.elasticsearch.Version version69 = indexSettings68.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder60.put("index.shadow_replicas", version69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder34.settings(builder70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder34.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder34.numberOfReplicas((int) ' ');
        java.lang.String str75 = builder74.index();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder74.putAlias(builder76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNull(mappingMetaData38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settingsSetting51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings15.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        boolean boolean26 = indexMetaData21.equals((java.lang.Object) builder25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings32);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexSettings35.getValue(settingsSetting36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings14.diff(settings15, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.settings(settings37);
        org.elasticsearch.common.settings.Settings settings43 = settings37.getAsSettings("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData48.getCustoms();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings50);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings50);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings50);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData45.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int57 = builder56.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj59 = new java.lang.Object();
        boolean boolean60 = settings58.equals(obj59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder56.settings(settings58);
        org.elasticsearch.common.unit.SizeValue sizeValue63 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue64 = settings58.getAsSize("index.blocks.read", sizeValue63);
        boolean boolean65 = settings58.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings58);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings58);
        int int68 = indexSettings67.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(sizeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("state-");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        boolean boolean10 = indexMetaData5.equals((java.lang.Object) builder9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData14.getCustoms();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings16);
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting20 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings21 = indexSettings19.getValue(settingsSetting20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings21);
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData5.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap24 = indexMetaData5.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet26 = null; // flaky: indexMetaData5.activeAllocationIds((int) 'a');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj28 = new java.lang.Object();
        boolean boolean29 = settings27.equals(obj28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.Version version34 = indexMetaData31.getUpgradedVersion();
        org.elasticsearch.Version version35 = settings27.getAsVersion("index.shadow_replicas", version34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings27.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData38.getCustoms();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings40);
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings44 = settings40.filter(strPredicate43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer47 = null;
        indexScopedSettings45.addSettingsUpdateConsumer(settingsSetting46, settingsConsumer47);
        boolean boolean50 = indexScopedSettings45.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer53 = null;
        indexScopedSettings51.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer53);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer55 = null;
        indexScopedSettings45.addSettingsUpdateConsumer(settingsSetting52, settingsConsumer55);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting58 = indexScopedSettings45.get("state-");
        org.elasticsearch.index.IndexSettings indexSettings59 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings27, strPredicate43, indexScopedSettings45);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings63);
        long long68 = indexMetaData61.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.apache.lucene.index.MergePolicy mergePolicy74 = indexSettings73.getMergePolicy();
        boolean boolean75 = indexMetaData61.equals((java.lang.Object) indexSettings73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap77 = indexMetaData76.getCustoms();
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData76, settings78);
        org.apache.lucene.index.MergePolicy mergePolicy80 = indexSettings79.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings81 = indexSettings79.getSettings();
        java.lang.String[] strArray83 = settings81.getAsArray("index.version.upgraded");
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings81);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData85 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap86 = indexMetaData85.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap89 = indexMetaData88.getCustoms();
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings91 = new org.elasticsearch.index.IndexSettings(indexMetaData88, settings90);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData87, settings90);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData85, settings90);
        boolean boolean94 = settings81.equals((java.lang.Object) indexSettings93);
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings81);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput96 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settingsSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap24);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNull(wildcardSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(strImmutableOpenMap77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(mergePolicy80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(indexMetaData85);
        org.junit.Assert.assertNotNull(strImmutableOpenMap86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(strImmutableOpenMap89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.auto_expand_replicas]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings15.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        boolean boolean26 = indexMetaData21.equals((java.lang.Object) builder25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings32);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexSettings35.getValue(settingsSetting36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings14.diff(settings15, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.settings(settings37);
        org.elasticsearch.common.settings.Settings settings43 = settings37.getAsSettings("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings43);
        org.elasticsearch.Version version45 = indexSettings44.getIndexVersionCreated();
        int int46 = indexSettings44.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_all");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        int int37 = indexMetaData30.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.state(state39);
        byte byte41 = state39.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder1.state(state39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.removeAlias("");
        long long45 = builder42.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder42.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.removeAlias("_na_");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 1 + "'", byte41 == (byte) 1);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int14 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = settings10.equals(obj11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = builder15.build();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings17.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings30.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putProperties(strMap34, strPredicate35, strFunction36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder25.settings(builder29);
        boolean boolean39 = settings17.equals((java.lang.Object) builder38);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        boolean boolean46 = indexMetaData41.equals((java.lang.Object) builder45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings52);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getValue(settingsSetting56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings57);
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.Settings settings60 = settings57.filter(strPredicate59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings60.toXContent(xContentBuilder61, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings17.toXContent(xContentBuilder40, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings10.toXContent(xContentBuilder13, params62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder9, params62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(true);
        boolean boolean22 = settings19.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index25 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData0.requireFilters();
        int int28 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index30 = indexMetaData0.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(index25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(index30);
        org.junit.Assert.assertNull(strSet32);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(true);
        boolean boolean22 = settings19.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        int int25 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.putCustom("active_allocations", custom28);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction51 = null;
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder30.putProperties(strMap49, strPredicate50, strFunction51);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.blocks.read", true);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder26.settings(builder58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder26.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder61.version(100L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData64.mapping("index.shadow_replicas");
        boolean boolean68 = indexMetaData64.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str69 = indexMetaData64.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData64);
        long long71 = indexMetaData64.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder63.state(state72);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "_na_" + "'", str69, "_na_");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        boolean boolean8 = indexSettings3.matchesIndexName("index.blocks.read");
        boolean boolean9 = indexSettings3.isQueryStringLenient();
        boolean boolean10 = indexSettings3.isOnSharedFilesystem();
        boolean boolean12 = indexSettings3.matchesIndexName("index.blocks.read_only");
        org.elasticsearch.index.translog.Translog.Durability durability13 = indexSettings3.getTranslogDurability();
        java.lang.String str14 = indexSettings3.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + durability13 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability13.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        boolean boolean12 = indexSettings6.matchesIndexName("index.number_of_replicas");
        org.elasticsearch.index.translog.Translog.Durability durability13 = indexSettings6.getTranslogDurability();
        int int14 = indexSettings6.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = indexSettings6.getFlushThresholdSize();
        java.lang.String str16 = indexSettings6.customDataPath();
        int int17 = indexSettings6.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + durability13 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability13.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.Version version14 = indexSettings13.getIndexVersionCreated();
        java.lang.String str15 = indexSettings13.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings13.getRefreshInterval();
        boolean boolean17 = indexSettings13.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings13.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        org.apache.lucene.index.MergePolicy mergePolicy23 = indexSettings22.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings22.getSettings();
        org.elasticsearch.common.settings.Settings settings26 = settings24.getAsSettings("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        long long28 = indexMetaData18.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder6.state(state29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder30.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.putMapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", "index.version.created_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(mergePolicy23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        boolean boolean7 = indexMetaData0.isSameUUID("index.auto_expand_replicas");
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings16 = settings14.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings14.getAsTime("index.blocks.metadata", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        boolean boolean28 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings14.getAsTime("index.shared_filesystem", timeValue29);
        java.lang.String[] strArray33 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray35 = settings14.getAsArray("index.data_path", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version38 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.String str39 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "_na_" + "'", str39, "_na_");
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue10 = settings3.getAsRatio("", "index.version.upgradedindex.shadow_replicas=-1a");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.upgradedindex.shadow_replicas=-1a]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("archived.", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder9.settings(builder10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder10.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder10.putArray("primary_terms", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.version.minimum_compatible", (float) '4');
        java.util.Map<java.lang.String, java.lang.String> strMap75 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder7.put(strMap75);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder7.putNull("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings79 = builder78.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("0", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean39 = indexMetaData34.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap40 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData30.diff(indexMetaData34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings43.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData49.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        boolean boolean54 = indexMetaData49.equals((java.lang.Object) builder53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = settings65.getAsMap();
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings42.diff(settings43, settings65);
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer72 = null;
        indexScopedSettings70.addSettingsUpdateConsumer(settingsSetting71, settingsConsumer72);
        org.elasticsearch.index.IndexSettings indexSettings74 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData34, settings65, strPredicate69, indexScopedSettings70);
        java.lang.String[] strArray76 = settings65.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder2.putArray("_na_", strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder77.normalizePrefix("");
        org.elasticsearch.common.settings.Settings settings80 = builder77.build();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.put("index.priority", 0);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder77.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap40);
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNull(mappingMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings16.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings19.toXContent(xContentBuilder20, params21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings19.getGroups("index.auto_expand_replicas", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings19.getGroups("hi!", false);
        boolean boolean29 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        boolean boolean30 = settings19.isEmpty();
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings19.getGroups("index.version.upgraded_string", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings6.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder5.putProperties(strMap10, strPredicate11, strFunction12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.settings(builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData15.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData15.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder14.state(state18);
        int int20 = builder19.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj1 = new java.lang.Object();
        boolean boolean2 = settings0.equals(obj1);
        org.elasticsearch.common.settings.Settings settings4 = settings0.getByPrefix("");
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        boolean boolean16 = indexMetaData11.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData11.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData7.diff(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        java.lang.String str24 = settings21.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings21);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData11.getCustoms();
        boolean boolean27 = settings6.equals((java.lang.Object) strImmutableOpenMap26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings6.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.Version version37 = indexSettings36.getIndexVersionCreated();
        java.lang.String str38 = indexSettings36.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getRefreshInterval();
        boolean boolean40 = indexSettings36.isQueryStringLenient();
        org.apache.lucene.index.MergePolicy mergePolicy41 = indexSettings36.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue42 = indexSettings36.getTranslogSyncInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue43 = indexSettings36.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue44 = settings6.getAsBytesSize("archived.", byteSizeValue43);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mergePolicy41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNotNull(byteSizeValue43);
        org.junit.Assert.assertNotNull(byteSizeValue44);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        org.elasticsearch.common.settings.Settings settings25 = indexMetaData7.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData7.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet28 = null; // flaky: indexMetaData7.activeAllocationIds((int) 'a');
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj30 = new java.lang.Object();
        boolean boolean31 = settings29.equals(obj30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData33.mapping("index.shadow_replicas");
        org.elasticsearch.Version version36 = indexMetaData33.getUpgradedVersion();
        org.elasticsearch.Version version37 = settings29.getAsVersion("index.shadow_replicas", version36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings29.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings46 = settings42.filter(strPredicate45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer49 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(settingsSetting48, settingsConsumer49);
        boolean boolean52 = indexScopedSettings47.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting54 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer55 = null;
        indexScopedSettings53.addSettingsUpdateConsumer(settingsSetting54, settingsConsumer55);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer57 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(settingsSetting54, settingsConsumer57);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting60 = indexScopedSettings47.get("state-");
        org.elasticsearch.index.IndexSettings indexSettings61 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData7, settings29, strPredicate45, indexScopedSettings47);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settingsSetting48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(settingsSetting54);
        org.junit.Assert.assertNull(wildcardSetting60);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        java.lang.String str30 = builder28.remove("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder28.put("", true);
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put("state-", 1L, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.removeAlias("index.creation_date");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = builder41.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom72 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder70.putCustom("index.data_path", custom72);
        long long74 = builder70.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder70.numberOfReplicas((int) (byte) 100);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings17.getIndexMetaData();
        org.elasticsearch.Version version20 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.Version version21 = indexSettings17.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(version21);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        long long8 = indexSettings3.getGcDeletesInMillis();
        boolean boolean9 = indexSettings3.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder2.putArray("primary_terms", (java.util.List<java.lang.String>) strList61);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.put(objDictionary64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        java.lang.String str30 = builder2.remove("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = builder34.mapping("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder34.numberOfShards((int) (short) 10);
        java.lang.Class<?> wildcardClass39 = builder34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder2.put("index.version.created", (java.lang.Class) wildcardClass39);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        java.lang.String str9 = indexSettings6.getNodeName();
        boolean boolean10 = indexSettings6.isOnSharedFilesystem();
        boolean boolean11 = indexSettings6.isShadowReplicaIndex();
        java.lang.String str12 = indexSettings6.getDefaultField();
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings6.getMergePolicy();
        int int14 = indexSettings6.getNumberOfReplicas();
        long long15 = indexSettings6.getGcDeletesInMillis();
        boolean boolean16 = indexSettings6.isOnSharedFilesystem();
        boolean boolean18 = indexSettings6.matchesIndexName("");
        int int19 = indexSettings6.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 60000L + "'", long15 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        boolean boolean36 = indexSettings35.isTTLPurgeDisabled();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig37 = indexSettings35.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig37);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean21 = indexMetaData16.equals((java.lang.Object) builder20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings30.getValue(settingsSetting31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings32.getAsMap();
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings9.diff(settings10, settings32);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings35);
        int int37 = indexSettings36.getNumberOfShards();
        boolean boolean38 = indexSettings36.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings6);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings15.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        boolean boolean26 = indexMetaData21.equals((java.lang.Object) builder25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings32);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexSettings35.getValue(settingsSetting36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings14.diff(settings15, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.settings(settings37);
        org.elasticsearch.common.settings.Settings settings43 = settings37.getAsSettings("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.apache.lucene.index.MergePolicy mergePolicy49 = indexSettings48.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getSettings();
        org.elasticsearch.common.settings.Settings settings52 = settings50.getAsSettings("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters55 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters56 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(mergePolicy49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(discoveryNodeFilters55);
        org.junit.Assert.assertNull(discoveryNodeFilters56);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        boolean boolean8 = indexSettings5.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings5.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings5.getGlobalCheckpointInterval();
        boolean boolean12 = indexSettings5.isShadowReplicaIndex();
        org.elasticsearch.Version version13 = indexSettings5.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(version13);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings15.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        boolean boolean26 = indexMetaData21.equals((java.lang.Object) builder25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings32);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexSettings35.getValue(settingsSetting36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings14.diff(settings15, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.settings(settings37);
        org.elasticsearch.common.settings.Settings settings43 = settings37.getAsSettings("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings43);
        org.elasticsearch.Version version45 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int47 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        java.lang.String str8 = indexMetaData7.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings25.filter(strPredicate27);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params30 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = settings28.toXContent(xContentBuilder29, params30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings32);
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings33.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(params30);
        org.junit.Assert.assertNull(xContentBuilder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(timeValue34);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings16.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings19);
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings20.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings20.getTranslogSyncInterval();
        java.lang.String str23 = indexSettings20.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings72);
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings74.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = indexSettings74.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings74.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexSettings74.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        boolean boolean81 = indexSettings80.isWarmerEnabled();
        org.elasticsearch.common.unit.TimeValue timeValue82 = indexSettings80.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(timeValue82);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings9);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings9.filter(strPredicate12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings17);
        int int22 = indexSettings21.getMaxResultWindow();
        boolean boolean24 = indexSettings21.matchesIndexName("index.priority");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = settings13.getAsBytesSize("index.blocks.metadata", byteSizeValue25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13);
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings27.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(timeValue29);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj1 = new java.lang.Object();
        boolean boolean2 = settings0.equals(obj1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mapping("index.shadow_replicas");
        org.elasticsearch.Version version7 = indexMetaData4.getUpgradedVersion();
        org.elasticsearch.Version version8 = settings0.getAsVersion("index.shadow_replicas", version7);
        java.lang.String str10 = settings0.toDelimitedString('a');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings0.getGroups("index.version.created", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        boolean boolean25 = indexMetaData15.equals((java.lang.Object) 10);
        long long26 = indexMetaData15.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap27 = indexMetaData15.getAliases();
        long long28 = indexMetaData15.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData29.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings34);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34);
        java.lang.String str38 = indexSettings37.getNodeName();
        org.elasticsearch.common.settings.Settings settings39 = indexSettings37.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData42.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        boolean boolean47 = indexMetaData42.equals((java.lang.Object) builder46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData48.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap52 = indexMetaData51.getCustoms();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings53);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings53);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings53);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting57 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings58 = indexSettings56.getValue(settingsSetting57);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings58);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = settings58.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap63 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings64);
        org.apache.lucene.index.MergePolicy mergePolicy66 = indexSettings65.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings65.getSettings();
        org.elasticsearch.common.settings.Settings settings69 = settings67.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue71 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue72 = settings67.getAsTime("index.blocks.metadata", timeValue71);
        org.elasticsearch.common.unit.TimeValue timeValue73 = settings58.getAsTime("index.blocks.metadata", timeValue72);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap76 = indexMetaData75.getCustoms();
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings77.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings77);
        org.elasticsearch.Version version82 = indexSettings81.getIndexVersionCreated();
        java.lang.String str83 = indexSettings81.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue84 = indexSettings81.getRefreshInterval();
        boolean boolean85 = indexSettings81.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings86 = indexSettings81.getNodeSettings();
        org.elasticsearch.Version version87 = indexSettings81.getIndexVersionCreated();
        org.elasticsearch.Version version88 = settings58.getAsVersion("_na_", version87);
        org.elasticsearch.Version version89 = settings39.getAsVersion("false", version87);
        org.elasticsearch.Version version90 = settings0.getAsVersion("primary_terms", version89);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settingsSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(mergePolicy66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(version82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(timeValue84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertNotNull(version89);
        org.junit.Assert.assertNotNull(version90);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("state-");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("archived.", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.version.upgraded_string", (long) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("index.blocks.write", (long) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean9 = indexSettings8.isWarmerEnabled();
        boolean boolean10 = indexSettings8.isWarmerEnabled();
        boolean boolean11 = indexSettings8.isWarmerEnabled();
        java.lang.String str12 = indexSettings8.getUUID();
        boolean boolean13 = indexSettings8.isQueryStringLenient();
        int int14 = indexSettings8.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        long long8 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = settings9.equals(obj10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.Version version16 = indexMetaData13.getUpgradedVersion();
        org.elasticsearch.Version version17 = settings9.getAsVersion("index.shadow_replicas", version16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        java.lang.String str22 = settings9.toDelimitedString(' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        long long68 = indexMetaData63.getCreationDate();
        org.elasticsearch.common.io.stream.StreamInput streamInput69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = indexMetaData63.readFrom(streamInput69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long11 = indexMetaData0.getVersion();
        int int12 = indexMetaData0.getNumberOfShards();
        int int13 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder14.primaryTerm((int) '#', (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        int int11 = indexSettings6.getNumberOfShards();
        boolean boolean12 = indexSettings6.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getRefreshInterval();
        int int14 = indexSettings6.getNumberOfShards();
        int int15 = indexSettings6.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet12 = indexMetaData0.activeAllocationIds((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params8 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean9 = indexMetaData0.equals((java.lang.Object) params8);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData0.getMappings();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.readDiffFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(params8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_shards", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("index.uuid", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.data_path", false);
        java.lang.String str17 = builder12.remove("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder12.put("index.version.created_string", (double) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        int int16 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version19 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        int int23 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap24 = indexMetaData9.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        boolean boolean12 = indexSettings6.matchesIndexName("index.number_of_replicas");
        org.elasticsearch.index.translog.Translog.Durability durability13 = indexSettings6.getTranslogDurability();
        int int14 = indexSettings6.getMaxResultWindow();
        boolean boolean15 = indexSettings6.isQueryStringAllowLeadingWildcard();
        boolean boolean16 = indexSettings6.isQueryStringAnalyzeWildcard();
        java.lang.String str17 = indexSettings6.getDefaultField();
        boolean boolean18 = indexSettings6.isShadowReplicaIndex();
        boolean boolean19 = indexSettings6.isWarmerEnabled();
        org.elasticsearch.Version version20 = indexSettings6.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + durability13 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability13.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_all" + "'", str17, "_all");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(version20);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.created");
        boolean boolean10 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        boolean boolean17 = indexMetaData12.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings23);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings28 = indexSettings26.getValue(settingsSetting27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.apache.lucene.index.MergePolicy mergePolicy34 = indexSettings33.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings35 = indexSettings33.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getAsGroups(false);
        java.lang.String[] strArray40 = settings35.getAsArray("primary_terms");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings35.getAsGroups();
        org.elasticsearch.common.settings.Settings settings43 = settings35.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings45 = settings43.getAsSettings("index.creation_date");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = builder48.build();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings50.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder59 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = settings63.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate68 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction69 = null;
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder62.putProperties(strMap67, strPredicate68, strFunction69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder58.settings(builder62);
        boolean boolean72 = settings50.equals((java.lang.Object) builder71);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData74.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData77);
        boolean boolean79 = indexMetaData74.equals((java.lang.Object) builder78);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap81 = indexMetaData80.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap84 = indexMetaData83.getCustoms();
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData83, settings85);
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData82, settings85);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings85);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting89 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings90 = indexSettings88.getValue(settingsSetting89);
        org.elasticsearch.index.IndexSettings indexSettings91 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings90);
        java.util.function.Predicate<java.lang.String> strPredicate92 = null;
        org.elasticsearch.common.settings.Settings settings93 = settings90.filter(strPredicate92);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params95 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = settings93.toXContent(xContentBuilder94, params95);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder97 = settings50.toXContent(xContentBuilder73, params95);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder98 = settings45.toXContent(xContentBuilder46, params95);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder11, params95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(mergePolicy34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strPredicate68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settingsSetting89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(params95);
        org.junit.Assert.assertNull(xContentBuilder96);
        org.junit.Assert.assertNull(xContentBuilder97);
        org.junit.Assert.assertNull(xContentBuilder98);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings7.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings6.diff(settings7, settings29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings34.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData43);
        boolean boolean45 = indexMetaData40.equals((java.lang.Object) builder44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData46.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData49.getCustoms();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings51);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings51);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings51);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting55 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings56 = indexSettings54.getValue(settingsSetting55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = settings56.getAsMap();
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings33.diff(settings34, settings56);
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings6.dryRun(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings63);
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData71 = indexMetaData69.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData72);
        boolean boolean74 = indexMetaData69.equals((java.lang.Object) builder73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap76 = indexMetaData75.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap79 = indexMetaData78.getCustoms();
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings80);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings80);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting84 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings85 = indexSettings83.getValue(settingsSetting84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings85);
        java.util.Map<java.lang.String, java.lang.String> strMap87 = settings85.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate88 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction89 = null;
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder68.putProperties(strMap87, strPredicate88, strFunction89);
        org.elasticsearch.common.settings.Settings.Builder builder91 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean93 = indexScopedSettings6.updateSettings(settings63, builder90, builder91, "primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap94 = builder91.internalMap();
        indexScopedSettings0.validate(builder91);
        org.elasticsearch.common.settings.Setting.Property property96 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settingsSetting55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNull(mappingMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(strImmutableOpenMap79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settingsSetting84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertTrue("'" + property96 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property96.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_all");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.settings(builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        int int37 = indexMetaData30.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.state(state39);
        byte byte41 = state39.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder1.state(state39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.index("index.auto_expand_replicas");
        java.lang.String str47 = builder44.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder44.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.version(0L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 1 + "'", byte41 == (byte) 1);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index.auto_expand_replicas" + "'", str47, "index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("state-");
        long long14 = builder11.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        boolean boolean15 = indexMetaData10.equals((java.lang.Object) builder14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings21);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings21);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings26 = indexSettings24.getValue(settingsSetting25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = settings26.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings26);
        java.lang.String str30 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.apache.lucene.index.MergePolicy mergePolicy35 = indexSettings34.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings36 = indexSettings34.getSettings();
        org.elasticsearch.common.settings.Settings settings38 = settings36.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue40 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue41 = settings36.getAsTime("index.blocks.metadata", timeValue40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData44.getCustoms();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings46);
        boolean boolean49 = indexSettings48.hasCustomDataPath();
        boolean boolean50 = indexSettings48.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings48.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue52 = settings36.getAsTime("index.shared_filesystem", timeValue51);
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings36.getAsSize("hi!", sizeValue54);
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings36);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_na_" + "'", str30, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(mergePolicy35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNull(sizeValue55);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData15.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        boolean boolean20 = indexMetaData15.equals((java.lang.Object) builder19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings26);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings31 = indexSettings29.getValue(settingsSetting30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = settings31.getAsMap();
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings8.diff(settings9, settings31);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        org.apache.lucene.util.Version version36 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNull(version36);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.Version version13 = indexSettings12.getIndexVersionCreated();
        java.lang.String str14 = indexSettings12.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getRefreshInterval();
        boolean boolean16 = indexSettings12.isQueryStringLenient();
        int int17 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.Version version18 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig20 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings12.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig20);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = settings8.equals(obj9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.Version version15 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.Version version16 = settings8.getAsVersion("index.shadow_replicas", version15);
        java.lang.Class<?> wildcardClass17 = settings8.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("active_allocations", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray41 = settings32.getAsArray("index.shared_filesystem", strArray40);
        java.lang.String[] strArray43 = settings25.getAsArray("index.version.created_string", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder6.putArray("index.auto_expand_replicas", strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.blocks.read_only", (long) (byte) -1);
        org.elasticsearch.common.settings.Settings settings48 = builder44.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getGroups("active_allocations");
        java.util.Set<java.lang.String> strSet51 = settings48.names();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings57.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        boolean boolean68 = indexMetaData63.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData69.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap73 = indexMetaData72.getCustoms();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings74);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting78 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings79 = indexSettings77.getValue(settingsSetting78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings79.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder62.putProperties(strMap81, strPredicate82, strFunction83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = org.elasticsearch.common.settings.Settings.builder();
        boolean boolean87 = indexScopedSettings0.updateSettings(settings57, builder84, builder85, "primary_terms");
        org.elasticsearch.common.settings.Settings settings88 = builder85.build();
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder85.put("index.", 100);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder85.put("index.priority", "");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder98 = builder94.put("index.blocks.read", 10L, byteSizeUnit97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settingsSetting78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long11 = indexMetaData0.getVersion();
        int int12 = indexMetaData0.getNumberOfShards();
        int int13 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean16 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings19);
        java.lang.String str25 = settings19.toDelimitedString(' ');
        java.lang.String str27 = settings19.get("index.version.upgraded_string");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = settings19.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("state-");
        java.lang.String str13 = builder7.remove("active_allocations");
        java.lang.String str15 = builder7.remove("1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean6 = indexSettings5.hasCustomDataPath();
        boolean boolean7 = indexSettings5.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings5.getGlobalCheckpointInterval();
        boolean boolean9 = indexSettings5.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getNodeSettings();
        boolean boolean11 = indexSettings5.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings5.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeValue12);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings12.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean23 = indexMetaData18.equals((java.lang.Object) builder22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings29);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getValue(settingsSetting33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = settings34.getAsMap();
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings11.diff(settings12, settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder10.settings(settings34);
        org.elasticsearch.common.settings.Settings settings40 = settings34.getAsSettings("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder8.settings(settings34);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        org.elasticsearch.common.unit.SizeValue sizeValue45 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue46 = settings42.getAsSize("index.number_of_shards", sizeValue45);
        java.lang.String str48 = settings42.get("_all");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNull(sizeValue46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        boolean boolean11 = indexMetaData7.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData7.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData0.mapping("index.blocks.write");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings20.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings20.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData26.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        boolean boolean31 = indexMetaData26.equals((java.lang.Object) builder30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData32.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData35.getCustoms();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings37);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings37);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings42 = indexSettings40.getValue(settingsSetting41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = settings42.getAsMap();
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings19.diff(settings20, settings42);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings20);
        int int47 = indexSettings46.getMaxResultWindow();
        int int48 = indexSettings46.getNumberOfReplicas();
        org.elasticsearch.Version version49 = indexSettings46.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settingsSetting41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(version49);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean9 = indexSettings8.isQueryStringAnalyzeWildcard();
        boolean boolean10 = indexSettings8.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData14.getCustoms();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings16);
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16);
        org.elasticsearch.common.settings.Settings settings20 = indexSettings19.getSettings();
        java.lang.String str21 = indexSettings19.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings19.getGlobalCheckpointInterval();
        boolean boolean23 = indexSettings19.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer26 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting25, settingsConsumer26);
        boolean boolean29 = indexScopedSettings24.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer32 = null;
        indexScopedSettings30.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer32);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer34 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(settingsSetting31, settingsConsumer34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings24.get(settingsSetting36);
        org.elasticsearch.common.settings.Settings settings38 = indexSettings19.getValue(settingsSetting36);
        org.elasticsearch.common.settings.Settings settings39 = indexSettings8.getValue(settingsSetting36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexSettings8.getIndexMetaData();
        // The following exception was thrown during execution in test generation
        try {
            long long42 = indexMetaData40.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData40);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        long long11 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        long long15 = indexMetaData13.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        boolean boolean18 = indexMetaData13.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData13.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData9.diff(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        java.lang.String str26 = settings23.get("hi!");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings23);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.index.Index index35 = indexMetaData30.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData30.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData30.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        int int46 = indexMetaData39.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData39.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version49 = indexMetaData39.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff50 = indexMetaData30.diff(indexMetaData39);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData39.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder29.state(state51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder8.state(state51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData54.mapping("index.shadow_replicas");
        boolean boolean58 = indexMetaData54.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData60 = indexMetaData54.mappingOrDefault("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters61 = indexMetaData54.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state62 = indexMetaData54.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder53.state(state62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder63.primaryTerm((int) (byte) 100, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(index35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNull(version49);
        org.junit.Assert.assertNotNull(indexMetaDataDiff50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNull(mappingMetaData56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(mappingMetaData60);
        org.junit.Assert.assertNull(discoveryNodeFilters61);
        org.junit.Assert.assertTrue("'" + state62 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state62.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAlias("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.blocks.write");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        int int16 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.creation_date_string");
        org.apache.lucene.util.Version version19 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.index.Index index21 = indexMetaData9.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData9.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNull(index21);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("index.shadow_replicas");
        boolean boolean12 = indexMetaData8.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        boolean boolean27 = indexMetaData22.equals((java.lang.Object) builder26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData31.getCustoms();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings33);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting37 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings38 = indexSettings36.getValue(settingsSetting37);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings38.getAsMap();
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings15.diff(settings16, settings38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings43.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData49.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        boolean boolean54 = indexMetaData49.equals((java.lang.Object) builder53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings63.getValue(settingsSetting64);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = settings65.getAsMap();
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings42.diff(settings43, settings65);
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings15.dryRun(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int72 = builder71.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj74 = new java.lang.Object();
        boolean boolean75 = settings73.equals(obj74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder71.settings(settings73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData77.getCustoms();
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings79);
        boolean boolean84 = indexSettings83.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting85 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings86 = indexSettings83.getValue(settingsSetting85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings15.diff(settings73, settings86);
        java.util.function.Predicate<java.lang.String> strPredicate88 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings89 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings90 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData8, settings87, strPredicate88, indexScopedSettings89);
        org.elasticsearch.index.IndexSettings indexSettings91 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings87);
        org.elasticsearch.common.unit.TimeValue timeValue92 = indexSettings91.getTranslogSyncInterval();
        int int93 = indexSettings91.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settingsSetting37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNull(mappingMetaData51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(settingsSetting85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(indexScopedSettings89);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        int int70 = indexMetaData63.getNumberOfShards();
        long long71 = indexMetaData63.getCreationDate();
        org.elasticsearch.index.Index index72 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData74 = indexMetaData63.mapping("index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNull(index72);
        org.junit.Assert.assertNull(mappingMetaData74);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        boolean boolean12 = indexSettings6.matchesIndexName("index.number_of_replicas");
        org.elasticsearch.index.translog.Translog.Durability durability13 = indexSettings6.getTranslogDurability();
        int int14 = indexSettings6.getMaxResultWindow();
        boolean boolean15 = indexSettings6.isQueryStringAllowLeadingWildcard();
        int int16 = indexSettings6.getNumberOfShards();
        int int17 = indexSettings6.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + durability13 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability13.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        java.lang.String str30 = builder28.remove("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder28.put("index.blocks.write", (double) 1.0f);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        org.apache.lucene.index.MergePolicy mergePolicy43 = indexSettings42.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings44 = indexSettings42.getSettings();
        java.lang.String[] strArray46 = settings44.getAsArray("index.version.upgraded");
        java.lang.String[] strArray48 = settings34.getAsArray("index.blocks.read", strArray46, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder33.put((java.lang.Object[]) strArray48);
        java.lang.String str51 = builder49.remove("state-");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(mergePolicy43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings6.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings10);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings10);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings10);
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings13.getGlobalCheckpointInterval();
        int int15 = indexSettings13.getMaxRescoreWindow();
        boolean boolean17 = indexSettings13.matchesIndexName("index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings9);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings9.filter(strPredicate12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings17);
        int int22 = indexSettings21.getMaxResultWindow();
        boolean boolean24 = indexSettings21.matchesIndexName("index.priority");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = settings13.getAsBytesSize("index.blocks.metadata", byteSizeValue25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13);
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings27.getTranslogDurability();
        boolean boolean30 = indexSettings27.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings3.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig7 = indexSettings3.getMergeSchedulerConfig();
        boolean boolean8 = indexSettings3.isQueryStringLenient();
        boolean boolean9 = indexSettings3.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings3.getSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = indexSettings3.getParseFieldMatcher();
        int int12 = indexSettings3.getMaxRescoreWindow();
        boolean boolean13 = indexSettings3.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings3.getGlobalCheckpointInterval();
        boolean boolean15 = indexSettings3.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(parseFieldMatcher11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        boolean boolean12 = indexSettings6.matchesIndexName("index.number_of_replicas");
        boolean boolean13 = indexSettings6.isQueryStringAllowLeadingWildcard();
        int int14 = indexSettings6.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings5.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings5.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings5.getValue(settingsSetting8);
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings5.getGlobalCheckpointInterval();
        boolean boolean12 = indexSettings5.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher13 = indexSettings5.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher13);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings10);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings10);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings10);
        long long14 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long16 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean18 = indexMetaData13.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getValue(settingsSetting28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings29.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings29);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings29);
        boolean boolean36 = indexSettings35.isTTLPurgeDisabled();
        int int37 = indexSettings35.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("_all", "state-");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings30.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putProperties(strMap34, strPredicate35, strFunction36);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder25.put(strMap34);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", (long) '4');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder38.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.normalizePrefix("index.blocks.write");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder38.put(objDictionary46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.Version version9 = indexSettings8.getIndexVersionCreated();
        boolean boolean11 = indexSettings8.matchesIndexName("index.version.upgradedindex.shadow_replicas=-1a");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData5.getCustoms();
        long long7 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        long long11 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        boolean boolean14 = indexMetaData9.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData5.diff(indexMetaData9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings18.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        boolean boolean29 = indexMetaData24.equals((java.lang.Object) builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings35);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting39 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings40 = indexSettings38.getValue(settingsSetting39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = settings40.getAsMap();
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings17.diff(settings18, settings40);
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer47 = null;
        indexScopedSettings45.addSettingsUpdateConsumer(settingsSetting46, settingsConsumer47);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData9, settings40, strPredicate44, indexScopedSettings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        long long52 = indexMetaData50.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData50);
        boolean boolean55 = indexMetaData50.isSameUUID("index.shadow_replicas");
        long long56 = indexMetaData50.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings60);
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings60);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings64);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData0.getCustoms();
        long long68 = indexMetaData0.primaryTerm((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settingsSetting39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.upgraded", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        java.lang.String str32 = builder30.remove("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder30.loadFromSource("_na_");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) 10000);
        long long5 = builder2.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        long long8 = indexMetaData0.getVersion();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("archived.", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder9.settings(builder10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder10.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder10.putArray("primary_terms", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.version.minimum_compatible", (float) '4');
        java.util.Map<java.lang.String, java.lang.String> strMap75 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder7.put(strMap75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder76.putNull("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder76.put("0", (double) 35L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isQueryStringLenient();
        int int11 = indexSettings6.getMaxRescoreWindow();
        org.elasticsearch.Version version12 = indexSettings6.getIndexVersionCreated();
        boolean boolean13 = indexSettings6.isOnSharedFilesystem();
        boolean boolean14 = indexSettings6.isIndexUsingShadowReplicas();
        int int15 = indexSettings6.getMaxRescoreWindow();
        java.lang.String str16 = indexSettings6.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_shards", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("primary_terms", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder0.putNull("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.putNull("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings4.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction10 = null;
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.putProperties(strMap8, strPredicate9, strFunction10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings6);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        boolean boolean5 = indexSettings3.isQueryStringAllowLeadingWildcard();
        java.lang.String str6 = indexSettings3.getDefaultField();
        int int7 = indexSettings3.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings3.getIndexMetaData();
        org.apache.lucene.index.MergePolicy mergePolicy9 = indexSettings3.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(mergePolicy9);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        java.lang.String[] strArray38 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.minimum_compatible", "index.version.upgraded", "_na_", "_na_", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "", "index.", "_all", "index.blocks.read_only", "index.blocks.write", "index.uuid", "index.priority", "index.priority", "index.blocks.metadata", "index.uuid", "index.version.upgraded_string", "index.version.created", "_all", "index.uuid", "index.version.upgraded_string", "hi!", "index.version.upgraded" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder11.putArray("index.shadow_replicas", (java.util.List<java.lang.String>) strList39);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder11.put("index.priority", (long) 10000);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder44.normalizePrefix("state-");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder46.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean4 = indexSettings3.isIndexUsingShadowReplicas();
        boolean boolean5 = indexSettings3.isIndexUsingShadowReplicas();
        java.lang.String str6 = indexSettings3.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings3.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexMetaData7);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings27.filter(strPredicate29);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params32 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = settings30.toXContent(xContentBuilder31, params32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings30.getGroups("index.auto_expand_replicas", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings30.getGroups("hi!", false);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(params32);
        org.junit.Assert.assertNull(xContentBuilder33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings9.getTranslogSyncInterval();
        int int11 = indexSettings9.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.normalizePrefix("index.shared_filesystem");
        java.lang.String str4 = builder0.get("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder0.put("archived.", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder9.settings(builder10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder10.put("index.shadow_replicas", (long) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "index.blocks.write", "index.version.upgraded", "index.blocks.metadata", "index.blocks.read", "hi!", "index.uuid", "index.version.minimum_compatible", "index.blocks.read_only", "index.number_of_replicas", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem", "index.version.upgraded", "index.version.upgraded_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "index.shadow_replicas", "index.", "index.shared_filesystem.recover_on_any_node", "active_allocations", "index.data_path", "index.priority", "index.creation_date", "index.priority", "archived.", "index.", "archived.", "index.", "index.creation_date", "index." };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder10.putArray("primary_terms", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.version.minimum_compatible", (float) '4');
        java.util.Map<java.lang.String, java.lang.String> strMap75 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder7.put(strMap75);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", (long) 100);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("index.version.minimum_compatible", (double) 10000);
        java.lang.String str84 = builder79.get("index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        org.elasticsearch.common.settings.Settings settings27 = indexSettings26.getSettings();
        boolean boolean28 = indexSettings26.isQueryStringAnalyzeWildcard();
        long long29 = indexSettings26.getGcDeletesInMillis();
        boolean boolean31 = indexSettings26.matchesIndexName("index.data_path");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 60000L + "'", long29 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.shadow_replicas", (float) '#');
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.Version version16 = indexSettings15.getIndexVersionCreated();
        java.lang.String str17 = indexSettings15.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings15.getRefreshInterval();
        boolean boolean19 = indexSettings15.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings15.getNodeSettings();
        java.lang.String[] strArray22 = settings20.getAsArray("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder6.putArray("index.version.minimum_compatible", strArray22);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj1 = new java.lang.Object();
        boolean boolean2 = settings0.equals(obj1);
        org.elasticsearch.common.settings.Settings settings4 = settings0.getByPrefix("");
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        boolean boolean7 = settings4.isEmpty();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.data_path", (long) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.data_path", true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index11 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData14.getCustoms();
        long long16 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean19 = indexMetaData14.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData14.excludeFilters();
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        boolean boolean23 = indexMetaData14.equals((java.lang.Object) params22);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = indexMetaData0.toXContent(xContentBuilder13, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(index11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean9 = indexSettings8.isWarmerEnabled();
        boolean boolean10 = indexSettings8.isWarmerEnabled();
        boolean boolean11 = indexSettings8.isTTLPurgeDisabled();
        java.lang.String str12 = indexSettings8.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings8.getRefreshInterval();
        int int14 = indexSettings8.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings16 = indexSettings8.getValue(settingsSetting15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settingsSetting15);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.removeAlias("1");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putAlias(aliasMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData11.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.includeFilters();
        int int19 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap3 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = settings10.equals(obj11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = builder15.build();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings17.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings30.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putProperties(strMap34, strPredicate35, strFunction36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder25.settings(builder29);
        boolean boolean39 = settings17.equals((java.lang.Object) builder38);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        boolean boolean46 = indexMetaData41.equals((java.lang.Object) builder45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData47.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData50.getCustoms();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings52);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings57 = indexSettings55.getValue(settingsSetting56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings57);
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.Settings settings60 = settings57.filter(strPredicate59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings60.toXContent(xContentBuilder61, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings17.toXContent(xContentBuilder40, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings10.toXContent(xContentBuilder13, params62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = indexMetaData0.toXContent(xContentBuilder9, params62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte6 = state5.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.index("primary_terms");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 1 + "'", byte6 == (byte) 1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings4.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction10 = null;
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.putProperties(strMap8, strPredicate9, strFunction10);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder3.loadFromSource("_all");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean21 = indexMetaData16.equals((java.lang.Object) builder20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings30.getValue(settingsSetting31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder15.putProperties(strMap34, strPredicate35, strFunction36);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder15.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder15.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder15.put("index.", 10000);
        java.lang.String[] strArray66 = new java.lang.String[] { "index.version.upgraded_string", "index.version.minimum_compatible", "index.", "index.version.upgraded_string", "index.data_path", "index.version.upgraded_string", "state-", "index.shared_filesystem", "index.shared_filesystem", "_na_", "index.blocks.write", "index.version.minimum_compatible", "archived.", "index.version.minimum_compatible", "index.shadow_replicas", "index.shared_filesystem.recover_on_any_node", "index.creation_date_string", "index.creation_date_string", "index.shared_filesystem.recover_on_any_node" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder45.putArray("", (java.util.List<java.lang.String>) strList67);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder3.putArray("index.creation_date", (java.util.List<java.lang.String>) strList67);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings12.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean23 = indexMetaData18.equals((java.lang.Object) builder22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings29);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.getValue(settingsSetting33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = settings34.getAsMap();
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings11.diff(settings12, settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder10.settings(settings34);
        org.elasticsearch.common.settings.Settings settings40 = settings34.getAsSettings("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder8.settings(settings34);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = indexSettings43.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_all");
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData48.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        boolean boolean53 = indexMetaData48.equals((java.lang.Object) builder52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData54.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData57.getCustoms();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings59);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings59);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting63 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings64 = indexSettings62.getValue(settingsSetting63);
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings64.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder47.putProperties(strMap66, strPredicate67, strFunction68);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder69.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder69.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder46.settings(builder69);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData75);
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings77.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings77);
        int int82 = indexMetaData75.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData75);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state84 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder83.state(state84);
        byte byte86 = state84.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder46.state(state84);
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj89 = new java.lang.Object();
        boolean boolean90 = settings88.equals(obj89);
        org.elasticsearch.common.settings.Settings settings92 = settings88.getAsSettings("");
        java.util.Map<java.lang.String, java.lang.String> strMap93 = settings88.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder46.settings(settings88);
        org.elasticsearch.common.settings.Settings settings96 = settings88.getByPrefix("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings97 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings88);
        org.elasticsearch.common.settings.Settings settings98 = indexSettings97.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settingsSetting63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + state84 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state84.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + byte86 + "' != '" + (byte) 1 + "'", byte86 == (byte) 1);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(settings96);
        org.junit.Assert.assertNotNull(settings98);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings9 = indexSettings8.getSettings();
        java.lang.String str10 = indexSettings8.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings8.getGlobalCheckpointInterval();
        boolean boolean12 = indexSettings8.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting14 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer15 = null;
        indexScopedSettings13.addSettingsUpdateConsumer(settingsSetting14, settingsConsumer15);
        boolean boolean18 = indexScopedSettings13.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting20 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer21 = null;
        indexScopedSettings19.addSettingsUpdateConsumer(settingsSetting20, settingsConsumer21);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer23 = null;
        indexScopedSettings13.addSettingsUpdateConsumer(settingsSetting20, settingsConsumer23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings13.get(settingsSetting25);
        org.elasticsearch.common.settings.Settings settings27 = indexSettings8.getValue(settingsSetting25);
        int int28 = indexSettings8.getMaxResultWindow();
        boolean boolean29 = indexSettings8.isQueryStringAllowLeadingWildcard();
        org.apache.lucene.index.MergePolicy mergePolicy30 = indexSettings8.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settingsSetting14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(settingsSetting20);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mergePolicy30);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(true);
        boolean boolean22 = settings19.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index25 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(index25);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings9);
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings9);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings9.filter(strPredicate12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings17);
        int int22 = indexSettings21.getMaxResultWindow();
        boolean boolean24 = indexSettings21.matchesIndexName("index.priority");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = settings13.getAsBytesSize("index.blocks.metadata", byteSizeValue25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = builder29.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.numberOfShards((int) (byte) 1);
        boolean boolean34 = settings13.equals((java.lang.Object) builder29);
        java.lang.Boolean boolean37 = settings13.getAsBoolean("active_allocations", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = settings13.getAsStructuredMap();
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteSizeValue25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        java.lang.String str9 = indexSettings6.getNodeName();
        boolean boolean10 = indexSettings6.isOnSharedFilesystem();
        boolean boolean11 = indexSettings6.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings6.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getTranslogSyncInterval();
        boolean boolean14 = indexSettings6.isShadowReplicaIndex();
        boolean boolean15 = indexSettings6.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.removeAlias("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.numberOfReplicas((int) (byte) 100);
        int int19 = builder18.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings9 = indexSettings8.getSettings();
        java.lang.String str10 = indexSettings8.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings8.getGlobalCheckpointInterval();
        boolean boolean12 = indexSettings8.hasCustomDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting14 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer15 = null;
        indexScopedSettings13.addSettingsUpdateConsumer(settingsSetting14, settingsConsumer15);
        boolean boolean18 = indexScopedSettings13.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting20 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer21 = null;
        indexScopedSettings19.addSettingsUpdateConsumer(settingsSetting20, settingsConsumer21);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer23 = null;
        indexScopedSettings13.addSettingsUpdateConsumer(settingsSetting20, settingsConsumer23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings13.get(settingsSetting25);
        org.elasticsearch.common.settings.Settings settings27 = indexSettings8.getValue(settingsSetting25);
        int int28 = indexSettings8.getMaxResultWindow();
        boolean boolean29 = indexSettings8.isQueryStringAllowLeadingWildcard();
        java.lang.String str30 = indexSettings8.getUUID();
        boolean boolean31 = indexSettings8.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settingsSetting14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(settingsSetting20);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_na_" + "'", str30, "_na_");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.requireFilters();
        int int16 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData34.getCustoms();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings36);
        org.apache.lucene.index.MergePolicy mergePolicy38 = indexSettings37.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings39 = indexSettings37.getSettings();
        java.lang.String[] strArray41 = settings39.getAsArray("index.version.upgraded");
        java.lang.String[] strArray43 = settings29.getAsArray("index.blocks.read", strArray41, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder26.put((java.lang.Object[]) strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.shared_filesystem.recover_on_any_node", (long) (byte) 1);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.put(objDictionary48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(mergePolicy38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.apache.lucene.index.MergePolicy mergePolicy13 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings16 = settings14.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings14.getAsTime("index.blocks.metadata", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings24);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        boolean boolean28 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue30 = settings14.getAsTime("index.shared_filesystem", timeValue29);
        java.lang.String[] strArray33 = new java.lang.String[] { "primary_terms" };
        java.lang.String[] strArray35 = settings14.getAsArray("index.data_path", strArray33, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings37 = settings14.getAsSettings("index.blocks.metadata");
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        long long39 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters41 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(mergePolicy13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNull(discoveryNodeFilters41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str13 = builder11.get("index.data_path");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder11.internalMap();
        org.elasticsearch.common.settings.Settings settings15 = builder11.build();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj18 = new java.lang.Object();
        boolean boolean19 = settings17.equals(obj18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mapping("index.shadow_replicas");
        org.elasticsearch.Version version24 = indexMetaData21.getUpgradedVersion();
        org.elasticsearch.Version version25 = settings17.getAsVersion("index.shadow_replicas", version24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder11.put("_na_", version25);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.loadFromSource("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder10.settings(builder26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.numberOfShards((-1));
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray21 = settings12.getAsArray("index.shared_filesystem", strArray20);
        java.lang.String[] strArray23 = settings5.getAsArray("index.version.created_string", strArray20, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings5.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings5.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings6.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings15);
        boolean boolean18 = indexSettings17.hasCustomDataPath();
        boolean boolean19 = indexSettings17.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings17.getNodeSettings();
        java.lang.String[] strArray22 = settings20.getAsArray("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData24.getCustoms();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings26);
        org.apache.lucene.index.MergePolicy mergePolicy28 = indexSettings27.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings29 = indexSettings27.getSettings();
        org.elasticsearch.common.settings.Settings settings31 = settings29.getAsSettings("primary_terms");
        org.elasticsearch.common.unit.TimeValue timeValue33 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue34 = settings29.getAsTime("index.blocks.metadata", timeValue33);
        org.elasticsearch.common.unit.TimeValue timeValue35 = settings20.getAsTime("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", timeValue34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(mergePolicy28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(timeValue35);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        long long7 = indexMetaData0.getCreationDate();
        boolean boolean9 = indexMetaData0.isSameUUID("_na_");
        int int10 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        boolean boolean18 = indexMetaData11.isSameUUID("index.version.upgraded_string");
        boolean boolean20 = indexMetaData11.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData11.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.common.xcontent.XContentParser xContentParser24 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexMetaData11.fromXContent(xContentParser24, parseFieldMatcher25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.upgraded");
        int int2 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings15.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        boolean boolean26 = indexMetaData21.equals((java.lang.Object) builder25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings32);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings37 = indexSettings35.getValue(settingsSetting36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings14.diff(settings15, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.settings(settings37);
        org.elasticsearch.common.settings.Settings settings43 = settings37.getAsSettings("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.apache.lucene.index.MergePolicy mergePolicy49 = indexSettings48.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getSettings();
        org.elasticsearch.common.settings.Settings settings52 = settings50.getAsSettings("primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long55 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(mergePolicy49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        int int7 = indexSettings6.getMaxResultWindow();
        boolean boolean9 = indexSettings6.matchesIndexName("index.priority");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = indexSettings6.getFlushThresholdSize();
        java.lang.String str11 = indexSettings6.getDefaultField();
        boolean boolean13 = indexSettings6.matchesIndexName("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteSizeValue10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_all" + "'", str11, "_all");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData6);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.index.Index index11 = indexMetaData0.getMergeSourceIndex();
        int int12 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(index11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings11.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings17.getIndexMetaData();
        java.lang.String str20 = indexSettings17.getNodeName();
        boolean boolean21 = indexSettings17.isTTLPurgeDisabled();
        boolean boolean22 = indexSettings17.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.putCustom("_na_", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putCustom("index.blocks.write", custom11);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder12.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.removeAllAliases();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData11.getCustoms();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings13);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings13);
        boolean boolean17 = indexSettings16.isWarmerEnabled();
        boolean boolean18 = indexSettings16.isWarmerEnabled();
        boolean boolean19 = indexSettings16.isTTLPurgeDisabled();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) boolean19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.index("false");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        boolean boolean4 = indexMetaData0.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.version((long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        boolean boolean16 = indexMetaData11.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings22);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting26 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings27 = indexSettings25.getValue(settingsSetting26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = settings27.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder10.putProperties(strMap29, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder9.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.creationDate((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder9.numberOfReplicas((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.version((long) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settingsSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData2.getSettings();
        java.lang.String str4 = indexMetaData2.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData2.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData2.getCustoms();
        java.lang.Class<?> wildcardClass7 = indexMetaData2.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isWarmerEnabled();
        boolean boolean8 = indexSettings6.isShadowReplicaIndex();
        java.lang.String str9 = indexSettings6.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings6.getTranslogDurability();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings6.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings6.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings6.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = settings8.equals(obj9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.Version version15 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.Version version16 = settings8.getAsVersion("index.shadow_replicas", version15);
        java.lang.Class<?> wildcardClass17 = settings8.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("active_allocations", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings25);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData30.getCustoms();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings32);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray41 = settings32.getAsArray("index.shared_filesystem", strArray40);
        java.lang.String[] strArray43 = settings25.getAsArray("index.version.created_string", strArray40, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder6.putArray("index.auto_expand_replicas", strArray43);
        java.lang.String str46 = builder6.get("index.");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder56.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj65 = new java.lang.Object();
        boolean boolean66 = settings64.equals(obj65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData68.mapping("index.shadow_replicas");
        org.elasticsearch.Version version71 = indexMetaData68.getUpgradedVersion();
        org.elasticsearch.Version version72 = settings64.getAsVersion("index.shadow_replicas", version71);
        java.lang.Class<?> wildcardClass73 = settings64.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder62.put("active_allocations", (java.lang.Class) wildcardClass73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder54.put("index.version.upgradedindex.shadow_replicas=-1a", (java.lang.Class) wildcardClass73);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder6.put("1", (java.lang.Class) wildcardClass73);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder76.normalizePrefix("index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertNotNull(version71);
        org.junit.Assert.assertNotNull(version72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = settings3.equals(obj4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings3);
        java.lang.Boolean boolean9 = settings3.getAsBoolean("index.shared_filesystem.recover_on_any_node", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings11 = settings3.getByPrefix("index.shared_filesystem.recover_on_any_node");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue16 = settings11.getAsRatio("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", "index.version.upgradedindex.shadow_replicas=-1a");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.upgradedindex.shadow_replicas=-1a]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean4 = indexSettings3.isIndexUsingShadowReplicas();
        org.apache.lucene.index.MergePolicy mergePolicy5 = indexSettings3.getMergePolicy();
        boolean boolean6 = indexSettings3.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Settings settings7 = indexSettings3.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData9.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap28 = indexMetaData9.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet30 = null; // flaky: indexMetaData9.activeAllocationIds(10);
        int int31 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData9.mappingOrDefault("state-");
        org.elasticsearch.Version version34 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.Version version35 = settings7.getAsVersion("index.blocks.read", version34);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(mergePolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap28);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(version35);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) '#');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean21 = indexMetaData16.equals((java.lang.Object) builder20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData25.getCustoms();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings27);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings30.getValue(settingsSetting31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings32.getAsMap();
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings9.diff(settings10, settings32);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings35);
        org.elasticsearch.common.settings.Settings settings37 = indexSettings36.getNodeSettings();
        java.lang.String str38 = indexSettings36.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.apache.lucene.index.MergePolicy mergePolicy4 = indexSettings3.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings5 = indexSettings3.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = settings5.getAsSettings("primary_terms");
        java.lang.String str9 = settings5.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings5.getGroups("index.version.minimum_compatible", false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = settings5.getAsMemory("index.version.created", "index.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.version.created] with value [5000099] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(mergePolicy4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#" + "'", str9, "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings3);
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        int int12 = builder11.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = settings13.equals(obj14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.settings(settings13);
        org.elasticsearch.common.settings.Settings settings18 = settings13.getByPrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings settings20 = settings18.getByPrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        boolean boolean32 = indexMetaData27.equals((java.lang.Object) builder31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData33.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData36.getCustoms();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings38);
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings38);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting42 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings43 = indexSettings41.getValue(settingsSetting42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData45.getCustoms();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings47);
        org.apache.lucene.index.MergePolicy mergePolicy49 = indexSettings48.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getAsGroups(false);
        java.lang.String[] strArray55 = settings50.getAsArray("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder22.extendArray("index.blocks.read", strArray55);
        java.lang.String[] strArray57 = settings18.getAsArray("primary_terms", strArray55);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        int int60 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting62 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer63 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(settingsSetting62, settingsConsumer63);
        boolean boolean66 = indexScopedSettings61.hasDynamicSetting("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap68 = indexMetaData67.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings72);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings72);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting76 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings77 = indexSettings75.getValue(settingsSetting76);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings77.getAsGroups(true);
        boolean boolean80 = settings77.isEmpty();
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings61.dryRun(settings77);
        java.lang.String str83 = settings81.get("archived.");
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings81);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap86 = settings81.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settingsSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(mergePolicy49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settingsSetting62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(strImmutableOpenMap68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settingsSetting76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strMap86);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        boolean boolean10 = indexMetaData0.isSameUUID("index.number_of_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mappingOrDefault("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index15 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData4.getCustoms();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean9 = indexMetaData4.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.Version version12 = indexMetaData4.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = indexMetaData4.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        long long8 = builder4.version();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.putAlias(builder9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.Version version7 = indexSettings6.getIndexVersionCreated();
        java.lang.String str8 = indexSettings6.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings6.getRefreshInterval();
        boolean boolean10 = indexSettings6.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings6.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData12.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean19 = settings11.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.loadFromSource("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder5.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.creation_date", (int) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder7.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", 0);
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.loadFromStream("index.priority", inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder6.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.put("", (long) (byte) 0, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings19.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        java.lang.Boolean boolean28 = settings19.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder31.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder38.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder38.normalizePrefix("state-");
        java.lang.String str44 = builder38.remove("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.settings(builder38);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings18);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting22 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings23 = indexSettings21.getValue(settingsSetting22);
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings1, settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean39 = indexMetaData34.equals((java.lang.Object) builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings45);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting49 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings50 = indexSettings48.getValue(settingsSetting49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings27.diff(settings28, settings50);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.dryRun(settings28);
        java.lang.String str55 = indexScopedSettings0.nodeName();
        java.lang.String str56 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData58.getCustoms();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings60);
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings62.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings62.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting65 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings66 = indexSettings62.getValue(settingsSetting65);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer67 = null;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer68 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting65, settingsConsumer67, settingsConsumer68);
        org.elasticsearch.common.settings.Setting.Property property70 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settingsSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settingsSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settingsSetting65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + property70 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property70.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean8 = indexMetaData3.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings14);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings14);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.getValue(settingsSetting18);
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder2.putProperties(strMap21, strPredicate22, strFunction23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.settings(builder2);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder2.put("index.shadow_replicas", (long) 100);
        java.lang.String str30 = builder2.remove("primary_terms");
        java.lang.String str32 = builder2.get("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData43.getCustoms();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings45);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.version.minimum_compatible", "index.shadow_replicas", "index.uuid", "index.blocks.metadata", "index.uuid" };
        java.lang.String[] strArray54 = settings45.getAsArray("index.shared_filesystem", strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.putArray("index.creation_date", strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder41.put("active_allocations", (double) 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("_na_", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap65 = indexMetaData64.getCustoms();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings66);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        long long72 = indexMetaData70.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData70);
        boolean boolean75 = indexMetaData70.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version76 = indexMetaData70.getCreationVersion();
        org.elasticsearch.Version version77 = settings66.getAsVersion("index.version.minimum_compatible", version76);
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings66);
        java.lang.String[] strArray80 = settings78.getAsArray("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder61.put((java.lang.Object[]) strArray80);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder2.putArray("index.version.upgraded_string", strArray80);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder82.put("index.shared_filesystem.recover_on_any_node", false);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder85.put("state-", true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settingsSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(version77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) 10);
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        boolean boolean17 = indexMetaData12.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData21.getCustoms();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings23);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings23);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings28 = indexSettings26.getValue(settingsSetting27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings28);
        org.elasticsearch.Version version30 = indexSettings29.getIndexVersionCreated();
        boolean boolean31 = indexSettings29.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings32 = indexSettings29.getNodeSettings();
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings29.getMergePolicy();
        boolean boolean34 = indexMetaData0.equals((java.lang.Object) indexSettings29);
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings29.getRefreshInterval();
        long long36 = indexSettings29.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 60000L + "'", long36 == 60000L);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings8.getGlobalCheckpointInterval();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings8.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings8.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder9.build();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings11.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData10.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData19.getCustoms();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings21.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings21);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        boolean boolean27 = indexSettings26.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings26.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValue28);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData70.getCustoms();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings72);
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings74.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = indexSettings74.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting77 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings78 = indexSettings74.getValue(settingsSetting77);
        org.elasticsearch.common.settings.Settings settings79 = indexSettings74.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings79);
        org.elasticsearch.common.unit.TimeValue timeValue81 = indexSettings80.getRefreshInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue82 = indexSettings80.getFlushThresholdSize();
        org.apache.lucene.index.MergePolicy mergePolicy83 = indexSettings80.getMergePolicy();
        boolean boolean84 = indexSettings80.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNotNull(settingsSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertNotNull(byteSizeValue82);
        org.junit.Assert.assertNotNull(mergePolicy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.get("index.data_path");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = settings6.equals(obj7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("index.shadow_replicas");
        org.elasticsearch.Version version13 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.Version version14 = settings6.getAsVersion("index.shadow_replicas", version13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder0.put("_na_", version14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.loadFromSource("active_allocations");
        org.elasticsearch.common.settings.Settings settings18 = builder15.build();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder15.put("index.version.minimum_compatible", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put("false", "index.version.created");
        org.elasticsearch.common.settings.Settings settings25 = builder15.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.remove("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.put("_na_", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.replacePropertyPlaceholders();
        java.lang.String str8 = builder0.get("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData2.getSettings();
        java.lang.String str4 = indexMetaData2.getIndexUUID();
        long long5 = indexMetaData2.getCreationDate();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = indexMetaData2.toXContent(xContentBuilder6, params7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(params7);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.version.minimum_compatible", (float) 0);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings6.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate11 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder5.putProperties(strMap10, strPredicate11, strFunction12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.settings(builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.creationDate((long) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData3.getCustoms();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings5);
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings5);
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings9 = indexSettings8.getSettings();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings8.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings8.getGlobalCheckpointInterval();
        org.elasticsearch.Version version12 = indexSettings8.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData2.getCustoms();
        long long4 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        long long8 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        boolean boolean11 = indexMetaData6.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData2.diff(indexMetaData6);
        boolean boolean14 = indexMetaData0.equals((java.lang.Object) indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData6.includeFilters();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        boolean boolean22 = indexMetaData17.equals((java.lang.Object) builder21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData26.getCustoms();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings28);
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings33 = indexSettings31.getValue(settingsSetting32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings33.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder16.putProperties(strMap35, strPredicate36, strFunction37);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder16.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder16.put("", (long) '4');
        org.elasticsearch.common.settings.Settings settings45 = builder44.build();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = settings45.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings45);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settingsSetting32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap46);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("archived.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData9.getCustoms();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings11);
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings11);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings11);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings16 = indexSettings14.getValue(settingsSetting15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getByPrefix("index.blocks.read_only");
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = settings16.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings16.getGroups("index.blocks.read_only", true);
        java.lang.String str26 = settings16.get("", "");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        boolean boolean6 = indexMetaData1.equals((java.lang.Object) builder5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData10.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings12);
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings12);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings12);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.getValue(settingsSetting16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings17.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder0.putProperties(strMap19, strPredicate20, strFunction21);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder0.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder0.put("", (long) '4');
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = settings29.getAsMap();
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings29.toXContent(xContentBuilder32, params33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(params33);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings6.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        boolean boolean14 = indexMetaData9.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings25 = indexSettings23.getValue(settingsSetting24);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.version.upgraded_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder31.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (float) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData39.getCustoms();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData46.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        boolean boolean51 = indexMetaData46.equals((java.lang.Object) builder50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData52.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData55.getCustoms();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings57);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings57);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings57);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting61 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings62 = indexSettings60.getValue(settingsSetting61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings62);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = settings62.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings62);
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Object obj68 = new java.lang.Object();
        boolean boolean69 = settings67.equals(obj68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData73 = indexMetaData71.mapping("index.shadow_replicas");
        org.elasticsearch.Version version74 = indexMetaData71.getUpgradedVersion();
        org.elasticsearch.Version version75 = settings67.getAsVersion("index.shadow_replicas", version74);
        org.elasticsearch.Version version76 = settings62.getAsVersion("index.uuid", version75);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder31.put("_all", version75);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder77.put("index.version.minimum_compatible", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder30.settings(builder77);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder81.version((long) '4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settingsSetting61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(mappingMetaData73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.version.minimum_compatible", false);
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = indexMetaData0.activeAllocationIds(0);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting1 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer2 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting1, settingsConsumer2);
        boolean boolean5 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer8 = null;
        indexScopedSettings6.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer8);
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer10 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(settingsSetting7, settingsConsumer10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData12.getCustoms();
        long long14 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData16.getCustoms();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        boolean boolean21 = indexMetaData16.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.version.minimum_compatible", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings25.getAsGroups(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        boolean boolean36 = indexMetaData31.equals((java.lang.Object) builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData37.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData40.getCustoms();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings42);
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting46 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.common.settings.Settings settings47 = indexSettings45.getValue(settingsSetting46);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = settings47.getAsMap();
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings25, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting53 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.settings.Settings> settingsConsumer54 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(settingsSetting53, settingsConsumer54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings47, strPredicate51, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mapping("index.shadow_replicas");
        boolean boolean61 = indexMetaData57.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str62 = indexMetaData57.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData57.diff(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexScopedSettings0.copy(settings47, indexMetaData63);
        org.elasticsearch.index.Index index68 = indexMetaData63.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        java.util.Set<java.lang.String> strSet71 = null; // flaky: indexMetaData63.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.settings.Settings settings72 = indexMetaData63.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        java.lang.String str74 = builder73.index();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settingsSetting1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settingsSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settingsSetting53);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_na_" + "'", str62, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNull(index68);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", custom7);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder8);
    }
}
