import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        boolean boolean20 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder5.settings(settings16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder5.mapping("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put(settings33);
        java.lang.String str38 = builder27.get("");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder27.put("state-", (int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder5.settings(builder41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.creationDate(32L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder50.primaryTerm((int) (byte) 1, (long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder50.state(state56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder61.put(settings67);
        org.elasticsearch.common.settings.Settings settings72 = settings67.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet73 = settings67.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder57.putActiveAllocationIds(0, strSet73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder47.putActiveAllocationIds((int) (short) 0, strSet73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder44.putActiveAllocationIds((-1), strSet73);
        int int77 = builder44.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long79 = builder44.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(index8);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.index.translog.Translog.Durability durability19 = indexSettings12.getTranslogDurability();
        int int20 = indexSettings12.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + durability19 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability19.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings8.getAsMap();
        java.lang.String str15 = settings8.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings17 = settings8.getByPrefix("_na_");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings8.getAsGroups(false);
        java.lang.String str21 = settings8.get("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "primary_terms" + "'", str15, "primary_terms");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings12.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue16);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings11.dryRun(settings18);
        java.lang.String str20 = indexScopedSettings11.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting21 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer22 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer23 = null;
        indexScopedSettings11.addSettingsUpdateConsumer(timeValueSetting21, timeValueConsumer22, timeValueConsumer23);
        boolean boolean25 = indexMetaData0.equals((java.lang.Object) timeValueConsumer22);
        org.elasticsearch.index.Index index26 = indexMetaData0.getMergeSourceIndex();
        boolean boolean28 = indexMetaData0.isSameUUID("100.0");
        // The following exception was thrown during execution in test generation
        try {
            long long30 = indexMetaData0.primaryTerm((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(timeValueSetting21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(index26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.getTranslogDurability();
        boolean boolean22 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean23 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = indexSettings12.getFlushThresholdSize();
        java.lang.String str25 = indexSettings12.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteSizeValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("state-", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("_na_");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings settings18 = builder14.build();
        java.lang.String str20 = builder14.remove("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.Version version5 = indexMetaData3.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        org.apache.lucene.util.Version version7 = indexMetaData3.getMinimumCompatibleVersion();
        long long8 = indexMetaData3.getCreationDate();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData3.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData3.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData3.mapping("_all");
        boolean boolean14 = indexMetaData3.isSameUUID("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        java.lang.String str15 = indexMetaData3.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData3.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters16);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        boolean boolean17 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str18 = indexSettings12.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        org.apache.lucene.util.Version version20 = indexMetaData19.getMinimumCompatibleVersion();
        org.elasticsearch.Version version21 = indexMetaData19.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int23 = indexMetaData22.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData22.excludeFilters();
        org.elasticsearch.index.Index index25 = indexMetaData22.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData22.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int30 = builder29.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder34.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.version((long) 1);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder40.settings(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state47 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.state(state47);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.Settings settings51 = settings49.filter(strPredicate50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder48.settings(settings49);
        boolean boolean53 = settings49.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings49.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder38.settings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder32.settings(settings49);
        org.elasticsearch.common.settings.Settings settings58 = settings49.getAsSettings("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long61 = indexMetaData60.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap62 = indexMetaData60.getMappings();
        int int63 = indexMetaData60.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.Settings settings66 = settings64.filter(strPredicate65);
        java.lang.String str68 = settings66.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getAsGroups();
        java.lang.String str71 = settings66.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings66);
        int int73 = indexSettings72.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting74 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexSettings72.getValue(timeValueSetting74);
        boolean boolean76 = indexSettings72.isWarmerEnabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = indexSettings72.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue78 = settings58.getAsBytesSize("index.blocks.read_only", byteSizeValue77);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = settings26.getAsBytesSize("index.version.created_string", byteSizeValue78);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings26);
        org.elasticsearch.common.io.stream.StreamInput streamInput81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff82 = indexMetaData19.readDiffFrom(streamInput81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(index25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + state47 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state47.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting74);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(byteSizeValue77);
        org.junit.Assert.assertNotNull(byteSizeValue78);
        org.junit.Assert.assertNotNull(byteSizeValue79);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings6.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings5.dryRun(settings12);
        java.lang.String str14 = indexScopedSettings5.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData15.getMappings();
        int int18 = indexMetaData15.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings21.getAsGroups();
        java.lang.String str26 = settings21.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21);
        int int28 = indexSettings27.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getValue(timeValueSetting29);
        boolean boolean31 = indexSettings27.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings27.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData33.getMappings();
        int int36 = indexMetaData33.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.lang.String str41 = settings39.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings39.getAsGroups();
        java.lang.String str44 = settings39.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        int int46 = indexSettings45.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting47 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings45.getValue(timeValueSetting47);
        org.elasticsearch.common.unit.TimeValue timeValue49 = indexSettings27.getValue(timeValueSetting47);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer50 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer51 = null;
        indexScopedSettings5.addSettingsUpdateConsumer(timeValueSetting47, timeValueConsumer50, timeValueConsumer51);
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder53.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.Settings settings61 = settings59.filter(strPredicate60);
        java.lang.String str63 = settings61.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder55.put(settings61);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = settings61.getAsMap();
        java.lang.String str68 = settings61.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings70 = settings61.getByPrefix("_na_");
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings5.applySettings(settings61);
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings61);
        org.elasticsearch.common.settings.Settings settings75 = settings61.getByPrefix("index.version.created_string");
        java.lang.String str77 = settings75.get("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "primary_terms" + "'", str68, "primary_terms");
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean17 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.number_of_shards");
        int int10 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData0.getActiveAllocationIds();
        int int12 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet3 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData4.getMappings();
        int int6 = indexMetaData4.getNumberOfShards();
        long long7 = indexMetaData4.getVersion();
        org.elasticsearch.index.Index index8 = indexMetaData4.getMergeSourceIndex();
        int int9 = indexMetaData4.getNumberOfShards();
        long long10 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData4.getCustoms();
        org.elasticsearch.index.Index index12 = indexMetaData4.getMergeSourceIndex();
        boolean boolean13 = indexMetaData0.equals((java.lang.Object) indexMetaData4);
        long long14 = indexMetaData4.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getByPrefix("index.shadow_replicas");
        java.lang.String str37 = settings29.get("hi!", "");
        java.util.Set<java.lang.String> strSet38 = settings29.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder19.putActiveAllocationIds((int) (byte) 0, strSet38);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = builder39.mapping("100");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = builder39.mapping("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexScopedSettings0.get(timeValueSetting27);
        boolean boolean30 = indexScopedSettings0.hasDynamicSetting("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long33 = indexMetaData32.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap34 = indexMetaData32.getMappings();
        int int35 = indexMetaData32.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        java.lang.String str40 = settings38.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getAsGroups();
        java.lang.String str43 = settings38.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings38);
        int int45 = indexSettings44.getMaxResultWindow();
        boolean boolean46 = indexSettings44.isQueryStringAnalyzeWildcard();
        java.lang.String str47 = indexSettings44.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig48 = indexSettings44.getMergeSchedulerConfig();
        java.lang.String str49 = indexSettings44.customDataPath();
        org.elasticsearch.common.settings.Settings settings50 = indexSettings44.getNodeSettings();
        java.lang.String str51 = indexSettings44.customDataPath();
        boolean boolean52 = indexSettings44.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings53 = indexSettings44.getNodeSettings();
        indexScopedSettings0.validate("index.shared_filesystem", settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long56 = indexMetaData55.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap57 = indexMetaData55.getMappings();
        int int58 = indexMetaData55.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.Settings settings61 = settings59.filter(strPredicate60);
        java.lang.String str63 = settings61.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getAsGroups();
        java.lang.String str66 = settings61.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61);
        int int68 = indexSettings67.getMaxResultWindow();
        boolean boolean69 = indexSettings67.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long71 = indexMetaData70.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap72 = indexMetaData70.getMappings();
        int int73 = indexMetaData70.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate75 = null;
        org.elasticsearch.common.settings.Settings settings76 = settings74.filter(strPredicate75);
        java.lang.String str78 = settings76.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getAsGroups();
        java.lang.String str81 = settings76.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings76);
        int int83 = indexSettings82.getMaxResultWindow();
        boolean boolean84 = indexSettings82.isQueryStringAnalyzeWildcard();
        boolean boolean85 = indexSettings82.isTTLPurgeDisabled();
        boolean boolean86 = indexSettings82.isWarmerEnabled();
        boolean boolean87 = indexSettings82.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability88 = indexSettings82.getTranslogDurability();
        boolean boolean89 = indexSettings82.isQueryStringLenient();
        boolean boolean90 = indexSettings82.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting91 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue92 = indexSettings82.getValue(timeValueSetting91);
        org.elasticsearch.common.unit.TimeValue timeValue93 = indexSettings67.getValue(timeValueSetting91);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer94 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting91, timeValueConsumer94);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "_all" + "'", str47, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10000 + "'", int83 == 10000);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + durability88 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability88.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(timeValueSetting91);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertNotNull(timeValue93);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue22 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue23 = settings18.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings17.dryRun(settings24);
        java.lang.String str26 = indexScopedSettings17.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData27.getMappings();
        int int30 = indexMetaData27.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings33.getAsGroups();
        java.lang.String str38 = settings33.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        int int40 = indexSettings39.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting41 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue42 = indexSettings39.getValue(timeValueSetting41);
        boolean boolean43 = indexSettings39.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings39.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long46 = indexMetaData45.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap47 = indexMetaData45.getMappings();
        int int48 = indexMetaData45.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.Settings settings51 = settings49.filter(strPredicate50);
        java.lang.String str53 = settings51.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings51.getAsGroups();
        java.lang.String str56 = settings51.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        int int58 = indexSettings57.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting59 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings57.getValue(timeValueSetting59);
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings39.getValue(timeValueSetting59);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer62 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer63 = null;
        indexScopedSettings17.addSettingsUpdateConsumer(timeValueSetting59, timeValueConsumer62, timeValueConsumer63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long66 = indexMetaData65.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap67 = indexMetaData65.getMappings();
        int int68 = indexMetaData65.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.lang.String str73 = settings71.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings71.getAsGroups();
        java.lang.String str76 = settings71.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings71);
        int int78 = indexSettings77.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting79 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue80 = indexSettings77.getValue(timeValueSetting79);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer81 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer82 = null;
        indexScopedSettings17.addSettingsUpdateConsumer(timeValueSetting79, timeValueConsumer81, timeValueConsumer82);
        org.elasticsearch.common.unit.TimeValue timeValue84 = indexSettings12.getValue(timeValueSetting79);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(sizeValue23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting59);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting79);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(timeValue84);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData3.getMappings();
        int int5 = indexMetaData3.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData3.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean8 = indexSettings7.isShadowReplicaIndex();
        org.apache.lucene.index.MergePolicy mergePolicy9 = indexSettings7.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings7.getNodeSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("hi!", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mergePolicy9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder57.put("index.uuid", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.version.upgraded_string", false);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder62.normalizePrefix("index.creation_date");
        org.elasticsearch.common.settings.Settings settings68 = builder62.build();
        boolean boolean69 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings68);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.auto_expand_replicas");
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings2);
        org.elasticsearch.common.settings.Settings settings8 = settings2.getAsSettings("index.version.upgraded");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings2.getAsGroups();
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = settings2.getAsStructuredMap();
        java.lang.String str13 = settings2.get("_all", "hi!");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int10 = builder9.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.version((long) 1);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder20.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.state(state27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.settings(settings29);
        boolean boolean33 = settings29.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder18.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder12.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap38 = indexMetaData37.getMappings();
        int int39 = indexMetaData37.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings40 = indexMetaData37.getSettings();
        org.apache.lucene.util.Version version41 = indexMetaData37.getMinimumCompatibleVersion();
        int int42 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder36.state(state43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder7.state(state43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.numberOfShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = builder45.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(version41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.put(settings16);
        java.lang.String[] strArray26 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder10.putArray("", (java.util.List<java.lang.String>) strList27);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.upgraded_string", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder42.put(settings48);
        java.lang.String[] strArray58 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder42.putArray("", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder38.putArray("index.auto_expand_replicas", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder38.put("", 100.0f);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder7.settings(builder38);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 0);
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version(1L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder1.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.version((long) 1);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.settings(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.state(state17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.settings(settings19);
        java.lang.String str23 = builder22.index();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder26.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder26.internalMap();
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder26.put(objArray33);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.normalizePrefix("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder22.settings(builder34);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put("state-", 0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder1.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder1.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder1.numberOfShards(32);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "primary_terms" + "'", str23, "primary_terms");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean24 = indexSettings12.matchesIndexName("index.version.upgraded_string");
        boolean boolean25 = indexSettings12.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        java.lang.String str17 = indexSettings12.customDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig20 = indexSettings12.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig20);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getRefreshInterval();
        boolean boolean18 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings21.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue25 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue26 = settings21.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings20.dryRun(settings27);
        java.lang.String str29 = indexScopedSettings20.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long31 = indexMetaData30.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap32 = indexMetaData30.getMappings();
        int int33 = indexMetaData30.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        java.lang.String str38 = settings36.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings36.getAsGroups();
        java.lang.String str41 = settings36.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36);
        int int43 = indexSettings42.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting44 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings42.getValue(timeValueSetting44);
        boolean boolean46 = indexSettings42.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue47 = indexSettings42.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData48.getMappings();
        int int51 = indexMetaData48.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.lang.String str56 = settings54.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getAsGroups();
        java.lang.String str59 = settings54.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings54);
        int int61 = indexSettings60.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings60.getValue(timeValueSetting62);
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings42.getValue(timeValueSetting62);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer65 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer66 = null;
        indexScopedSettings20.addSettingsUpdateConsumer(timeValueSetting62, timeValueConsumer65, timeValueConsumer66);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long69 = indexMetaData68.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap70 = indexMetaData68.getMappings();
        int int71 = indexMetaData68.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate73 = null;
        org.elasticsearch.common.settings.Settings settings74 = settings72.filter(strPredicate73);
        java.lang.String str76 = settings74.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings74.getAsGroups();
        java.lang.String str79 = settings74.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings74);
        int int81 = indexSettings80.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting82 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue83 = indexSettings80.getValue(timeValueSetting82);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer84 = null;
        indexScopedSettings19.addSettingsUpdateConsumer(timeValueSetting62, timeValueSetting82, timeValueBiConsumer84);
        org.elasticsearch.common.unit.TimeValue timeValue86 = indexSettings12.getValue(timeValueSetting82);
        boolean boolean87 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.Version version89 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(sizeValue26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(version89);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(index3);
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        boolean boolean43 = indexScopedSettings0.hasDynamicSetting("index.number_of_shards");
        java.lang.String str44 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAlias("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) '#');
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.settings(settings19);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.putMapping(mappingMetaData21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.Version version5 = indexMetaData3.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        org.apache.lucene.util.Version version7 = indexMetaData3.getMinimumCompatibleVersion();
        long long8 = indexMetaData3.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData3.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData3.mapping("_na_");
        org.elasticsearch.Version version12 = indexMetaData3.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        long long16 = indexMetaData13.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int18 = indexMetaData17.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData13.diff(indexMetaData17);
        long long20 = indexMetaData13.getVersion();
        java.lang.String str21 = indexMetaData13.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData13.getCustoms();
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData13.activeAllocationIds((int) '#');
        org.elasticsearch.Version version25 = indexMetaData13.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData13.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData27.getMappings();
        int int30 = indexMetaData27.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings33.getAsGroups();
        java.lang.String str38 = settings33.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        int int40 = indexSettings39.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig41 = indexSettings39.getMergeSchedulerConfig();
        int int42 = indexSettings39.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings43 = indexSettings39.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = indexSettings39.getIndexMetaData();
        boolean boolean45 = indexSettings39.isQueryStringLenient();
        boolean boolean46 = indexMetaData13.equals((java.lang.Object) boolean45);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData3.diff(indexMetaData13);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = indexMetaData13.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("index.auto_expand_replicas", strArray16);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.shared_filesystem");
        java.lang.String[] strArray25 = settings19.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.putArray("index.version.upgraded", strArray25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.version((long) 1);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder28.settings(settings31);
        org.elasticsearch.common.settings.Settings settings36 = settings31.getAsSettings("hi!");
        boolean boolean37 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings36);
        org.elasticsearch.common.settings.Settings settings39 = settings36.getByPrefix("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder26.put(settings39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder41.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings47.filter(strPredicate48);
        java.lang.String str51 = settings49.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder43.put(settings49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.version((long) 1);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.Settings settings61 = settings59.filter(strPredicate60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder56.settings(settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder62.state(state63);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder64.settings(settings65);
        java.lang.Boolean boolean71 = settings65.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = settings65.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder52.put(settings65);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder73.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder75.put("index.version.minimum_compatible", 10000);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder75.replacePropertyPlaceholders();
        boolean boolean80 = settings39.equals((java.lang.Object) builder79);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put(objDictionary81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + boolean71 + "' != '" + false + "'", boolean71, false);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData1.getMappings();
        int int4 = indexMetaData1.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.lang.String str9 = settings7.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getAsGroups();
        java.lang.String str12 = settings7.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings7);
        int int14 = indexSettings13.getMaxResultWindow();
        boolean boolean15 = indexSettings13.isQueryStringAnalyzeWildcard();
        java.lang.String str16 = indexSettings13.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings13.getMergeSchedulerConfig();
        java.lang.String str18 = indexSettings13.customDataPath();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.getNodeSettings();
        indexScopedSettings0.validate(settings19);
        boolean boolean22 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData23.getMappings();
        int int26 = indexMetaData23.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getAsGroups();
        java.lang.String str34 = settings29.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings29);
        int int36 = indexSettings35.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting37 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings35.getValue(timeValueSetting37);
        boolean boolean39 = indexSettings35.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue40 = indexSettings35.getRefreshInterval();
        boolean boolean41 = indexSettings35.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig42 = indexSettings35.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int44 = indexMetaData43.getTotalNumberOfShards();
        int int45 = indexMetaData43.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap47 = indexMetaData46.getMappings();
        int int48 = indexMetaData46.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData46.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings49);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting51 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings50.getValue(timeValueSetting51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings35.getValue(timeValueSetting51);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer54 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer55 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting51, timeValueConsumer54, timeValueConsumer55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings59.getAsGroups();
        org.elasticsearch.common.settings.Settings settings62 = settings59.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version64 = null;
        org.elasticsearch.Version version65 = settings59.getAsVersion("index.creation_date_string", version64);
        java.util.function.Predicate<java.lang.String> strPredicate66 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings67 = settings59.filter(strPredicate66);
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long71 = indexMetaData70.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap72 = indexMetaData70.getMappings();
        int int73 = indexMetaData70.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate75 = null;
        org.elasticsearch.common.settings.Settings settings76 = settings74.filter(strPredicate75);
        java.lang.String str78 = settings76.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getAsGroups();
        java.lang.String str81 = settings76.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings76);
        int int83 = indexSettings82.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting84 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue85 = indexSettings82.getValue(timeValueSetting84);
        boolean boolean86 = indexSettings82.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings82.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue88 = settings68.getAsTime("index.shadow_replicas", timeValue87);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(timeValueSetting51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNull(version65);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting84);
        org.junit.Assert.assertNotNull(timeValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(timeValue87);
        org.junit.Assert.assertNotNull(timeValue88);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getCreationDate();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.xcontent.XContentParser xContentParser7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getAsGroups();
        java.lang.String str19 = settings14.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings14);
        java.lang.String str21 = indexSettings20.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexSettings20.getIndexMetaData();
        java.lang.String str23 = indexSettings20.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher24 = indexSettings20.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexMetaData0.fromXContent(xContentParser7, parseFieldMatcher24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher24);
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        long long10 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("index.blocks.read.0=index.number_of_shards4index.blocks.readprimary_terms=index.number_of_replicas4index.number_of_shards=org.elasticsearch.cluster.metadata.IndexMetaData$Builder4");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNull(mappingMetaData12);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put(settings34);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder28.putArray("", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = builder56.internalMap();
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder56.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder66.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate73 = null;
        org.elasticsearch.common.settings.Settings settings74 = settings72.filter(strPredicate73);
        java.lang.String str76 = settings74.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder68.put(settings74);
        org.elasticsearch.common.settings.Settings settings79 = settings74.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet80 = settings79.names();
        java.lang.String[] strArray82 = settings79.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder65.put(settings79);
        java.lang.Class<?> wildcardClass84 = builder65.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder21.put("active_allocations", (java.lang.Class) wildcardClass84);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder21.put("index.priority", 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings17 = settings13.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder26.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder26.put("state-", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.normalizePrefix("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData37.getMappings();
        int int40 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getAsGroups();
        java.lang.String str48 = settings43.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43);
        int int50 = indexSettings49.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig51 = indexSettings49.getMergeSchedulerConfig();
        boolean boolean52 = indexSettings49.isWarmerEnabled();
        org.elasticsearch.Version version53 = indexSettings49.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder33.put("index.priority", version53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder57.version((long) 1);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.common.settings.Settings settings62 = settings60.filter(strPredicate61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder57.settings(settings60);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder63.state(state64);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.Settings settings68 = settings66.filter(strPredicate67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder65.settings(settings66);
        java.lang.String str71 = settings66.get("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings66.getGroups("_na_");
        java.lang.String str75 = settings66.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version78 = indexMetaData77.getCreationVersion();
        org.elasticsearch.Version version79 = settings66.getAsVersion("primary_terms", version78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder33.put("index.blocks.metadata", version78);
        org.elasticsearch.Version version81 = settings13.getAsVersion("index.data_path", version78);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue84 = settings13.getAsMemory("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a] with value [index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(version53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(version78);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(version81);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        boolean boolean14 = indexSettings12.isQueryStringLenient();
        java.lang.String str15 = indexSettings12.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean18 = indexSettings12.isIndexUsingShadowReplicas();
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        int int20 = indexSettings12.getNumberOfReplicas();
        int int21 = indexSettings12.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet14 = settings8.names();
        java.lang.String[] strArray16 = settings8.getAsArray("index.");
        java.lang.String[] strArray18 = settings8.getAsArray("index.priority");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        boolean boolean21 = indexScopedSettings0.hasDynamicSetting("index.creation_date");
        boolean boolean23 = indexScopedSettings0.hasDynamicSetting("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put(settings33);
        org.elasticsearch.common.settings.Settings settings38 = settings33.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet39 = settings38.names();
        org.elasticsearch.common.settings.Settings settings41 = settings38.getByPrefix("");
        indexScopedSettings24.validate(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long44 = indexMetaData43.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap45 = indexMetaData43.getMappings();
        org.elasticsearch.common.settings.Settings settings46 = indexMetaData43.getSettings();
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings24.dryRun(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData48.getMappings();
        int int51 = indexMetaData48.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.lang.String str56 = settings54.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getAsGroups();
        java.lang.String str59 = settings54.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings54);
        int int61 = indexSettings60.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings60.getValue(timeValueSetting62);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer64 = null;
        indexScopedSettings24.addSettingsUpdateConsumer(timeValueSetting62, timeValueConsumer64);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting66 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer67 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting62, timeValueSetting66, timeValueBiConsumer67);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting70 = indexScopedSettings0.get("hi!");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValueSetting66);
        org.junit.Assert.assertNull(wildcardSetting70);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher15 = indexSettings12.getParseFieldMatcher();
        java.lang.String str16 = indexSettings12.getUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read=nullaindex.blocks.read_only=nullaindex.blocks.readprimary_terms=index.number_of_replicasa");
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str19 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        int int15 = indexSettings12.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAlias("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.creationDate(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.blocks.read]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.isShadowReplicaIndex();
        int int19 = indexSettings12.getNumberOfShards();
        boolean boolean20 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int3 = indexMetaData2.getTotalNumberOfShards();
        org.elasticsearch.Version version4 = indexMetaData2.getCreationVersion();
        int int5 = indexMetaData2.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData2.getSettings();
        int int7 = indexMetaData2.getTotalNumberOfShards();
        boolean boolean9 = indexMetaData2.isSameUUID("_all");
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData2.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.loadFromSource("_all");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder25.put("index.", 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder25.normalizePrefix("index.number_of_shards");
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.put("index.version.minimum_compatible", (long) '4', timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("state-", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.numberOfShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder18.mapping("10");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mappingMetaData24);
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.loadFromSource("100.0");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put(settings24);
        java.lang.String[] strArray45 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder18.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList46);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder18.put("index.version.created", (double) '#');
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.common.settings.Settings settings62 = settings60.filter(strPredicate61);
        java.lang.String str64 = settings62.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder56.put(settings62);
        org.elasticsearch.common.settings.Settings settings67 = settings62.getByPrefix("index.shadow_replicas");
        java.lang.String str70 = settings62.get("hi!", "");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings62.getGroups("index.number_of_shards", false);
        java.lang.String[] strArray75 = settings62.getAsArray("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long77 = indexMetaData76.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap78 = indexMetaData76.getMappings();
        int int79 = indexMetaData76.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap80 = indexMetaData76.getActiveAllocationIds();
        org.elasticsearch.Version version81 = indexMetaData76.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData76.requireFilters();
        long long83 = indexMetaData76.getCreationDate();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings84.filter(strPredicate85);
        java.lang.String str88 = settings86.toDelimitedString('#');
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData76, settings86);
        java.util.Map<java.lang.String, java.lang.String> strMap90 = settings86.getAsMap();
        java.lang.String[] strArray92 = new java.lang.String[] {};
        java.lang.String[] strArray94 = settings86.getAsArray("", strArray92, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder18.put("10", "index.uuid", strArray75, strArray94);
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder15.put((java.lang.Object[]) strArray75);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap80);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData7.getMappings();
        int int10 = indexMetaData7.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData7.activeAllocationIds((int) (short) -1);
        int int13 = indexMetaData7.getNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        java.lang.String str15 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.creationDate((long) (byte) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.Version version18 = indexSettings12.getIndexVersionCreated();
        int int19 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getTranslogSyncInterval();
        int int21 = indexSettings12.getMaxResultWindow();
        boolean boolean22 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean23 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean24 = indexSettings12.isShadowReplicaIndex();
        org.apache.lucene.index.MergePolicy mergePolicy25 = indexSettings12.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mergePolicy25);
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.read=nullaindex.blocks.read_only=nullaindex.blocks.readprimary_terms=index.number_of_replicasa");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.read=nullaindex.blocks.read_only=nullaindex.blocks.readprimary_terms=index.number_of_replicasa]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData1.getMappings();
        int int4 = indexMetaData1.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.lang.String str9 = settings7.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getAsGroups();
        java.lang.String str12 = settings7.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings7);
        int int14 = indexSettings13.getMaxResultWindow();
        boolean boolean15 = indexSettings13.isQueryStringAnalyzeWildcard();
        java.lang.String str16 = indexSettings13.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings13.getMergeSchedulerConfig();
        java.lang.String str18 = indexSettings13.customDataPath();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.getNodeSettings();
        indexScopedSettings0.validate(settings19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings23.getAsGroups();
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings23.getAsMap();
        org.elasticsearch.common.settings.Settings settings29 = settings23.getByPrefix("index.");
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings23);
        indexScopedSettings0.validate(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData3.getMappings();
        int int5 = indexMetaData3.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData3.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData14.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData14.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData14.mappingOrDefault("index.");
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData14.getSettings();
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings22);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        boolean boolean28 = indexScopedSettings0.hasDynamicSetting("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(settings37);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder31.putArray("", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (int) (byte) -1);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "index.version.created", "index.blocks.read", "index.number_of_shards", "index.priority", "active_allocations", "_all", "hi!", "index.data_path", "", "index.data_path", "index.version.created_string", "index.shadow_replicas", "index.", "archived.", "index.shared_filesystem", "index.version.created", "index.number_of_replicas", "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder53.putArray("state-", (java.util.List<java.lang.String>) strList78);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [.0]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.state(state4);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.primaryTerm((int) '4', (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getNumberOfShards();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean18 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        boolean boolean20 = indexSettings12.isDefaultAllowUnmappedFields();
        int int21 = indexSettings12.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getRefreshInterval();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.index("index.version.upgraded");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.numberOfReplicas((int) (byte) 10);
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.index("index.version.upgraded");
        int int22 = builder21.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder1.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder1.putCustom(".0=index.auto_expand_replicas4.1=index.shared_filesystem.recover_on_any_node4.2=index.4.3=index.auto_expand_replicas4.4=index.4index.=-14index.auto_expand_replicas.0=index.auto_expand_replicas4index.auto_expand_replicas.1=index.shared_filesystem.recover_on_any_node4index.auto_expand_replicas.2=index.4index.auto_expand_replicas.3=index.auto_expand_replicas4index.auto_expand_replicas.4=index.4index.shadow_replicas=1004index.version.upgraded_string=index.shared_filesystem4primary_terms=index.number_of_replicas4", custom32);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version7 = null;
        org.elasticsearch.Version version8 = settings2.getAsVersion("index.creation_date_string", version7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings2.getAsMap();
        java.lang.String str12 = settings2.get("index.number_of_replicas", "index.auto_expand_replicas");
        java.lang.Boolean boolean15 = settings2.getAsBoolean("index.version.created", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings17 = settings2.getAsSettings("index.blocks.read");
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings2);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.auto_expand_replicas" + "'", str12, "index.auto_expand_replicas");
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder2.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList30);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder2.put("index.version.created", (double) '#');
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder39 = builder35.put("index.blocks.read.0=index.number_of_shards4index.blocks.readprimary_terms=index.number_of_replicas4index.number_of_shards=org.elasticsearch.cluster.metadata.IndexMetaData$Builder4", (long) 0, byteSizeUnit38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getAsGroups();
        java.lang.String str7 = settings2.get("index.blocks.read");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings2.getAsGroups(true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData7.getMappings();
        int int10 = indexMetaData7.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getAsGroups();
        java.lang.String str18 = settings13.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings13);
        int int20 = indexSettings19.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting21 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings19.getValue(timeValueSetting21);
        boolean boolean23 = indexSettings19.isWarmerEnabled();
        java.lang.String str24 = indexSettings19.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy25 = indexSettings19.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings19.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue27 = settings2.getAsTime("_all", timeValue26);
        org.elasticsearch.common.settings.Settings settings29 = settings2.getByPrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        java.lang.String str32 = settings30.get("index.uuid");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_na_" + "'", str24, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.put(settings16);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = settings16.getAsMap();
        java.lang.String str23 = settings16.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings25 = settings16.getAsSettings("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData27.getMappings();
        int int30 = indexMetaData27.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings33.getAsGroups();
        java.lang.String str38 = settings33.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        int int40 = indexSettings39.getMaxResultWindow();
        boolean boolean41 = indexSettings39.isQueryStringAnalyzeWildcard();
        boolean boolean42 = indexSettings39.isTTLPurgeDisabled();
        boolean boolean43 = indexSettings39.isWarmerEnabled();
        boolean boolean44 = indexSettings39.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability45 = indexSettings39.getTranslogDurability();
        boolean boolean46 = indexSettings39.isQueryStringLenient();
        boolean boolean47 = indexSettings39.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability48 = indexSettings39.getTranslogDurability();
        boolean boolean49 = indexSettings39.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings39.getGlobalCheckpointInterval();
        boolean boolean51 = indexSettings39.isOnSharedFilesystem();
        boolean boolean52 = indexSettings39.isQueryStringAllowLeadingWildcard();
        boolean boolean53 = settings25.equals((java.lang.Object) indexSettings39);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "primary_terms" + "'", str23, "primary_terms");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10000 + "'", int40 == 10000);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + durability45 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability45.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + durability48 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability48.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder44.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder44.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = builder44.mapping("5000099");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder44.creationDate((long) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData7.getMappings();
        int int10 = indexMetaData7.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getAsGroups();
        java.lang.String str18 = settings13.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings13);
        int int20 = indexSettings19.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig21 = indexSettings19.getMergeSchedulerConfig();
        boolean boolean22 = indexSettings19.hasCustomDataPath();
        int int23 = indexSettings19.getNumberOfReplicas();
        boolean boolean24 = indexSettings19.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings19.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings19.getRefreshInterval();
        int int27 = indexSettings19.getNumberOfReplicas();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings19.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexMetaData0.fromXContent(xContentParser6, parseFieldMatcher28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.Version version5 = indexMetaData3.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        org.apache.lucene.util.Version version7 = indexMetaData3.getMinimumCompatibleVersion();
        long long8 = indexMetaData3.getCreationDate();
        int int9 = indexMetaData3.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        java.lang.String str17 = indexSettings12.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy18 = indexSettings12.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(mergePolicy18);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData17.getMappings();
        int int20 = indexMetaData17.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = indexMetaData17.getActiveAllocationIds();
        org.elasticsearch.Version version22 = indexMetaData17.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData17.requireFilters();
        long long24 = indexMetaData17.getCreationDate();
        org.elasticsearch.Version version25 = indexMetaData17.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue30 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue31 = settings26.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue30);
        java.lang.Boolean boolean34 = settings26.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings36 = settings26.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings26);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap38 = indexMetaData17.getMappings();
        boolean boolean39 = indexMetaData16.equals((java.lang.Object) indexMetaData17);
        org.elasticsearch.Version version40 = indexMetaData16.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(sizeValue31);
        org.junit.Assert.assertEquals("'" + boolean34 + "' != '" + false + "'", boolean34, false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(version40);
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.Boolean boolean16 = settings10.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = settings10.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings10.getAsSize("state-", sizeValue19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings10.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.lang.String str30 = settings28.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings28.getAsGroups(false);
        java.lang.String str35 = settings28.get("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap39 = indexMetaData37.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData37.mapping("index.creation_date_string");
        org.elasticsearch.Version version42 = indexMetaData37.getCreationVersion();
        org.elasticsearch.Version version43 = settings28.getAsVersion("state-", version42);
        org.elasticsearch.Version version44 = settings10.getAsVersion("hi!", version43);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(version44);
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet30 = settings24.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder13.putActiveAllocationIds(1, strSet30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder13.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom35 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder13.putCustom("", custom35);
        long long37 = builder36.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean16 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version17 = indexSettings12.getIndexVersionCreated();
        int int18 = indexSettings12.getNumberOfShards();
        boolean boolean19 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put("index.", true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData12.getMappings();
        int int14 = indexMetaData12.getNumberOfShards();
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings16);
        org.elasticsearch.Version version18 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.put("index.version.minimum_compatible", version18);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.blocks.metadata", 0.0f);
        java.lang.String str24 = builder19.get("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.state(state28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.settings(settings30);
        boolean boolean34 = settings30.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder19.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder13.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData38.getMappings();
        int int40 = indexMetaData38.getNumberOfShards();
        long long41 = indexMetaData38.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = indexScopedSettings0.copy(settings30, indexMetaData38);
        java.lang.String str43 = indexScopedSettings0.nodeName();
        boolean boolean45 = indexScopedSettings0.hasDynamicSetting("index.version.created_string");
        org.elasticsearch.common.settings.Setting.Property property46 = indexScopedSettings0.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int48 = indexMetaData47.getTotalNumberOfShards();
        org.elasticsearch.Version version49 = indexMetaData47.getCreationVersion();
        long long50 = indexMetaData47.getVersion();
        org.elasticsearch.common.settings.Settings settings51 = indexMetaData47.getSettings();
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings0.applySettings(settings51);
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("index.blocks.read");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings54.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + property46 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property46.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str15 = settings10.get("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings10.getGroups("_na_");
        java.lang.String str19 = settings10.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version22 = indexMetaData21.getCreationVersion();
        org.elasticsearch.Version version23 = settings10.getAsVersion("primary_terms", version22);
        org.elasticsearch.common.settings.Settings settings25 = settings10.getByPrefix("index.version.created_string");
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = settings10.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData28.getMappings();
        int int30 = indexMetaData28.getNumberOfShards();
        long long31 = indexMetaData28.getCreationDate();
        org.elasticsearch.Version version32 = indexMetaData28.getUpgradedVersion();
        org.elasticsearch.Version version33 = settings10.getAsVersion("hi!", version32);
        java.util.Set<java.lang.String> strSet34 = settings10.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings10.getAsGroups();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.Version version5 = indexMetaData3.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        long long11 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.uuid", "index.blocks.write");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.version((long) 1);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder8.settings(settings11);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings11.getAsSize("index.number_of_shards", sizeValue16);
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.common.settings.Settings settings19 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        boolean boolean14 = indexSettings12.isQueryStringLenient();
        java.lang.String str15 = indexSettings12.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        boolean boolean19 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData15.getMappings();
        int int18 = indexMetaData15.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings21.getAsGroups();
        java.lang.String str26 = settings21.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21);
        int int28 = indexSettings27.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getValue(timeValueSetting29);
        boolean boolean31 = indexSettings27.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings27.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData33.getMappings();
        int int36 = indexMetaData33.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.lang.String str41 = settings39.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings39.getAsGroups();
        java.lang.String str44 = settings39.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        int int46 = indexSettings45.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting47 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings45.getValue(timeValueSetting47);
        org.elasticsearch.common.unit.TimeValue timeValue49 = indexSettings27.getValue(timeValueSetting47);
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings12.getValue(timeValueSetting47);
        boolean boolean51 = indexSettings12.isDefaultAllowUnmappedFields();
        int int52 = indexSettings12.getMaxResultWindow();
        boolean boolean53 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher54 = indexSettings12.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher54);
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.hasCustomDataPath();
        java.lang.String str18 = indexSettings12.customDataPath();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings12.getNodeSettings();
        org.apache.lucene.index.MergePolicy mergePolicy20 = indexSettings12.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(mergePolicy20);
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        long long6 = indexMetaData3.primaryTerm(0);
        org.apache.lucene.util.Version version7 = indexMetaData3.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version8 = indexMetaData3.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData3.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        boolean boolean12 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.putCustom("", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.state(state25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.settings(settings27);
        java.lang.Boolean boolean33 = settings27.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = settings27.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue36 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue37 = settings27.getAsSize("state-", sizeValue36);
        org.elasticsearch.common.unit.TimeValue timeValue39 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue40 = settings27.getAsTime("index.version.upgraded_string", timeValue39);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue43 = settings27.getAsBytesSize("index.blocks.write", byteSizeValue42);
        org.elasticsearch.common.unit.SizeValue sizeValue45 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue46 = settings27.getAsSize("", sizeValue45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder16.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.removeAlias("hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + boolean33 + "' != '" + false + "'", boolean33, false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(sizeValue37);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNull(byteSizeValue43);
        org.junit.Assert.assertNull(sizeValue46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        java.lang.String str17 = indexMetaData16.getIndexUUID();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData16.getSettings();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings settings32 = settings27.getByPrefix("index.shadow_replicas");
        java.lang.String str35 = settings27.get("hi!", "");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings38.getAsGroups();
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version43 = null;
        org.elasticsearch.Version version44 = settings38.getAsVersion("index.creation_date_string", version43);
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings46 = settings38.filter(strPredicate45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue52 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue53 = settings48.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings47.dryRun(settings54);
        java.lang.String str56 = indexScopedSettings47.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting57 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer58 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(timeValueSetting57, timeValueConsumer58, timeValueConsumer59);
        java.lang.String str61 = indexScopedSettings47.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting63 = indexScopedSettings47.get("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings27, strPredicate45, indexScopedSettings47);
        int int65 = indexMetaData16.getTotalNumberOfShards();
        int int66 = indexMetaData16.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings67 = indexMetaData16.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(version44);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(sizeValue53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(timeValueSetting57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(wildcardSetting63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(settings67);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        long long7 = indexMetaData0.getVersion();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str15 = indexSettings12.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str17 = indexSettings12.customDataPath();
        java.lang.String str18 = indexSettings12.customDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups();
        java.lang.String str30 = settings25.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25);
        int int32 = indexSettings31.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings31.getValue(timeValueSetting33);
        boolean boolean35 = indexSettings31.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings31.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData37.getMappings();
        int int40 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getAsGroups();
        java.lang.String str48 = settings43.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43);
        int int50 = indexSettings49.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting51 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings49.getValue(timeValueSetting51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings31.getValue(timeValueSetting51);
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings12.getValue(timeValueSetting51);
        org.elasticsearch.common.settings.Settings settings55 = indexSettings12.getNodeSettings();
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder58.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray74 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder66.putArray("index.auto_expand_replicas", strArray74);
        java.lang.String[] strArray77 = settings55.getAsArray("index.data_path", strArray74, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings55.getGroups("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strMap79);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData3.getMappings();
        int int6 = indexMetaData3.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData3.getActiveAllocationIds();
        org.elasticsearch.Version version8 = indexMetaData3.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData3.requireFilters();
        long long10 = indexMetaData3.getCreationDate();
        org.elasticsearch.Version version11 = indexMetaData3.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings12.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue16);
        java.lang.Boolean boolean20 = settings12.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings22 = settings12.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap24 = indexMetaData3.getMappings();
        int int25 = indexMetaData3.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData3);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData3.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData3.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.state(state28);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = builder29.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings settings30 = settings25.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet31 = settings30.names();
        java.lang.String[] strArray33 = settings30.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        long long36 = builder35.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        org.apache.lucene.index.MergePolicy mergePolicy20 = indexSettings12.getMergePolicy();
        long long21 = indexSettings12.getGcDeletesInMillis();
        boolean boolean22 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(mergePolicy20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 60000L + "'", long21 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        boolean boolean15 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(version16);
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("index.auto_expand_replicas", strArray16);
        java.lang.String str19 = builder17.get("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.put("index.data_path", (long) 10);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder24 = builder22.put(objDictionary23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.Version version5 = indexMetaData3.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        boolean boolean17 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str18 = indexSettings12.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        org.apache.lucene.util.Version version20 = indexMetaData19.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData19.mapping("index.blocks.write");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_all" + "'", str18, "_all");
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNull(mappingMetaData22);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        int int15 = indexSettings12.getMaxRescoreWindow();
        java.lang.String str16 = indexSettings12.getNodeName();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        boolean boolean18 = indexSettings12.isQueryStringLenient();
        int int19 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getTranslogSyncInterval();
        boolean boolean21 = indexSettings12.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData7.getMappings();
        int int9 = indexMetaData7.getNumberOfShards();
        long long10 = indexMetaData7.getCreationDate();
        org.elasticsearch.Version version11 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData7.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData7.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        int int17 = indexSettings12.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.Version version19 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        java.lang.String str19 = indexSettings12.getUUID();
        int int20 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        boolean boolean19 = indexSettings12.matchesIndexName("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData20.mapping("index.version.upgraded_string");
        org.elasticsearch.index.Index index23 = indexMetaData20.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData20.readDiffFrom(streamInput24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNull(index23);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        long long2 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = indexMetaData0.readFrom(streamInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(version4);
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = indexMetaData0.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.number_of_shards");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings36.getAsGroups();
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version41 = null;
        org.elasticsearch.Version version42 = settings36.getAsVersion("index.creation_date_string", version41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings36.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction45 = null;
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder30.putProperties(strMap43, strPredicate44, strFunction45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder16.put(strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder47.put("_na_", (long) (short) 10);
        java.lang.Object[] objArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder53 = builder47.put(objArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNull(version42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        int int8 = indexMetaData0.getNumberOfShards();
        boolean boolean10 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) 1);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.settings(settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.state(state10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putCustom("state-", custom17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder15.version((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap24 = indexMetaData23.getMappings();
        int int25 = indexMetaData23.getNumberOfShards();
        long long26 = indexMetaData23.getVersion();
        org.elasticsearch.index.Index index27 = indexMetaData23.getMergeSourceIndex();
        int int28 = indexMetaData23.getNumberOfShards();
        long long29 = indexMetaData23.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData23.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder15.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.state(state30);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNull(index27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        long long16 = indexSettings12.getGcDeletesInMillis();
        int int17 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 60000L + "'", long16 == 60000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.put(settings16);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = settings16.getAsMap();
        java.lang.String str23 = settings16.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings25 = settings16.getAsSettings("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings25);
        org.elasticsearch.common.settings.Settings settings28 = settings25.getByPrefix("_na_");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings25.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings25.getGroups("5000099");
        java.lang.String str33 = settings25.toDelimitedString(' ');
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "primary_terms" + "'", str23, "primary_terms");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getRefreshInterval();
        boolean boolean16 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean17 = indexSettings12.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getAsGroups();
        java.lang.String str31 = settings26.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        int int33 = indexSettings32.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings32.getValue(timeValueSetting34);
        boolean boolean36 = indexSettings32.isWarmerEnabled();
        java.lang.String str37 = indexSettings32.getUUID();
        java.lang.String str38 = indexSettings32.getUUID();
        org.elasticsearch.Version version39 = indexSettings32.getIndexVersionCreated();
        org.elasticsearch.Version version40 = settings18.getAsVersion("index.creation_date_string", version39);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_na_" + "'", str37, "_na_");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_na_" + "'", str38, "_na_");
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertNotNull(version40);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.index("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder9.creationDate((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.shared_filesystem]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        int int20 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        long long24 = indexMetaData21.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int26 = indexMetaData25.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData21.diff(indexMetaData25);
        long long28 = indexMetaData21.getVersion();
        int int29 = indexMetaData21.getNumberOfShards();
        int int30 = indexMetaData21.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData21.getInitialRecoveryFilters();
        int int32 = indexMetaData21.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData21.includeFilters();
        org.elasticsearch.Version version34 = indexMetaData21.getUpgradedVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData19.diff(indexMetaData21);
        int int36 = indexMetaData21.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.put(settings14);
        org.elasticsearch.common.settings.Settings settings19 = settings14.getByPrefix("index.shadow_replicas");
        java.lang.String str21 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = settings14.getByPrefix("active_allocations");
        java.lang.String str25 = settings23.toDelimitedString('#');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings29.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params32 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = settings29.toXContent(xContentBuilder31, params32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings23.toXContent(xContentBuilder26, params32);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder5, params32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(params32);
        org.junit.Assert.assertNull(xContentBuilder33);
        org.junit.Assert.assertNull(xContentBuilder34);
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.settings.Settings settings13 = indexSettings12.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(settings13);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.read_only", "state-");
        java.lang.String str13 = builder8.get("index.version.created");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getRefreshInterval();
        boolean boolean19 = indexSettings12.isOnSharedFilesystem();
        boolean boolean20 = indexSettings12.isShadowReplicaIndex();
        java.lang.String str21 = indexSettings12.getUUID();
        boolean boolean22 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.lang.String str1 = indexMetaData0.getIndexUUID();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData5.getMappings();
        int int8 = indexMetaData5.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.lang.String str13 = settings11.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getAsGroups();
        java.lang.String str16 = settings11.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        java.lang.String str18 = indexSettings17.getNodeName();
        boolean boolean19 = indexSettings17.isDefaultAllowUnmappedFields();
        boolean boolean20 = indexSettings17.isWarmerEnabled();
        int int21 = indexSettings17.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings17.getNodeSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        long long27 = indexMetaData24.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int29 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff30 = indexMetaData24.diff(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData24.mapping("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData24.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getGroups("index.", true);
        java.lang.String str39 = settings34.get("active_allocations");
        java.lang.String str41 = settings34.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings43 = settings34.getByPrefix("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings45.getGroups("index.shared_filesystem");
        java.lang.String[] strArray51 = settings45.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = null;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        java.lang.String str57 = settings55.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap58 = settings55.getAsMap();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings55);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings61.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings61.toXContent(xContentBuilder63, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings59.toXContent(xContentBuilder60, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings45.toXContent(xContentBuilder52, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = settings43.toXContent(xContentBuilder44, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = settings22.toXContent(xContentBuilder23, params64);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder4, params64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_na_" + "'", str1, "_na_");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994" + "'", str41, "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNull(xContentBuilder68);
        org.junit.Assert.assertNull(xContentBuilder69);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.state(state25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder26.putCustom("", custom32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.version((long) 1);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder35.settings(settings38);
        org.elasticsearch.common.settings.Settings settings43 = settings38.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder26.settings(settings43);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder13.put(settings43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        java.lang.String str57 = settings55.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder49.put(settings55);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder49.putArray("", (java.util.List<java.lang.String>) strList66);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder45.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList66);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder69.put("index.blocks.read_only", "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder72.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder72.put("index.blocks.read", "100.0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = indexSettings12.getFlushThresholdSize();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        int int21 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(timeValue22);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData6.getMappings();
        int int9 = indexMetaData6.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getAsGroups();
        java.lang.String str17 = settings12.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12);
        int int19 = indexSettings18.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings18.getValue(timeValueSetting20);
        boolean boolean22 = indexSettings18.isOnSharedFilesystem();
        java.lang.String str23 = indexSettings18.getUUID();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings18.getNodeSettings();
        java.lang.String[] strArray26 = settings24.getAsArray("index.version.created_string");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings24);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap33 = indexMetaData31.getMappings();
        int int34 = indexMetaData31.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings37.getAsGroups();
        java.lang.String str42 = settings37.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings37);
        java.lang.String str44 = indexSettings43.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = indexSettings43.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff48 = indexMetaData0.diff(indexMetaData45);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData45.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertNotNull(indexMetaDataDiff48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        java.lang.String str19 = indexSettings12.getDefaultField();
        long long20 = indexSettings12.getGcDeletesInMillis();
        boolean boolean21 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60000L + "'", long20 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.putCustom("index.version.created_string", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.state(state19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder20.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.putCustom("state-", custom26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder24.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder29.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.version((long) 1);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder32.settings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.state(state39);
        byte byte41 = state39.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder29.state(state39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder10.state(state39);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 0 + "'", byte41 == (byte) 0);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        java.lang.String str17 = indexSettings12.getUUID();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        int int19 = indexSettings12.getNumberOfReplicas();
        int int20 = indexSettings12.getMaxResultWindow();
        java.lang.String str21 = indexSettings12.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder30.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder30.internalMap();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder30.put(objArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder24.put(objArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder42.put(settings48);
        org.elasticsearch.common.settings.Settings settings53 = settings48.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet54 = settings53.names();
        java.lang.String[] strArray56 = settings53.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder39.put(settings53);
        java.lang.String str59 = builder39.get("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder39.put("index.version.upgraded_string", "index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentParser xContentParser7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getAsGroups();
        java.lang.String str19 = settings14.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings14);
        boolean boolean21 = indexSettings20.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue27 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue28 = settings23.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings22.dryRun(settings29);
        java.lang.String str31 = indexScopedSettings22.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long33 = indexMetaData32.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap34 = indexMetaData32.getMappings();
        int int35 = indexMetaData32.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        java.lang.String str40 = settings38.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getAsGroups();
        java.lang.String str43 = settings38.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings38);
        int int45 = indexSettings44.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting46 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue47 = indexSettings44.getValue(timeValueSetting46);
        boolean boolean48 = indexSettings44.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue49 = indexSettings44.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long51 = indexMetaData50.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap52 = indexMetaData50.getMappings();
        int int53 = indexMetaData50.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        java.lang.String str58 = settings56.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings56.getAsGroups();
        java.lang.String str61 = settings56.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings56);
        int int63 = indexSettings62.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings62.getValue(timeValueSetting64);
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings44.getValue(timeValueSetting64);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer67 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer68 = null;
        indexScopedSettings22.addSettingsUpdateConsumer(timeValueSetting64, timeValueConsumer67, timeValueConsumer68);
        org.elasticsearch.common.unit.TimeValue timeValue70 = indexSettings20.getValue(timeValueSetting64);
        boolean boolean71 = indexSettings20.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher72 = indexSettings20.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = indexMetaData0.fromXContent(xContentParser7, parseFieldMatcher72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(sizeValue28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting46);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertNotNull(timeValue70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher72);
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData1.getMappings();
        int int4 = indexMetaData1.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.lang.String str9 = settings7.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getAsGroups();
        java.lang.String str12 = settings7.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings7);
        int int14 = indexSettings13.getMaxResultWindow();
        boolean boolean15 = indexSettings13.isQueryStringAnalyzeWildcard();
        java.lang.String str16 = indexSettings13.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings13.getMergeSchedulerConfig();
        java.lang.String str18 = indexSettings13.customDataPath();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.getNodeSettings();
        indexScopedSettings0.validate(settings19);
        boolean boolean22 = indexScopedSettings0.hasDynamicSetting("10");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData23.getMappings();
        int int26 = indexMetaData23.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getAsGroups();
        java.lang.String str34 = settings29.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings29);
        int int36 = indexSettings35.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting37 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings35.getValue(timeValueSetting37);
        boolean boolean39 = indexSettings35.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue40 = indexSettings35.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData41.getMappings();
        int int44 = indexMetaData41.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        java.lang.String str49 = settings47.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getAsGroups();
        java.lang.String str52 = settings47.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings47);
        int int54 = indexSettings53.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting55 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getValue(timeValueSetting55);
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings35.getValue(timeValueSetting55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long59 = indexMetaData58.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap60 = indexMetaData58.getMappings();
        int int61 = indexMetaData58.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate63 = null;
        org.elasticsearch.common.settings.Settings settings64 = settings62.filter(strPredicate63);
        java.lang.String str66 = settings64.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings64.getAsGroups();
        java.lang.String str69 = settings64.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings64);
        int int71 = indexSettings70.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting72 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings70.getValue(timeValueSetting72);
        org.elasticsearch.common.unit.TimeValue timeValue74 = indexSettings35.getValue(timeValueSetting72);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer75 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting72, timeValueConsumer75);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting55);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(timeValue74);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        boolean boolean16 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean17 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getRefreshInterval();
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        long long12 = indexMetaData0.getCreationDate();
        org.elasticsearch.index.Index index13 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings68.filter(strPredicate69);
        java.lang.String str72 = settings70.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder64.put(settings70);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = settings70.getAsMap();
        java.lang.String str77 = settings70.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings79 = settings70.getByPrefix("_na_");
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings14.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings70);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = indexSettings81.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "primary_terms" + "'", str77, "primary_terms");
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(indexMetaData82);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.hasCustomDataPath();
        int int16 = indexSettings12.getNumberOfReplicas();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getRefreshInterval();
        java.lang.String str20 = indexSettings12.getNodeName();
        java.lang.String str21 = indexSettings12.getNodeName();
        long long22 = indexSettings12.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings11.getFlushThresholdSize();
        java.lang.String str13 = indexSettings11.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings11.getGlobalCheckpointInterval();
        boolean boolean15 = indexSettings11.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version16 = indexSettings11.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(version16);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher15 = indexSettings12.getParseFieldMatcher();
        java.lang.String str16 = indexSettings12.getUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        boolean boolean19 = indexMetaData17.isSameUUID("_na_");
        org.elasticsearch.common.xcontent.XContentParser xContentParser20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData21.getMappings();
        int int24 = indexMetaData21.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getAsGroups();
        java.lang.String str32 = settings27.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue34 = indexSettings33.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings33.getTranslogSyncInterval();
        boolean boolean36 = indexSettings33.isWarmerEnabled();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher37 = indexSettings33.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = indexMetaData17.fromXContent(xContentParser20, parseFieldMatcher37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(byteSizeValue34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher37);
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings7 = settings5.getByPrefix("index.uuid");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean19 = indexSettings12.matchesIndexName("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        int int21 = indexSettings12.getNumberOfReplicas();
        boolean boolean22 = indexSettings12.isOnSharedFilesystem();
        boolean boolean23 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings12.getSettings();
        boolean boolean26 = indexSettings12.matchesIndexName("state-");
        boolean boolean27 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        java.lang.String str18 = indexSettings12.getUUID();
        java.lang.String str19 = indexSettings12.getUUID();
        boolean boolean20 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings12.getNodeSettings();
        org.elasticsearch.common.unit.SizeValue sizeValue23 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue24 = settings21.getAsSize("index.blocks.write", sizeValue23);
        boolean boolean25 = settings21.isEmpty();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = settings21.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNull(sizeValue24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings8.getAsMap();
        java.lang.String str15 = settings8.get("", "primary_terms");
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings8.getGroups("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "primary_terms" + "'", str15, "primary_terms");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig20 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str21 = indexSettings12.getUUID();
        boolean boolean22 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings9.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue13);
        java.lang.Boolean boolean17 = settings9.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings19 = settings9.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData0.getMappings();
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.version((long) 1);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder25.settings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.state(state32);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder33.settings(settings34);
        java.lang.Boolean boolean40 = settings34.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = settings34.getAsStructuredMap();
        boolean boolean42 = settings34.isEmpty();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = null;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.Settings settings46 = settings44.filter(strPredicate45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings46.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params49 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = settings46.toXContent(xContentBuilder48, params49);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = settings34.toXContent(xContentBuilder43, params49);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + false + "'", boolean40, false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(params49);
        org.junit.Assert.assertNull(xContentBuilder50);
        org.junit.Assert.assertNull(xContentBuilder51);
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = null;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueSetting43, timeValueBiConsumer44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertNotNull(timeValueSetting43);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("_all", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting43 = indexScopedSettings0.get("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting45 = indexScopedSettings0.get("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder46.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.lang.String str56 = settings54.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder48.put(settings54);
        java.lang.String[] strArray64 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder48.putArray("", (java.util.List<java.lang.String>) strList65);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder70.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder70.putNull("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder74.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.Settings settings78 = settings76.filter(strPredicate77);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings78.getAsGroups();
        org.elasticsearch.common.settings.Settings settings81 = settings78.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version83 = null;
        org.elasticsearch.Version version84 = settings78.getAsVersion("index.creation_date_string", version83);
        java.util.function.Predicate<java.lang.String> strPredicate85 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder74.put(settings78);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder74.normalizePrefix("archived.");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [archived..0]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertNull(wildcardSetting43);
        org.junit.Assert.assertNotNull(wildcardSetting45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNull(version84);
        org.junit.Assert.assertNotNull(strPredicate85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        int int20 = indexMetaData18.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData18.readDiffFrom(streamInput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue23 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue24 = settings19.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue23);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings18.dryRun(settings25);
        java.lang.String str27 = indexScopedSettings18.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer29 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer30 = null;
        indexScopedSettings18.addSettingsUpdateConsumer(timeValueSetting28, timeValueConsumer29, timeValueConsumer30);
        java.lang.String str32 = indexScopedSettings18.nodeName();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings35.getAsGroups();
        org.elasticsearch.common.settings.Settings settings38 = settings35.getAsSettings("index.auto_expand_replicas");
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings35);
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings35);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings18.dryRun(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int44 = builder43.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder43.index("index.number_of_shards");
        int int49 = builder48.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.version((long) 1);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder51.settings(settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state58 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder57.state(state58);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.common.settings.Settings settings62 = settings60.filter(strPredicate61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder59.settings(settings60);
        java.lang.Boolean boolean66 = settings60.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap67 = settings60.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue69 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue70 = settings60.getAsSize("state-", sizeValue69);
        org.elasticsearch.common.unit.TimeValue timeValue72 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue73 = settings60.getAsTime("index.version.upgraded_string", timeValue72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder48.settings(settings60);
        boolean boolean75 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData76);
        long long79 = indexMetaData76.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int81 = indexMetaData80.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff82 = indexMetaData76.diff(indexMetaData80);
        long long83 = indexMetaData76.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap84 = indexMetaData76.getAliases();
        org.apache.lucene.util.Version version85 = indexMetaData76.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap86 = indexMetaData76.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = indexScopedSettings18.copy(settings60, indexMetaData76);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting88 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer89 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer90 = null;
        indexScopedSettings87.addSettingsUpdateConsumer(timeValueSetting88, timeValueConsumer89, timeValueConsumer90);
        org.elasticsearch.common.unit.TimeValue timeValue92 = indexSettings12.getValue(timeValueSetting88);
        int int93 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue94 = indexSettings12.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(sizeValue24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state58.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + boolean66 + "' != '" + false + "'", boolean66, false);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNull(sizeValue70);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNull(version85);
        org.junit.Assert.assertNotNull(strImmutableOpenMap86);
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertNotNull(timeValueSetting88);
        org.junit.Assert.assertNotNull(timeValue92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10000 + "'", int93 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue94);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.lang.String str13 = settings11.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder5.put(settings11);
        org.elasticsearch.common.settings.Settings settings16 = settings11.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet17 = settings11.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putActiveAllocationIds(1, strSet17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.index("index.version.created_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.primaryTerm((int) (byte) 100, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("100.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.data_path");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getByPrefix("index.shadow_replicas");
        java.lang.String str36 = settings29.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = settings29.getByPrefix("active_allocations");
        java.lang.String str40 = settings38.toDelimitedString('#');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings44.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params47 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings44.toXContent(xContentBuilder46, params47);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = settings38.toXContent(xContentBuilder41, params47);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings38.getGroups("index.version.created", false);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings38);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        boolean boolean55 = settings38.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(params47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertNull(xContentBuilder49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        java.lang.String str3 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_na_" + "'", str3, "_na_");
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings9.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue13);
        java.lang.Boolean boolean17 = settings9.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings19 = settings9.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData0.getMappings();
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version23 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(version23);
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte21 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder11.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder22.putCustom("active_allocations", custom24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder27.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.version((long) 1);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder33.settings(settings36);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.state(state40);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder41.settings(settings42);
        boolean boolean46 = settings42.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings42.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder31.settings(settings42);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.put("index.blocks.metadata", (-1.0f));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder48.settings(builder60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder25.settings(builder60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder62.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.auto_expand_replicas");
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings17);
        java.lang.String str24 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        org.elasticsearch.common.settings.Settings settings9 = builder5.build();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder5.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder5.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        boolean boolean16 = indexSettings12.isQueryStringLenient();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        java.lang.String str18 = indexSettings12.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean22 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings12.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = indexSettings12.getIndexMetaData();
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings12.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.auto_expand_replicas");
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings2);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings2);
        java.lang.String str10 = settings2.get("index.version.upgraded", "index.uuid");
        boolean boolean11 = settings2.isEmpty();
        java.lang.Boolean boolean14 = settings2.getAsBoolean("index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.uuid" + "'", str10, "index.uuid");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean17 = indexSettings12.matchesIndexName("index.shadow_replicas");
        int int18 = indexSettings12.getNumberOfReplicas();
        java.lang.String str19 = indexSettings12.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        long long6 = indexMetaData0.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isWarmerEnabled();
        java.lang.String str27 = indexSettings22.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy28 = indexSettings22.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings22.getRefreshInterval();
        boolean boolean30 = indexMetaData0.equals((java.lang.Object) indexSettings22);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData0.mapping("-1");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "_na_" + "'", str27, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(mappingMetaData32);
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.version((long) 1);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder31.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.state(state38);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder39.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder39.putCustom("", custom45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.version((long) 1);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder48.settings(settings51);
        org.elasticsearch.common.settings.Settings settings56 = settings51.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder39.settings(settings56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder26.put(settings56);
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.Settings settings68 = settings66.filter(strPredicate67);
        java.lang.String str70 = settings68.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder62.put(settings68);
        java.lang.String[] strArray78 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder62.putArray("", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder58.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder11.putArray("_na_", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder11.loadFromSource("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder85.putNull("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int19 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData17.diff(indexMetaData18);
        org.elasticsearch.Version version21 = indexMetaData18.getUpgradedVersion();
        boolean boolean23 = indexMetaData18.isSameUUID("-1");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder24.primaryTerm((int) (short) 100, 32L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(mappingMetaData26);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.putCustom("index.version.created_string", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version15 = indexMetaData14.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder9.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder9.numberOfReplicas((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        boolean boolean6 = indexMetaData0.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putCustom("index.version.upgraded_string", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version((long) 1);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings17.filter(strPredicate18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder14.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.state(state21);
        byte byte23 = state21.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.state(state21);
        byte byte25 = state21.id();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder2.put("hi!", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.", 100);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.version.upgraded_string", "index.number_of_replicas");
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.loadFromStream("index.creation_date_string", inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings9.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue13);
        java.lang.Boolean boolean17 = settings9.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings19 = settings9.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData0.getMappings();
        org.elasticsearch.index.Index index22 = indexMetaData0.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData0.activeAllocationIds((int) '4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNull(index22);
        org.junit.Assert.assertNull(strSet24);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.put("_na_", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        java.lang.String str17 = settings15.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder9.put(settings15);
        java.lang.String str20 = builder9.get("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder9.put("index.shared_filesystem", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder9.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.version((long) 1);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder28.settings(settings31);
        int int35 = builder28.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.lang.String str46 = settings44.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder38.put(settings44);
        org.elasticsearch.common.settings.Settings settings49 = settings44.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet50 = settings44.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder28.settings(settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder28.state(state52);
        java.lang.Class<?> wildcardClass54 = builder28.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder9.put("index.uuid", (java.lang.Class) wildcardClass54);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder5.put("index.number_of_replicas", (java.lang.Class) wildcardClass54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder56.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings12.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue16);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings11.dryRun(settings18);
        java.lang.String str20 = indexScopedSettings11.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData21.getMappings();
        int int24 = indexMetaData21.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getAsGroups();
        java.lang.String str32 = settings27.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27);
        int int34 = indexSettings33.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting35 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings33.getValue(timeValueSetting35);
        boolean boolean37 = indexSettings33.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue38 = indexSettings33.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long40 = indexMetaData39.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap41 = indexMetaData39.getMappings();
        int int42 = indexMetaData39.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        java.lang.String str47 = settings45.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getAsGroups();
        java.lang.String str50 = settings45.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        int int52 = indexSettings51.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.getValue(timeValueSetting53);
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings33.getValue(timeValueSetting53);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer56 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer57 = null;
        indexScopedSettings11.addSettingsUpdateConsumer(timeValueSetting53, timeValueConsumer56, timeValueConsumer57);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting60 = indexScopedSettings11.get("index.priority");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings61.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue65 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue66 = settings61.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue65);
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings67.filter(strPredicate68);
        java.util.Set<java.lang.String> strSet70 = settings69.names();
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings11.diff(settings61, settings69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder72.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate79 = null;
        org.elasticsearch.common.settings.Settings settings80 = settings78.filter(strPredicate79);
        java.lang.String str82 = settings80.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put(settings80);
        org.elasticsearch.common.settings.Settings settings85 = settings80.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet86 = settings80.names();
        java.lang.String str89 = settings80.get("", "index.version.created");
        java.util.Map<java.lang.String, java.lang.Object> strMap90 = settings80.getAsStructuredMap();
        indexScopedSettings11.validate(settings80);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params93 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = settings80.toXContent(xContentBuilder92, params93);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder10, params93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(wildcardSetting60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(sizeValue66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "index.version.created" + "'", str89, "index.version.created");
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(params93);
        org.junit.Assert.assertNull(xContentBuilder94);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap24 = indexMetaData20.getActiveAllocationIds();
        org.elasticsearch.Version version25 = indexMetaData20.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData20.requireFilters();
        long long27 = indexMetaData20.getCreationDate();
        org.elasticsearch.Version version28 = indexMetaData20.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings29.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue33);
        java.lang.Boolean boolean37 = settings29.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings39 = settings29.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap41 = indexMetaData20.getMappings();
        int int42 = indexMetaData20.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData20.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff44 = indexMetaData19.diff(indexMetaData20);
        long long46 = indexMetaData20.primaryTerm((int) (short) 0);
        org.elasticsearch.common.io.stream.StreamInput streamInput47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff48 = indexMetaData20.readDiffFrom(streamInput47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + false + "'", boolean37, false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(indexMetaDataDiff44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        int int16 = indexSettings12.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher18 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy19 = indexSettings12.getMergePolicy();
        boolean boolean20 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean21 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(parseFieldMatcher18);
        org.junit.Assert.assertNotNull(mergePolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put(settings20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.state(state34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.settings(settings36);
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings36.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder23.put(settings36);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder11.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.put(settings57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder61.put(settings67);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder70.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.Settings settings78 = settings76.filter(strPredicate77);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings78.getAsGroups();
        org.elasticsearch.common.settings.Settings settings81 = settings78.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version83 = null;
        org.elasticsearch.Version version84 = settings78.getAsVersion("index.creation_date_string", version83);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = settings78.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate86 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction87 = null;
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder72.putProperties(strMap85, strPredicate86, strFunction87);
        org.elasticsearch.common.settings.Settings settings89 = settings57.filter(strPredicate86);
        org.elasticsearch.common.settings.Settings settings91 = settings89.getAsSettings("active_allocations");
        org.elasticsearch.common.settings.Settings settings93 = settings89.getByPrefix("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNull(version84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(strPredicate86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings93);
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings0.getScope();
        java.lang.String str10 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings11.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = settings11.toXContent(xContentBuilder13, params14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(params14);
        org.junit.Assert.assertNull(xContentBuilder15);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((-1L));
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.version((long) 1);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        int int17 = indexSettings12.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = indexSettings12.getFlushThresholdSize();
        long long19 = indexSettings12.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 60000L + "'", long19 == 60000L);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        java.lang.String str13 = indexMetaData0.getIndexUUID();
        boolean boolean15 = indexMetaData0.isSameUUID("index.version.upgraded");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData0.mapping("_all");
        long long18 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings27.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings33 = settings27.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings35 = settings27.getAsSettings("primary_terms");
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings37 = settings27.filter(strPredicate36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings37);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(settings37);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.getTranslogDurability();
        boolean boolean22 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability23 = indexSettings12.getTranslogDurability();
        boolean boolean24 = indexSettings12.hasCustomDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings12.getIndexMetaData();
        java.lang.String str26 = indexSettings12.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + durability23 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability23.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder21.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.normalizePrefix("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.auto_expand_replicas", 0);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.lang.String str41 = settings39.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder33.put(settings39);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder42.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder42.put("archived.", 60000L);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder42.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder30.put(strMap48);
        org.elasticsearch.common.settings.Settings settings50 = builder30.build();
        java.lang.String[] strArray59 = new java.lang.String[] { "index.auto_expand_replicas", "0", "index.blocks.write", "index.number_of_shards", "state-", "index.blocks.read=nullaindex.blocks.read_only=nullaindex.blocks.readprimary_terms=index.number_of_replicasa" };
        java.lang.String[] strArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder61 = builder30.put("hi!", "100.0", strArray59, strArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version2 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData14.getMappings();
        int int17 = indexMetaData14.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData14.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings22.getAsGroups();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings22);
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.dryRun(settings22);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings26.getGroups("index.version.upgraded_string", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings26.getGroups("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings35.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue39 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue40 = settings35.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue39);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings34.dryRun(settings41);
        java.lang.String str43 = indexScopedSettings34.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long45 = indexMetaData44.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap46 = indexMetaData44.getMappings();
        int int47 = indexMetaData44.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.Settings settings50 = settings48.filter(strPredicate49);
        java.lang.String str52 = settings50.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getAsGroups();
        java.lang.String str55 = settings50.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50);
        int int57 = indexSettings56.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting58 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings56.getValue(timeValueSetting58);
        boolean boolean60 = indexSettings56.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings56.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long63 = indexMetaData62.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap64 = indexMetaData62.getMappings();
        int int65 = indexMetaData62.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.Settings settings68 = settings66.filter(strPredicate67);
        java.lang.String str70 = settings68.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings68.getAsGroups();
        java.lang.String str73 = settings68.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings68);
        int int75 = indexSettings74.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting76 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue77 = indexSettings74.getValue(timeValueSetting76);
        org.elasticsearch.common.unit.TimeValue timeValue78 = indexSettings56.getValue(timeValueSetting76);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer79 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer80 = null;
        indexScopedSettings34.addSettingsUpdateConsumer(timeValueSetting76, timeValueConsumer79, timeValueConsumer80);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting83 = indexScopedSettings34.get("index.priority");
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap86 = settings84.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue88 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue89 = settings84.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue88);
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate91 = null;
        org.elasticsearch.common.settings.Settings settings92 = settings90.filter(strPredicate91);
        java.util.Set<java.lang.String> strSet93 = settings92.names();
        org.elasticsearch.common.settings.Settings settings94 = indexScopedSettings34.diff(settings84, settings92);
        boolean boolean95 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings84);
        org.elasticsearch.common.settings.Settings settings96 = indexScopedSettings0.diff(settings26, settings84);
        boolean boolean97 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings96);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(sizeValue40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting76);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(timeValue78);
        org.junit.Assert.assertNotNull(wildcardSetting83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNull(sizeValue89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(settings96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings6.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings5.dryRun(settings12);
        org.elasticsearch.common.settings.Settings settings15 = settings12.getByPrefix("index.version.minimum_compatible");
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        boolean boolean13 = indexMetaData0.isSameUUID("index.blocks.write");
        boolean boolean15 = indexMetaData0.isSameUUID("index.number_of_replicas");
        long long16 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.getInitialRecoveryFilters();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = indexMetaData0.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version7 = null;
        org.elasticsearch.Version version8 = settings2.getAsVersion("index.creation_date_string", version7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings10 = settings2.filter(strPredicate9);
        java.lang.String str12 = settings2.get("index.version.minimum_compatible");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.lang.String str24 = settings22.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder16.put(settings22);
        org.elasticsearch.common.settings.Settings settings27 = settings22.getByPrefix("index.shadow_replicas");
        java.lang.String str29 = settings22.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings31 = settings22.getByPrefix("active_allocations");
        java.lang.String str33 = settings31.toDelimitedString('#');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings37.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params40 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = settings37.toXContent(xContentBuilder39, params40);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = settings31.toXContent(xContentBuilder34, params40);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = settings2.toXContent(xContentBuilder13, params40);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(params40);
        org.junit.Assert.assertNull(xContentBuilder41);
        org.junit.Assert.assertNull(xContentBuilder42);
        org.junit.Assert.assertNull(xContentBuilder43);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.version.upgraded]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet14 = settings13.names();
        java.lang.String[] strArray16 = settings13.getAsArray("index.shared_filesystem");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getGroups("index.number_of_replicas");
        java.util.Map<java.lang.String, java.lang.Object> strMap19 = settings13.getAsStructuredMap();
        java.lang.String[] strArray21 = settings13.getAsArray("100");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        int int15 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getAsGroups();
        java.lang.String str23 = settings18.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18);
        int int25 = indexSettings24.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings24.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Settings settings27 = indexSettings24.getSettings();
        java.lang.String str29 = settings27.toDelimitedString('#');
        java.lang.String str32 = settings27.get("index.blocks.write", "active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#" + "'", str29, "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "active_allocations" + "'", str32, "active_allocations");
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String str13 = builder2.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("state-", (int) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder2.put("index.shared_filesystem.recover_on_any_node", (double) 0.0f);
        java.lang.String str21 = builder2.get("index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.lang.String[] strArray10 = new java.lang.String[] { "index.number_of_shards" };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.putArray("archived.", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        int int15 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getAsGroups();
        java.lang.String str23 = settings18.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18);
        java.lang.String str25 = indexSettings24.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexSettings24.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData26.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(settings37);
        org.elasticsearch.common.settings.Settings settings42 = settings37.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet43 = settings42.names();
        java.lang.String[] strArray45 = settings42.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings42);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings42.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder7.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.putNull("state-");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.loadFromSource("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean18 = indexSettings12.matchesIndexName("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.xcontent.XContentParser xContentParser20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData21.getMappings();
        int int24 = indexMetaData21.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getAsGroups();
        java.lang.String str32 = settings27.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27);
        java.lang.String str34 = indexSettings33.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexSettings33.getIndexMetaData();
        java.lang.String str36 = indexSettings33.getNodeName();
        java.lang.String str37 = indexSettings33.getNodeName();
        boolean boolean38 = indexSettings33.isOnSharedFilesystem();
        int int39 = indexSettings33.getMaxResultWindow();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher40 = indexSettings33.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = indexMetaData19.fromXContent(xContentParser20, parseFieldMatcher40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10000 + "'", int39 == 10000);
        org.junit.Assert.assertNotNull(parseFieldMatcher40);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap37 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData0.getInitialRecoveryFilters();
        int int40 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet42 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) -1);
        java.util.Set<java.lang.String> strSet44 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNull(strSet44);
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        java.lang.String str10 = builder5.get("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder5.put("0", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index7 = indexMetaData4.getMergeSourceIndex();
        java.lang.String str8 = indexMetaData4.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData4.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData4.readDiffFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        java.lang.String str4 = builder0.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.loadFromSource("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version((long) 1);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder24.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.state(state31);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder32.settings(settings33);
        java.lang.Boolean boolean39 = settings33.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = settings33.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder20.put(settings33);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder44.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        java.lang.String str54 = settings52.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder46.put(settings52);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder46.putArray("", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder41.putArray("hi!", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder6.putArray("hi!", (java.util.List<java.lang.String>) strList63);
        java.lang.String str69 = builder6.get("index.number_of_shards");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + boolean39 + "' != '" + false + "'", boolean39, false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean24 = indexSettings12.matchesIndexName("index.version.upgraded_string");
        java.lang.String str25 = indexSettings12.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_all" + "'", str25, "_all");
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData9.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getVersion();
        org.elasticsearch.Version version14 = indexMetaData12.getUpgradedVersion();
        boolean boolean15 = indexMetaData9.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap20 = indexMetaData18.getMappings();
        int int21 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getAsGroups();
        java.lang.String str29 = settings24.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        java.lang.String str31 = indexSettings30.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexSettings30.getIndexMetaData();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData32.includeFilters();
        boolean boolean34 = indexMetaData0.equals((java.lang.Object) discoveryNodeFilters33);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings17 = settings13.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        long long22 = indexMetaData19.primaryTerm(0);
        org.elasticsearch.Version version23 = indexMetaData19.getUpgradedVersion();
        org.elasticsearch.Version version24 = settings13.getAsVersion("index.version.upgraded", version23);
        java.lang.Class<?> wildcardClass25 = version24.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("state-", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder14.put("primary_terms", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version((long) 1);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder24.settings(settings27);
        int int31 = builder24.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        java.lang.String str42 = settings40.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put(settings40);
        org.elasticsearch.common.settings.Settings settings45 = settings40.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet46 = settings40.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder24.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.creationDate((-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder47.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.Settings settings60 = settings58.filter(strPredicate59);
        java.lang.String str62 = settings60.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder54.put(settings60);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = settings60.getAsMap();
        java.lang.String str67 = settings60.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings69 = settings60.getByPrefix("_na_");
        java.lang.Boolean boolean72 = settings69.getAsBoolean("_all", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings74 = settings69.getAsSettings("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder47.settings(settings69);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder14.put(settings69);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", 1.0d);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "primary_terms" + "'", str67, "primary_terms");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertEquals("'" + boolean72 + "' != '" + false + "'", boolean72, false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        java.lang.String str17 = indexSettings12.getUUID();
        int int18 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder24.putNull("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder24.put("index.number_of_shards", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("100", 100L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings6.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings5.dryRun(settings12);
        java.lang.String str14 = indexScopedSettings5.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData15.getMappings();
        int int18 = indexMetaData15.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings21.getAsGroups();
        java.lang.String str26 = settings21.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21);
        int int28 = indexSettings27.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings27.getValue(timeValueSetting29);
        boolean boolean31 = indexSettings27.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings27.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData33.getMappings();
        int int36 = indexMetaData33.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.lang.String str41 = settings39.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings39.getAsGroups();
        java.lang.String str44 = settings39.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        int int46 = indexSettings45.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting47 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings45.getValue(timeValueSetting47);
        org.elasticsearch.common.unit.TimeValue timeValue49 = indexSettings27.getValue(timeValueSetting47);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer50 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer51 = null;
        indexScopedSettings5.addSettingsUpdateConsumer(timeValueSetting47, timeValueConsumer50, timeValueConsumer51);
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder53.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.Settings settings61 = settings59.filter(strPredicate60);
        java.lang.String str63 = settings61.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder55.put(settings61);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = settings61.getAsMap();
        java.lang.String str68 = settings61.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings70 = settings61.getByPrefix("_na_");
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings5.applySettings(settings61);
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings61);
        org.elasticsearch.common.settings.Settings settings75 = settings61.getByPrefix("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int78 = indexMetaData77.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData77.requireFilters();
        org.elasticsearch.Version version80 = indexMetaData77.getCreationVersion();
        org.elasticsearch.Version version81 = settings61.getAsVersion("index.shadow_replicas", version80);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "primary_terms" + "'", str68, "primary_terms");
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNotNull(version80);
        org.junit.Assert.assertNotNull(version81);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings10.getAsMap();
        java.lang.String str17 = settings10.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder20.put(settings26);
        java.lang.String[] strArray36 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder20.putArray("", (java.util.List<java.lang.String>) strList37);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.loadFromSource("state-");
        boolean boolean48 = settings10.equals((java.lang.Object) builder45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params50 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = settings10.toXContent(xContentBuilder49, params50);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder1, params50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "primary_terms" + "'", str17, "primary_terms");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(params50);
        org.junit.Assert.assertNull(xContentBuilder51);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String str13 = builder2.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("index.shared_filesystem", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        int int28 = builder21.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(settings37);
        org.elasticsearch.common.settings.Settings settings42 = settings37.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet43 = settings37.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder21.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder21.state(state45);
        java.lang.Class<?> wildcardClass47 = builder21.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder2.put("index.uuid", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder2.put("hi!", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("hi!", 32L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("0");
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.version((long) 1);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.settings(settings16);
        org.elasticsearch.common.settings.Settings settings21 = settings16.getAsSettings("hi!");
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.index("index.version.created");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.putMapping(mappingMetaData30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxRescoreWindow();
        boolean boolean14 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int13 = builder12.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.index("index.version.upgraded");
        int int16 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = builder18.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.version((-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder23.removeAlias("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        java.lang.String str40 = settings38.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder32.put(settings38);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder41.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.version((long) 1);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.Settings settings50 = settings48.filter(strPredicate49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder45.settings(settings48);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.state(state52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder53.settings(settings54);
        java.lang.Boolean boolean60 = settings54.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = settings54.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder41.put(settings54);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder65.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.Settings settings73 = settings71.filter(strPredicate72);
        java.lang.String str75 = settings73.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder67.put(settings73);
        java.lang.String[] strArray83 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder67.putArray("", (java.util.List<java.lang.String>) strList84);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder62.putArray("hi!", (java.util.List<java.lang.String>) strList84);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder87.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder87.put("index.uuid", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder92.put("index.uuid", (long) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder95.put("primary_terms", true);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder99 = builder23.settings(builder95);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + boolean60 + "' != '" + false + "'", boolean60, false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings17 = settings15.getByPrefix("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups();
        java.lang.String str30 = settings25.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25);
        int int32 = indexSettings31.getMaxResultWindow();
        java.lang.String str33 = indexSettings31.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy34 = indexSettings31.getMergePolicy();
        long long35 = indexSettings31.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue36 = indexSettings31.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue37 = settings15.getAsBytesSize("100", byteSizeValue36);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10000 + "'", int32 == 10000);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_na_" + "'", str33, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 60000L + "'", long35 == 60000L);
        org.junit.Assert.assertNotNull(byteSizeValue36);
        org.junit.Assert.assertNotNull(byteSizeValue37);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.upgraded_string", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(settings37);
        org.elasticsearch.common.settings.Settings settings42 = settings37.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.blocks.metadata");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings42.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder25.put(strMap45);
        java.lang.String str48 = builder46.remove("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap51 = indexMetaData50.getMappings();
        int int52 = indexMetaData50.getNumberOfShards();
        long long53 = indexMetaData50.getVersion();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings54);
        org.elasticsearch.Version version56 = indexMetaData50.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder46.put("hi!", version56);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(version56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.getTranslogDurability();
        boolean boolean22 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean23 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings12.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(settings24);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.normalizePrefix("index.blocks.read");
        java.lang.String[] strArray29 = new java.lang.String[] { "index.number_of_shards" };
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder26.putArray("archived.", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder17.extendArray("index.blocks.read", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.version.upgraded_string", (float) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        boolean boolean14 = settings10.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getAsGroups();
        org.elasticsearch.common.unit.SizeValue sizeValue17 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue18 = settings10.getAsSize("index.shadow_replicas", sizeValue17);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.lang.String str30 = settings28.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder22.put(settings28);
        org.elasticsearch.common.settings.Settings settings33 = settings28.getByPrefix("index.shadow_replicas");
        java.lang.String str35 = settings28.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings37 = settings28.getByPrefix("active_allocations");
        java.lang.String str39 = settings37.toDelimitedString('#');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings43.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params46 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = settings43.toXContent(xContentBuilder45, params46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings37.toXContent(xContentBuilder40, params46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = settings10.toXContent(xContentBuilder19, params46);
        org.elasticsearch.common.unit.RatioValue ratioValue52 = settings10.getAsRatio("100", "0");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(sizeValue18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(params46);
        org.junit.Assert.assertNull(xContentBuilder47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertNull(xContentBuilder49);
        org.junit.Assert.assertNotNull(ratioValue52);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        long long6 = indexSettings5.getGcDeletesInMillis();
        long long7 = indexSettings5.getGcDeletesInMillis();
        boolean boolean8 = indexSettings5.isTTLPurgeDisabled();
        int int9 = indexSettings5.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings5.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 60000L + "'", long7 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertNotNull(settings10);
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet23 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.putCustom("index.blocks.read", custom30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder28.creationDate((long) (byte) 0);
        java.lang.String str34 = builder33.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder33.index("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue42 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue43 = settings38.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue42);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings37.dryRun(settings44);
        org.elasticsearch.common.settings.Settings settings47 = settings44.getByPrefix("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder36.settings(settings47);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder48.primaryTerm((int) ' ', (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "primary_terms" + "'", str34, "primary_terms");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(sizeValue43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((-1L));
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("index.version.upgraded_string");
        int int7 = builder1.numberOfShards();
        int int8 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.putCustom("", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.settings(settings21);
        org.elasticsearch.common.settings.Settings settings26 = settings21.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder9.settings(settings26);
        org.elasticsearch.common.settings.Settings settings29 = settings26.getAsSettings("-1");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        long long17 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.requireFilters();
        int int19 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version20 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(version20);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("state-", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfReplicas((int) (byte) 1);
        int int19 = builder18.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.version(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.putCustom("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", custom23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long26 = indexMetaData25.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap27 = indexMetaData25.getMappings();
        int int28 = indexMetaData25.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        java.lang.String str33 = settings31.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getAsGroups();
        java.lang.String str36 = settings31.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings31);
        java.lang.String str38 = indexSettings37.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = indexSettings37.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder42.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.Settings settings50 = settings48.filter(strPredicate49);
        java.lang.String str52 = settings50.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder44.put(settings50);
        org.elasticsearch.common.settings.Settings settings55 = settings50.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet56 = settings55.names();
        java.lang.String[] strArray58 = settings55.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = indexMetaData39.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder24.state(state61);
        int int63 = builder62.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str15 = indexSettings12.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str17 = indexSettings12.getNodeName();
        int int18 = indexSettings12.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexScopedSettings0.get(timeValueSetting27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData29.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long33 = indexMetaData32.getVersion();
        org.elasticsearch.Version version34 = indexMetaData32.getUpgradedVersion();
        boolean boolean35 = indexMetaData29.equals((java.lang.Object) indexMetaData32);
        org.elasticsearch.common.settings.Settings settings36 = indexMetaData32.getSettings();
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings0.dryRun(settings36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings37.getGroups("active_allocations", false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        long long10 = indexMetaData7.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int12 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData7.diff(indexMetaData11);
        long long14 = indexMetaData7.getVersion();
        java.lang.String str15 = indexMetaData7.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData7.getCustoms();
        java.util.Set<java.lang.String> strSet18 = null; // flaky: indexMetaData7.activeAllocationIds((int) '#');
        long long19 = indexMetaData7.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData7);
        int int21 = indexMetaData0.getNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = indexMetaData0.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put(objArray9);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder2.put("index.shadow_replicas", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.auto_expand_replicas", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.version.created", 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData20.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings28.getAsGroups();
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings28);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder13.put(strMap31);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 0);
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder11.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.state(state18);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("state-", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder23.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder23.version((long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        java.lang.String str42 = settings40.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put(settings40);
        java.util.Map<java.lang.String, java.lang.Object> strMap44 = settings40.getAsStructuredMap();
        java.lang.String str46 = settings40.toDelimitedString('a');
        java.util.Set<java.lang.String> strSet47 = settings40.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder30.putActiveAllocationIds((-1), strSet47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder8.putActiveAllocationIds(10, strSet47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.numberOfReplicas(1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder24.putNull("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.loadFromSource("index.version.upgraded");
        java.lang.Class class32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("1", class32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet14 = settings13.names();
        org.elasticsearch.common.settings.Settings settings16 = settings13.getByPrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder20.put(settings26);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = settings26.getAsMap();
        java.lang.String str33 = settings26.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        java.lang.String str44 = settings42.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder36.put(settings42);
        java.lang.String[] strArray52 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder36.putArray("", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.loadFromSource("state-");
        boolean boolean64 = settings26.equals((java.lang.Object) builder61);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params66 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings26.toXContent(xContentBuilder65, params66);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long70 = indexMetaData69.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap71 = indexMetaData69.getMappings();
        int int72 = indexMetaData69.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate74 = null;
        org.elasticsearch.common.settings.Settings settings75 = settings73.filter(strPredicate74);
        java.lang.String str77 = settings75.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings75.getAsGroups();
        java.lang.String str80 = settings75.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings75);
        int int82 = indexSettings81.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig83 = indexSettings81.getMergeSchedulerConfig();
        boolean boolean84 = indexSettings81.hasCustomDataPath();
        boolean boolean85 = indexSettings81.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue86 = indexSettings81.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings81.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue88 = settings26.getAsTime("index.version.created_string", timeValue87);
        org.elasticsearch.common.unit.TimeValue timeValue89 = settings13.getAsTime("_all", timeValue87);
        org.elasticsearch.common.settings.Settings settings91 = settings13.getAsSettings("1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "primary_terms" + "'", str33, "primary_terms");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(params66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertNotNull(timeValue87);
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertNotNull(settings91);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        java.lang.String str17 = settings15.toDelimitedString('#');
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.auto_expand_replicas", sizeValue19);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#" + "'", str17, "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index7 = indexMetaData4.getMergeSourceIndex();
        java.lang.String str8 = indexMetaData4.getIndexUUID();
        long long9 = indexMetaData4.getCreationDate();
        org.elasticsearch.index.Index index10 = indexMetaData4.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.lang.String str13 = settings11.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder5.put(settings11);
        org.elasticsearch.common.settings.Settings settings16 = settings11.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet17 = settings11.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putActiveAllocationIds(1, strSet17);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.putAlias(aliasMetaData19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getByPrefix("index.shadow_replicas");
        java.lang.String str36 = settings29.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = settings29.getByPrefix("active_allocations");
        java.lang.String str40 = settings38.toDelimitedString('#');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings44.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params47 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings44.toXContent(xContentBuilder46, params47);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = settings38.toXContent(xContentBuilder41, params47);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings38.getGroups("index.version.created", false);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings38);
        boolean boolean55 = indexSettings53.matchesIndexName("index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(params47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertNull(xContentBuilder49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        boolean boolean17 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        long long19 = indexSettings12.getGcDeletesInMillis();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        int int21 = indexSettings12.getMaxRescoreWindow();
        java.lang.String str22 = indexSettings12.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 60000L + "'", long19 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.loadFromSource("_all");
        java.lang.String str29 = builder27.get("index.version.upgraded_string");
        java.lang.String str31 = builder27.get("100.0");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder35 = builder27.put("1", 32L, byteSizeUnit34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put("_na_", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("active_allocations", 100.0f);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.putNull("index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("", (float) 1);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        java.lang.String str33 = settings31.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put(settings31);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder25.putArray("", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder18.putArray("index.version.created_string", (java.util.List<java.lang.String>) strList42);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder18.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder18.loadFromSource("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("10", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte21 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder11.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.put(settings35);
        org.elasticsearch.common.settings.Settings settings40 = settings35.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet41 = settings35.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder25.putActiveAllocationIds(1, strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder22.putActiveAllocationIds((int) 'a', strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder22.creationDate((long) 10000);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder22.putAlias(builder46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getNumberOfShards();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData14.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getVersion();
        org.elasticsearch.Version version19 = indexMetaData17.getUpgradedVersion();
        boolean boolean20 = indexMetaData14.equals((java.lang.Object) indexMetaData17);
        org.apache.lucene.util.Version version21 = indexMetaData17.getMinimumCompatibleVersion();
        long long22 = indexMetaData17.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.diff(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("_all");
        java.lang.String str4 = builder3.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) 1);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.state(state13);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder14.putCustom("", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) 1);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder23.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.state(state30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder31.settings(settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putCustom("state-", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder35.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int43 = builder42.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.index("index.version.upgraded");
        int int46 = builder45.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = builder48.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder48.state(state51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder40.state(state51);
        byte byte54 = state51.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder21.state(state51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder21.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap60 = indexMetaData59.getMappings();
        int int61 = indexMetaData59.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData59.getSettings();
        org.apache.lucene.util.Version version63 = indexMetaData59.getMinimumCompatibleVersion();
        int int64 = indexMetaData59.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData59.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder58.state(state65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder3.state(state65);
        byte byte68 = state65.id();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_all" + "'", str4, "_all");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + byte54 + "' != '" + (byte) 0 + "'", byte54 == (byte) 0);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNull(version63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + byte68 + "' != '" + (byte) 0 + "'", byte68 == (byte) 0);
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean17 = indexSettings12.isTTLPurgeDisabled();
        java.lang.String str18 = indexSettings12.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str15 = indexSettings12.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str17 = indexSettings12.customDataPath();
        boolean boolean18 = indexSettings12.hasCustomDataPath();
        java.lang.String str19 = indexSettings12.getDefaultField();
        boolean boolean20 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap15 = indexMetaData13.getMappings();
        int int16 = indexMetaData13.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings17.filter(strPredicate18);
        java.lang.String str21 = settings19.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getAsGroups();
        java.lang.String str24 = settings19.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings19);
        java.lang.String str26 = indexSettings25.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings25.getValue(timeValueSetting27);
        boolean boolean29 = indexSettings25.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings25.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings32 = settings30.getByPrefix("active_allocations");
        java.lang.String[] strArray34 = settings30.getAsArray("index.blocks.read_only");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings30);
        org.elasticsearch.common.settings.Settings settings36 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData37.getMappings();
        int int40 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getAsGroups();
        java.lang.String str48 = settings43.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43);
        int int50 = indexSettings49.getMaxResultWindow();
        java.lang.String str51 = indexSettings49.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability52 = indexSettings49.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher53 = indexSettings49.getParseFieldMatcher();
        boolean boolean54 = indexSettings49.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings49.getGlobalCheckpointInterval();
        long long56 = indexSettings49.getGcDeletesInMillis();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = indexSettings49.getIndexMetaData();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff58 = indexMetaData0.diff(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10000 + "'", int50 == 10000);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "_na_" + "'", str51, "_na_");
        org.junit.Assert.assertTrue("'" + durability52 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability52.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 60000L + "'", long56 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff58);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version37 = indexMetaData0.getMinimumCompatibleVersion();
        int int38 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder16.loadFromSource("index.blocks.read");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.auto_expand_replicas");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        java.lang.String str23 = indexSettings22.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        org.elasticsearch.common.settings.Settings settings26 = indexSettings22.getSettings();
        long long27 = indexSettings22.getGcDeletesInMillis();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexSettings22.getIndexMetaData();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = indexSettings22.getFlushThresholdSize();
        long long30 = indexSettings22.getGcDeletesInMillis();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher31 = indexSettings22.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = indexMetaData0.fromXContent(xContentParser9, parseFieldMatcher31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(byteSizeValue29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 60000L + "'", long30 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher31);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap5 = settings2.getAsMap();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings8.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = settings8.toXContent(xContentBuilder10, params11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings6.toXContent(xContentBuilder7, params11);
        org.elasticsearch.common.settings.Settings settings15 = settings6.getAsSettings("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData17.getMappings();
        int int20 = indexMetaData17.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.lang.String str25 = settings23.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getAsGroups();
        java.lang.String str28 = settings23.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue30 = indexSettings29.getFlushThresholdSize();
        boolean boolean31 = indexSettings29.isQueryStringLenient();
        java.lang.String str32 = indexSettings29.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexSettings29.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings29.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue35 = settings15.getAsTime("index.version.created", timeValue34);
        boolean boolean36 = settings15.isEmpty();
        java.lang.Boolean boolean39 = settings15.getAsBoolean("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNull(xContentBuilder12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(byteSizeValue30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + boolean39 + "' != '" + false + "'", boolean39, false);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getRefreshInterval();
        boolean boolean18 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str19 = indexSettings12.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder21.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder21.put("index.creation_date_string", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder33.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder33.put("index.data_path", 10000);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder33.put("index.blocks.read_only", (long) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        java.lang.String str55 = settings53.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder47.put(settings53);
        org.elasticsearch.common.settings.Settings settings58 = settings53.getByPrefix("index.version.created");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = settings58.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder44.put(strMap59);
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction62 = null;
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder21.putProperties(strMap59, strPredicate61, strFunction62);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings10 = builder9.build();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder9.put("_na_", (long) (byte) 0);
        java.lang.String str15 = builder9.remove("index.priority");
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.put("index.version.minimum_compatible", (long) (short) 100, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getAsGroups();
        java.lang.String str7 = settings2.get("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        long long12 = indexMetaData9.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int14 = indexMetaData13.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData9.diff(indexMetaData13);
        long long16 = indexMetaData9.getVersion();
        int int17 = indexMetaData9.getNumberOfShards();
        int int18 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.Version version20 = indexMetaData9.getCreationVersion();
        org.elasticsearch.Version version21 = settings2.getAsVersion("index.version.minimum_compatible", version20);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = settings2.getAsMemory("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "1");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#] with value [1] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(version21);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        java.lang.String str16 = indexSettings12.getDefaultField();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean18 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings12.getNodeSettings();
        java.lang.String[] strArray21 = null;
        java.lang.String[] strArray23 = settings19.getAsArray("state-", strArray21, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "index.blocks.read_only", "state-", "index.version.upgraded", "index.version.upgraded", "index.version.minimum_compatible", "index.version.upgraded_string", "", "_na_", "index.number_of_shards", "index.auto_expand_replicas" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("index.uuid", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.numberOfReplicas((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.version((long) 1);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder30.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.state(state37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder38.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.putCustom("state-", custom44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder42.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder47.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.version((long) 1);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder50.settings(settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.state(state57);
        byte byte59 = state57.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder47.state(state57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder28.state(state57);
        long long62 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder28.index("primary_terms");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder28.primaryTerm((int) (short) 0, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) 0 + "'", byte59 == (byte) 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings10 = builder9.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada", (float) 10000);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.loadFromSource("index.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.creationDate((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.version((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder12.putMapping("index.version.created_string", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings17.filter(strPredicate18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings19.getAsGroups();
        org.elasticsearch.common.settings.Settings settings22 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings19.getAsVersion("index.creation_date_string", version24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = settings19.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction28 = null;
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder13.putProperties(strMap26, strPredicate27, strFunction28);
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder13.loadFromStream(".0=index.auto_expand_replicas4.1=index.shared_filesystem.recover_on_any_node4.2=index.4.3=index.auto_expand_replicas4.4=index.4index.=-14index.auto_expand_replicas.0=index.auto_expand_replicas4index.auto_expand_replicas.1=index.shared_filesystem.recover_on_any_node4index.auto_expand_replicas.2=index.4index.auto_expand_replicas.3=index.auto_expand_replicas4index.auto_expand_replicas.4=index.4index.shadow_replicas=1004index.version.upgraded_string=index.shared_filesystem4primary_terms=index.number_of_replicas4", inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.lang.String str15 = settings13.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings21 = builder11.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder7.settings(builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.removeAlias("index.shadow_replicas");
        int int25 = builder24.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.primaryTerm((int) ' ', (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean64 = indexSettings12.isIndexUsingShadowReplicas();
        java.lang.String str65 = indexSettings12.getUUID();
        boolean boolean66 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean67 = indexSettings12.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_na_" + "'", str65, "_na_");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(timeValue68);
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        long long10 = indexMetaData7.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int12 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData7.diff(indexMetaData11);
        long long14 = indexMetaData7.getVersion();
        java.lang.String str15 = indexMetaData7.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData7.getCustoms();
        java.util.Set<java.lang.String> strSet18 = null; // flaky: indexMetaData7.activeAllocationIds((int) '#');
        long long19 = indexMetaData7.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData7);
        int int21 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData0.mappingOrDefault("index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(mappingMetaData23);
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder21.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.normalizePrefix("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.auto_expand_replicas", 0);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        java.lang.String str33 = builder30.get("index.version.created");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentParser xContentParser11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        int int15 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getAsGroups();
        java.lang.String str23 = settings18.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18);
        int int25 = indexSettings24.getMaxResultWindow();
        int int26 = indexSettings24.getMaxResultWindow();
        org.apache.lucene.index.MergePolicy mergePolicy27 = indexSettings24.getMergePolicy();
        boolean boolean28 = indexSettings24.isQueryStringLenient();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher29 = indexSettings24.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = indexMetaData0.fromXContent(xContentParser11, parseFieldMatcher29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher29);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder32.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder32.put("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", (int) 'a');
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.put(objDictionary63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        int int15 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        int int17 = indexSettings12.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.putCustom("", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder9.removeAlias("index.data_path");
        java.lang.String str19 = builder18.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder21.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder21.primaryTerm((int) (byte) 100, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "primary_terms" + "'", str19, "primary_terms");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        boolean boolean43 = indexScopedSettings0.hasDynamicSetting("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder44.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        java.lang.String str54 = settings52.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder46.put(settings52);
        org.elasticsearch.common.settings.Settings settings57 = settings52.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings59 = settings57.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings61 = settings57.getAsSettings("hi!");
        indexScopedSettings0.validate(settings57);
        boolean boolean63 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        boolean boolean14 = indexSettings12.isQueryStringLenient();
        java.lang.String str15 = indexSettings12.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean18 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version19 = indexSettings12.getIndexVersionCreated();
        boolean boolean20 = indexSettings12.isTTLPurgeDisabled();
        java.lang.String str21 = indexSettings12.customDataPath();
        boolean boolean22 = indexSettings12.isIndexUsingShadowReplicas();
        boolean boolean23 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.version.created_string");
        java.lang.String str20 = builder18.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.put("index.priority", 60000L);
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData18.mapping("primary_terms");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap22 = indexMetaData18.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData3.getMappings();
        int int5 = indexMetaData3.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData3.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings7.getIndexMetaData();
        boolean boolean9 = indexSettings7.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        java.lang.String str18 = indexSettings12.getUUID();
        java.lang.String str19 = indexSettings12.getNodeName();
        boolean boolean20 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean21 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue22 = indexSettings12.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteSizeValue22);
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.version.upgraded_string", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.lang.String str41 = settings39.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder33.put(settings39);
        org.elasticsearch.common.settings.Settings settings44 = settings39.getByPrefix("index.shadow_replicas");
        java.lang.String str46 = settings39.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings48 = settings39.getByPrefix("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder30.put(settings39);
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        java.lang.String str61 = settings59.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder53.put(settings59);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder62.put("archived.", 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder69 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder69.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.Settings settings77 = settings75.filter(strPredicate76);
        java.lang.String str79 = settings77.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder71.put(settings77);
        java.lang.String[] strArray87 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder71.putArray("", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder67.putArray("", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder30.putArray("", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder30.put("", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        int int17 = indexSettings12.getMaxRescoreWindow();
        int int18 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings12.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData21.getMappings();
        int int24 = indexMetaData21.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getAsGroups();
        java.lang.String str32 = settings27.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27);
        int int34 = indexSettings33.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting35 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings33.getValue(timeValueSetting35);
        int int37 = indexSettings33.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = indexSettings33.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = settings19.getAsBytesSize("index.blocks.write", byteSizeValue38);
        org.elasticsearch.common.unit.SizeValue sizeValue41 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue42 = settings19.getAsSize("active_allocations", sizeValue41);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = settings19.getAsMemory("active_allocations", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [active_allocations] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue38);
        org.junit.Assert.assertNotNull(byteSizeValue39);
        org.junit.Assert.assertNull(sizeValue42);
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.lang.String str25 = settings23.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put(settings23);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.version((long) 1);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder30.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.state(state37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder38.settings(settings39);
        java.lang.Boolean boolean45 = settings39.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = settings39.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder26.put(settings39);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.Settings settings58 = settings56.filter(strPredicate57);
        java.lang.String str60 = settings58.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put(settings58);
        java.lang.String[] strArray68 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder52.putArray("", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder47.putArray("hi!", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder72.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder13.settings(builder73);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder73.put("index.priority", false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + boolean45 + "' != '" + false + "'", boolean45, false);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        boolean boolean15 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        int int17 = indexSettings12.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.version((long) 1);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.settings(settings13);
        int int17 = builder10.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder20.put(settings26);
        org.elasticsearch.common.settings.Settings settings31 = settings26.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet32 = settings26.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder10.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder8.settings(settings26);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings26.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        java.lang.String str16 = indexSettings12.getNodeName();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version19 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(version19);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int19 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData17.diff(indexMetaData18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getByPrefix("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long37 = indexMetaData36.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap38 = indexMetaData36.getMappings();
        int int39 = indexMetaData36.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        java.lang.String str44 = settings42.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings42.getAsGroups();
        java.lang.String str47 = settings42.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings42);
        int int49 = indexSettings48.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting50 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings48.getValue(timeValueSetting50);
        boolean boolean52 = indexSettings48.isOnSharedFilesystem();
        int int53 = indexSettings48.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = indexSettings48.getFlushThresholdSize();
        org.elasticsearch.Version version55 = indexSettings48.getIndexVersionCreated();
        boolean boolean56 = settings29.equals((java.lang.Object) version55);
        java.lang.String[] strArray58 = settings29.getAsArray("100");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData59);
        long long62 = indexMetaData59.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int64 = indexMetaData63.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff65 = indexMetaData59.diff(indexMetaData63);
        long long66 = indexMetaData59.getVersion();
        java.lang.String str67 = indexMetaData59.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap68 = indexMetaData59.getCustoms();
        java.util.Set<java.lang.String> strSet70 = null; // flaky: indexMetaData59.activeAllocationIds((int) '#');
        org.elasticsearch.Version version71 = indexMetaData59.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData59.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData73);
        long long76 = indexMetaData73.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int78 = indexMetaData77.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff79 = indexMetaData73.diff(indexMetaData77);
        long long80 = indexMetaData73.getVersion();
        java.lang.String str81 = indexMetaData73.getIndexUUID();
        org.elasticsearch.Version version82 = indexMetaData73.getCreationVersion();
        java.util.Set<java.lang.String> strSet84 = null; // flaky: indexMetaData73.activeAllocationIds((int) (byte) 100);
        boolean boolean86 = indexMetaData73.isSameUUID("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings87 = indexMetaData73.getSettings();
        long long88 = indexMetaData73.getCreationDate();
        org.apache.lucene.util.Version version89 = indexMetaData73.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff90 = indexMetaData59.diff(indexMetaData73);
        boolean boolean91 = settings29.equals((java.lang.Object) indexMetaData59);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting50);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue54);
        org.junit.Assert.assertNotNull(version55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "_na_" + "'", str67, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap68);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNotNull(version71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "_na_" + "'", str81, "_na_");
        org.junit.Assert.assertNotNull(version82);
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(version89);
        org.junit.Assert.assertNotNull(indexMetaDataDiff90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long18 = builder16.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData7.getMappings();
        int int10 = indexMetaData7.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData7.activeAllocationIds((int) (short) -1);
        int int13 = indexMetaData7.getNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        java.lang.String str15 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("state-");
        int int19 = builder16.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("state-", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.numberOfShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder18.index("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) 1);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings7.filter(strPredicate8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.state(state11);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.settings(settings13);
        java.lang.Boolean boolean19 = settings13.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.lang.Boolean boolean22 = settings13.getAsBoolean("hi!", (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings24 = settings13.filter(strPredicate23);
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int28 = builder27.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder27.index("index.number_of_shards");
        int int33 = builder32.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.version((long) 1);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder35.settings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state42 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.state(state42);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.Settings settings46 = settings44.filter(strPredicate45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder43.settings(settings44);
        java.lang.Boolean boolean50 = settings44.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = settings44.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue53 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue54 = settings44.getAsSize("state-", sizeValue53);
        org.elasticsearch.common.unit.TimeValue timeValue56 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue57 = settings44.getAsTime("index.version.upgraded_string", timeValue56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder32.settings(settings44);
        org.elasticsearch.common.unit.SizeValue sizeValue60 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue61 = settings44.getAsSize("index.auto_expand_replicas", sizeValue60);
        java.util.Set<java.lang.String> strSet62 = settings44.names();
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings0.diff(settings13, settings44);
        org.elasticsearch.common.settings.Settings settings65 = settings44.getAsSettings("index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state42.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + false + "'", boolean50, false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(sizeValue54);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(sizeValue61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings12.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean16 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version17 = indexSettings12.getIndexVersionCreated();
        long long18 = indexSettings12.getGcDeletesInMillis();
        boolean boolean19 = indexSettings12.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy20 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mergePolicy20);
        org.junit.Assert.assertNotNull(timeValue21);
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder6.put(settings12);
        java.lang.String[] strArray22 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder6.putArray("", (java.util.List<java.lang.String>) strList23);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.version.upgraded_string", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        org.elasticsearch.common.settings.Settings settings48 = settings43.getByPrefix("index.shadow_replicas");
        java.lang.String str50 = settings43.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings52 = settings43.getByPrefix("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder34.put(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder3.settings(settings43);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = builder3.mapping("100");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(mappingMetaData56);
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.creation_date_string" + "'", str2, "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shared_filesystem", 0.0d);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue30 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue31 = settings26.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings26);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.dryRun(settings32);
        java.lang.String str34 = indexScopedSettings25.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long36 = indexMetaData35.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap37 = indexMetaData35.getMappings();
        int int38 = indexMetaData35.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        java.lang.String str43 = settings41.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getAsGroups();
        java.lang.String str46 = settings41.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings41);
        int int48 = indexSettings47.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting49 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getValue(timeValueSetting49);
        boolean boolean51 = indexSettings47.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings47.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long54 = indexMetaData53.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap55 = indexMetaData53.getMappings();
        int int56 = indexMetaData53.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        java.lang.String str61 = settings59.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings59.getAsGroups();
        java.lang.String str64 = settings59.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings59);
        int int66 = indexSettings65.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings65.getValue(timeValueSetting67);
        org.elasticsearch.common.unit.TimeValue timeValue69 = indexSettings47.getValue(timeValueSetting67);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer70 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer71 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(timeValueSetting67, timeValueConsumer70, timeValueConsumer71);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting74 = indexScopedSettings25.get("index.priority");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue79 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue80 = settings75.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue79);
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.Settings settings83 = settings81.filter(strPredicate82);
        java.util.Set<java.lang.String> strSet84 = settings83.names();
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings25.diff(settings75, settings83);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder24.put(settings83);
        java.lang.String str88 = builder86.remove("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(sizeValue31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(timeValue69);
        org.junit.Assert.assertNotNull(wildcardSetting74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNull(sizeValue80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int19 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData17.diff(indexMetaData18);
        long long21 = indexMetaData17.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.putCustom("", custom19);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.putMapping(mappingMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexMetaData0.readFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        boolean boolean10 = indexScopedSettings0.hasDynamicSetting("index.shared_filesystem");
        java.lang.String str11 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) 1);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.state(state13);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.settings(settings15);
        java.lang.Boolean boolean21 = settings15.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.lang.Boolean boolean24 = settings15.getAsBoolean("hi!", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings28.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = settings28.toXContent(xContentBuilder30, params31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap34 = indexMetaData33.getMappings();
        int int35 = indexMetaData33.getNumberOfShards();
        long long36 = indexMetaData33.getCreationDate();
        boolean boolean37 = settings28.equals((java.lang.Object) long36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long40 = indexMetaData39.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap41 = indexMetaData39.getMappings();
        int int42 = indexMetaData39.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        java.lang.String str47 = settings45.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getAsGroups();
        java.lang.String str50 = settings45.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        int int52 = indexSettings51.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.getValue(timeValueSetting53);
        int int55 = indexSettings51.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = indexSettings51.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = settings28.getAsBytesSize("state-", byteSizeValue56);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = settings15.getAsBytesSize("index.version.upgraded", byteSizeValue57);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder59 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params60 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = settings15.toXContent(xContentBuilder59, params60);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = indexMetaData0.toXContent(xContentBuilder4, params60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(params31);
        org.junit.Assert.assertNull(xContentBuilder32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue56);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertNotNull(params60);
        org.junit.Assert.assertNull(xContentBuilder61);
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        boolean boolean21 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version22 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(version22);
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        long long10 = indexMetaData7.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int12 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData7.diff(indexMetaData11);
        long long14 = indexMetaData7.getVersion();
        java.lang.String str15 = indexMetaData7.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData7.getCustoms();
        java.util.Set<java.lang.String> strSet18 = null; // flaky: indexMetaData7.activeAllocationIds((int) '#');
        long long19 = indexMetaData7.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.Version version24 = indexMetaData0.getCreationVersion();
        int int25 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("index.auto_expand_replicas", strArray16);
        java.lang.String str19 = builder17.get("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.put("index.data_path", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.lang.String str34 = settings32.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder26.put(settings32);
        org.elasticsearch.common.settings.Settings settings37 = settings32.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet38 = settings37.names();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long41 = indexMetaData40.getVersion();
        org.elasticsearch.Version version42 = indexMetaData40.getUpgradedVersion();
        org.elasticsearch.Version version43 = settings37.getAsVersion("", version42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder22.put("hi!", version42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.version((long) 1);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder47.settings(settings50);
        int int54 = builder47.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate62 = null;
        org.elasticsearch.common.settings.Settings settings63 = settings61.filter(strPredicate62);
        java.lang.String str65 = settings63.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder57.put(settings63);
        org.elasticsearch.common.settings.Settings settings68 = settings63.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet69 = settings63.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder47.settings(settings63);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state71 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder47.state(state71);
        java.lang.Class<?> wildcardClass73 = builder47.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder44.put("", (java.lang.Class) wildcardClass73);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.Settings settings78 = settings76.filter(strPredicate77);
        java.lang.String str80 = settings78.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings78);
        java.lang.String[] strArray83 = settings81.getAsArray("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder74.extendArray("index.blocks.write", strArray83);
        java.lang.String str86 = builder74.remove("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.elasticsearch.common.settings.Settings settings87 = builder74.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state71.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(settings87);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        boolean boolean20 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder5.settings(settings16);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put("index.blocks.metadata", (-1.0f));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder22.settings(builder34);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.put("primary_terms", (int) (byte) 0);
        java.lang.String str40 = builder38.get("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap46 = indexMetaData42.getActiveAllocationIds();
        org.elasticsearch.Version version47 = indexMetaData42.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters48 = indexMetaData42.requireFilters();
        long long49 = indexMetaData42.getCreationDate();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        java.lang.String str54 = settings52.toDelimitedString('#');
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings52);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = settings52.getAsMap();
        java.lang.String[] strArray58 = new java.lang.String[] {};
        java.lang.String[] strArray60 = settings52.getAsArray("", strArray58, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder38.putArray("_all", strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("", (double) (byte) 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100.0" + "'", str40, "100.0");
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap46);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNull(discoveryNodeFilters48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.version((long) 1);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder8.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.state(state15);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings17.filter(strPredicate18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.settings(settings17);
        java.lang.Boolean boolean23 = settings17.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.lang.Boolean boolean26 = settings17.getAsBoolean("hi!", (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings28 = settings17.filter(strPredicate27);
        org.elasticsearch.common.settings.Settings settings29 = settings6.filter(strPredicate27);
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings6, streamOutput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + false + "'", boolean23, false);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + false + "'", boolean26, false);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings12.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings12.getNodeSettings();
        boolean boolean18 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean19 = indexSettings12.isQueryStringAllowLeadingWildcard();
        int int20 = indexSettings12.getMaxRescoreWindow();
        boolean boolean21 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.state(state10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.putCustom("archived.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.numberOfReplicas((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder16.removeAlias("index.blocks.write");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = builder16.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getRefreshInterval();
        java.lang.String str19 = indexSettings12.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getAsGroups();
        java.lang.String str31 = settings26.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        java.lang.String str33 = indexSettings32.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings32.getValue(timeValueSetting34);
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings12.getValue(timeValueSetting34);
        boolean boolean37 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version38 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(timeValueSetting34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(version38);
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.putCustom("", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder9.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap24 = indexMetaData20.getActiveAllocationIds();
        org.elasticsearch.Version version25 = indexMetaData20.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData20.requireFilters();
        long long27 = indexMetaData20.getCreationDate();
        org.elasticsearch.Version version28 = indexMetaData20.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings29.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue33);
        java.lang.Boolean boolean37 = settings29.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings39 = settings29.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap41 = indexMetaData20.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData20.includeFilters();
        java.util.Set<java.lang.String> strSet44 = indexMetaData20.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder9.putActiveAllocationIds((-1), strSet44);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + false + "'", boolean37, false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str15 = indexSettings12.customDataPath();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder37.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.version((long) 1);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.Settings settings46 = settings44.filter(strPredicate45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder41.settings(settings44);
        int int48 = builder41.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate56 = null;
        org.elasticsearch.common.settings.Settings settings57 = settings55.filter(strPredicate56);
        java.lang.String str59 = settings57.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.put(settings57);
        org.elasticsearch.common.settings.Settings settings62 = settings57.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet63 = settings57.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder41.settings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder41.state(state65);
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap68 = settings67.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params70 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = settings67.toXContent(xContentBuilder69, params70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder66.settings(settings67);
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings67);
        java.util.Set<java.lang.String> strSet74 = settings73.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder37.putActiveAllocationIds((int) (byte) 10, strSet74);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(params70);
        org.junit.Assert.assertNull(xContentBuilder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getNodeSettings();
        org.elasticsearch.Version version21 = indexSettings12.getIndexVersionCreated();
        boolean boolean23 = indexSettings12.matchesIndexName("index.blocks.read");
        boolean boolean24 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings settings30 = settings25.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet31 = settings30.names();
        java.lang.String[] strArray33 = settings30.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap35 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData14.includeFilters();
        org.elasticsearch.Version version37 = indexMetaData14.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData14.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.version((long) 1);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.settings(settings13);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "index.blocks.read_only", "state-", "index.version.upgraded", "index.version.upgraded", "index.version.minimum_compatible", "index.version.upgraded_string", "", "_na_", "index.number_of_shards", "index.auto_expand_replicas" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder16.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.putCustom("index.uuid", custom34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.numberOfReplicas((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.version((long) 1);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder39.settings(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.state(state46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.Settings settings50 = settings48.filter(strPredicate49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder47.settings(settings48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder51.putCustom("state-", custom53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder51.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder56.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder59.version((long) 1);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate63 = null;
        org.elasticsearch.common.settings.Settings settings64 = settings62.filter(strPredicate63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder59.settings(settings62);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state66 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder65.state(state66);
        byte byte68 = state66.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder56.state(state66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder37.state(state66);
        byte byte71 = state66.id();
        byte byte72 = state66.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder8.state(state66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder73.index("10");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state66.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + byte68 + "' != '" + (byte) 0 + "'", byte68 == (byte) 0);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) 0 + "'", byte71 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte72 + "' != '" + (byte) 0 + "'", byte72 == (byte) 0);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.lang.String str1 = indexMetaData0.getIndexUUID();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_na_" + "'", str1, "_na_");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(version4);
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("state-", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder14.putNull("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put(settings34);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder28.putArray("", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.normalizePrefix("");
        java.lang.String str54 = builder52.remove("");
        org.elasticsearch.common.settings.Settings settings55 = builder52.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long61 = indexMetaData60.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap62 = indexMetaData60.getMappings();
        int int63 = indexMetaData60.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.Settings settings66 = settings64.filter(strPredicate65);
        java.lang.String str68 = settings66.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getAsGroups();
        java.lang.String str71 = settings66.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings66);
        java.lang.String str73 = indexSettings72.getNodeName();
        boolean boolean74 = indexSettings72.isDefaultAllowUnmappedFields();
        boolean boolean75 = indexSettings72.isWarmerEnabled();
        int int76 = indexSettings72.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings77 = indexSettings72.getNodeSettings();
        java.lang.String[] strArray79 = settings77.getAsArray("100.0");
        java.lang.String[] strArray81 = settings77.getAsArray("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder52.putArray("archived.", strArray81);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder24.extendArray("_na_", strArray81);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings11.getFlushThresholdSize();
        java.lang.String str13 = indexSettings11.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings11.getRefreshInterval();
        java.lang.String str15 = indexSettings11.getNodeName();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings11.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.Version version18 = indexSettings12.getIndexVersionCreated();
        int int19 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.Version version21 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings12.getSettings();
        boolean boolean23 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getNodeSettings();
        boolean boolean16 = indexSettings12.isShadowReplicaIndex();
        java.lang.String str17 = indexSettings12.getUUID();
        java.lang.String str18 = indexSettings12.getUUID();
        boolean boolean19 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean17 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder57.put("index.uuid", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.uuid", (long) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder62.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Set<java.lang.String> strSet18 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.putActiveAllocationIds((int) (byte) 1, strSet18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.version((long) 1);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder28.settings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.state(state35);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder36.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom42 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.putCustom("state-", custom42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder40.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder40.version((long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate56 = null;
        org.elasticsearch.common.settings.Settings settings57 = settings55.filter(strPredicate56);
        java.lang.String str59 = settings57.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.put(settings57);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = settings57.getAsStructuredMap();
        java.lang.String str63 = settings57.toDelimitedString('a');
        java.util.Set<java.lang.String> strSet64 = settings57.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder47.putActiveAllocationIds((-1), strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder23.putActiveAllocationIds((int) (byte) 100, strSet64);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder23.primaryTerm((int) ' ', 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.version.upgraded_string", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder27.put("index.blocks.read", (double) '4');
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder27.put("5000099", (int) (short) 100);
        java.io.InputStream inputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.loadFromStream("", inputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index7 = indexMetaData4.getMergeSourceIndex();
        long long8 = indexMetaData4.getVersion();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData4.getSettings();
        int int10 = indexMetaData4.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData1.getMappings();
        int int4 = indexMetaData1.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.lang.String str9 = settings7.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getAsGroups();
        java.lang.String str12 = settings7.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings7);
        int int14 = indexSettings13.getMaxResultWindow();
        boolean boolean15 = indexSettings13.isQueryStringAnalyzeWildcard();
        java.lang.String str16 = indexSettings13.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings13.getMergeSchedulerConfig();
        java.lang.String str18 = indexSettings13.customDataPath();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings13.getNodeSettings();
        indexScopedSettings0.validate(settings19);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings22.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue26);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings21.dryRun(settings28);
        java.lang.String str30 = indexScopedSettings21.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting31 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer32 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer33 = null;
        indexScopedSettings21.addSettingsUpdateConsumer(timeValueSetting31, timeValueConsumer32, timeValueConsumer33);
        java.lang.String str35 = indexScopedSettings21.nodeName();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings38.getAsGroups();
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("index.auto_expand_replicas");
        boolean boolean42 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings21.dryRun(settings38);
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings44);
        org.elasticsearch.common.settings.Settings settings47 = settings44.getByPrefix("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(timeValueSetting31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder7.mapping("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder14.removeAllAliases();
        java.lang.String str16 = builder14.index();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.version.upgraded" + "'", str16, "index.version.upgraded");
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder44.removeAllAliases();
        long long46 = builder45.version();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue53 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue54 = settings49.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue53);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings48.dryRun(settings55);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings59.getAsGroups();
        org.elasticsearch.common.settings.Settings settings62 = settings59.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = settings59.getAsMap();
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings48.dryRun(settings59);
        java.util.Set<java.lang.String> strSet65 = settings64.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder45.putActiveAllocationIds((int) '#', strSet65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom68 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder66.putCustom("primary_terms", custom68);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(sizeValue54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.state(state10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.putCustom("archived.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("index.blocks.read_only");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shared_filesystem", 0.0d);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue30 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue31 = settings26.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings26);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings25.dryRun(settings32);
        java.lang.String str34 = indexScopedSettings25.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long36 = indexMetaData35.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap37 = indexMetaData35.getMappings();
        int int38 = indexMetaData35.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        java.lang.String str43 = settings41.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getAsGroups();
        java.lang.String str46 = settings41.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings41);
        int int48 = indexSettings47.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting49 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings47.getValue(timeValueSetting49);
        boolean boolean51 = indexSettings47.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings47.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long54 = indexMetaData53.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap55 = indexMetaData53.getMappings();
        int int56 = indexMetaData53.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        java.lang.String str61 = settings59.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings59.getAsGroups();
        java.lang.String str64 = settings59.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings59);
        int int66 = indexSettings65.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings65.getValue(timeValueSetting67);
        org.elasticsearch.common.unit.TimeValue timeValue69 = indexSettings47.getValue(timeValueSetting67);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer70 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer71 = null;
        indexScopedSettings25.addSettingsUpdateConsumer(timeValueSetting67, timeValueConsumer70, timeValueConsumer71);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting74 = indexScopedSettings25.get("index.priority");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings75.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue79 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue80 = settings75.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue79);
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.Settings settings83 = settings81.filter(strPredicate82);
        java.util.Set<java.lang.String> strSet84 = settings83.names();
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings25.diff(settings75, settings83);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder24.put(settings83);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder24.put("index.creation_date", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder24.put(".0=index.auto_expand_replicas4.1=index.shared_filesystem.recover_on_any_node4.2=index.4.3=index.auto_expand_replicas4.4=index.4index.=-14index.auto_expand_replicas.0=index.auto_expand_replicas4index.auto_expand_replicas.1=index.shared_filesystem.recover_on_any_node4index.auto_expand_replicas.2=index.4index.auto_expand_replicas.3=index.auto_expand_replicas4index.auto_expand_replicas.4=index.4index.shadow_replicas=1004index.version.upgraded_string=index.shared_filesystem4primary_terms=index.number_of_replicas4", 10.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(sizeValue31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(timeValue69);
        org.junit.Assert.assertNotNull(wildcardSetting74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNull(sizeValue80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String str13 = builder2.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("index.shared_filesystem", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.shared_filesystem", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.read_only", "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData3.getMappings();
        int int5 = indexMetaData3.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData3.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean8 = indexSettings7.isShadowReplicaIndex();
        org.apache.lucene.index.MergePolicy mergePolicy9 = indexSettings7.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings7.getNodeSettings();
        boolean boolean11 = indexSettings7.isQueryStringLenient();
        int int12 = indexSettings7.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mergePolicy9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet3 = indexMetaData0.activeAllocationIds(0);
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings6.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings5.dryRun(settings12);
        java.lang.String str14 = indexScopedSettings5.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting15 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer16 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer17 = null;
        indexScopedSettings5.addSettingsUpdateConsumer(timeValueSetting15, timeValueConsumer16, timeValueConsumer17);
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings settings32 = settings27.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet33 = settings32.names();
        java.lang.String[] strArray35 = settings32.getAsArray("index.shared_filesystem");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings32.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings32);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        java.lang.String str49 = settings47.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder41.put(settings47);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.version((long) 1);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder54.settings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.state(state61);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.Settings settings65 = settings63.filter(strPredicate64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder62.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap70 = settings63.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder50.put(settings63);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder71.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("index.version.minimum_compatible", 1);
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate78 = null;
        org.elasticsearch.common.settings.Settings settings79 = settings77.filter(strPredicate78);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings79.getAsGroups();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder76.put(settings79);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData82 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long83 = indexMetaData82.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap84 = indexMetaData82.getMappings();
        int int85 = indexMetaData82.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters86 = indexMetaData82.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = indexScopedSettings5.copy(settings79, indexMetaData82);
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate89 = null;
        org.elasticsearch.common.settings.Settings settings90 = settings88.filter(strPredicate89);
        org.elasticsearch.common.settings.Settings settings91 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings88);
        java.lang.String str93 = settings91.get("index.creation_date");
        org.elasticsearch.common.settings.Settings settings94 = indexScopedSettings87.applySettings(settings91);
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings94);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters96 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap97 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(timeValueSetting15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(indexMetaData82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters86);
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNull(discoveryNodeFilters96);
        org.junit.Assert.assertNotNull(strImmutableOpenMap97);
    }

    @Test
    public void test4842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4842");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder4.mapping("primary_terms");
        long long7 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.version(100L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.index("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("-1", custom13);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.putAlias(aliasMetaData15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test4843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4843");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder57.put("index.uuid", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.version.upgraded_string", false);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder62.put("", (double) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test4844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4844");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        boolean boolean17 = indexSettings12.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4845");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData6.getMappings();
        int int9 = indexMetaData6.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getAsGroups();
        java.lang.String str17 = settings12.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12);
        int int19 = indexSettings18.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings18.getValue(timeValueSetting20);
        boolean boolean22 = indexSettings18.isOnSharedFilesystem();
        java.lang.String str23 = indexSettings18.getUUID();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings18.getNodeSettings();
        java.lang.String[] strArray26 = settings24.getAsArray("index.version.created_string");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings24);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test4846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4846");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put(settings20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.state(state34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.settings(settings36);
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings36.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder23.put(settings36);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder11.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.put(settings57);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings57);
        boolean boolean60 = settings57.isEmpty();
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings68.filter(strPredicate69);
        java.lang.String str72 = settings70.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder64.put(settings70);
        org.elasticsearch.common.settings.Settings settings75 = settings70.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet76 = settings75.names();
        java.lang.String[] strArray78 = settings75.getAsArray("index.shared_filesystem");
        java.lang.String[] strArray80 = settings57.getAsArray("hi!", strArray78, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings82 = settings57.getAsSettings("index.data_path");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(settings82);
    }

    @Test
    public void test4847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4847");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test4848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4848");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.number_of_shards");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData0.getMappings();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = indexMetaData0.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test4849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4849");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet23 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.putCustom("index.blocks.read", custom30);
        java.lang.String str32 = builder31.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = builder31.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "primary_terms" + "'", str32, "primary_terms");
    }

    @Test
    public void test4850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4850");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index7 = indexMetaData4.getMergeSourceIndex();
        java.lang.String str8 = indexMetaData4.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData4.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData4.activeAllocationIds((int) (byte) 100);
        long long14 = indexMetaData4.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData15.getMappings();
        int int18 = indexMetaData15.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings21.getAsGroups();
        java.lang.String str26 = settings21.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21);
        int int28 = indexSettings27.getMaxResultWindow();
        java.lang.String str29 = indexSettings27.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability30 = indexSettings27.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings31 = indexSettings27.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData33.getMappings();
        int int36 = indexMetaData33.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.lang.String str41 = settings39.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings39.getAsGroups();
        java.lang.String str44 = settings39.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        java.lang.String str46 = indexSettings45.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting47 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings45.getValue(timeValueSetting47);
        org.elasticsearch.common.unit.TimeValue timeValue49 = indexSettings32.getValue(timeValueSetting47);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_na_" + "'", str29, "_na_");
        org.junit.Assert.assertTrue("'" + durability30 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability30.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(timeValueSetting47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(timeValue49);
    }

    @Test
    public void test4851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4851");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData14.getMappings();
        int int17 = indexMetaData14.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData14.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings22.getAsGroups();
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings22);
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.dryRun(settings22);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.put(settings35);
        org.elasticsearch.common.settings.Settings settings40 = settings35.getByPrefix("index.shadow_replicas");
        java.lang.String str43 = settings35.get("hi!", "");
        java.lang.String str46 = settings35.get("index.data_path", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray64 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder56.putArray("index.auto_expand_replicas", strArray64);
        java.lang.String[] strArray66 = settings35.getAsArray("index.shadow_replicas", strArray64);
        java.lang.String[] strArray68 = settings22.getAsArray("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", strArray64, (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index." + "'", str46, "index.");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test4852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4852");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.lang.String str15 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = settings8.getByPrefix("active_allocations");
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings21 = settings17.getAsSettings("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.elasticsearch.common.settings.Settings settings23 = settings17.getByPrefix("archived.");
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = settings23.getAsStructuredMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test4853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4853");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings11.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("archived.");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings0.dryRun(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version((long) 1);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder17.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.state(state24);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder25.settings(settings26);
        boolean boolean30 = settings26.isEmpty();
        java.lang.String str32 = settings26.get("index.uuid");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = settings26.getAsMap();
        indexScopedSettings0.validate(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        long long39 = indexMetaData36.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int41 = indexMetaData40.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff42 = indexMetaData36.diff(indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData36.mapping("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings46 = indexMetaData36.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings46.getGroups("index.", true);
        java.lang.String str51 = settings46.get("active_allocations");
        java.lang.String str53 = settings46.toDelimitedString('4');
        org.elasticsearch.Version version55 = null;
        org.elasticsearch.Version version56 = settings46.getAsVersion("_na_", version55);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("5000099", settings46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [5000099]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994" + "'", str53, "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNull(version56);
    }

    @Test
    public void test4854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4854");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        int int7 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        int int14 = indexMetaData10.getTotalNumberOfShards();
        org.apache.lucene.util.Version version15 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData16.getMappings();
        int int19 = indexMetaData16.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.lang.String str24 = settings22.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings22.getAsGroups();
        java.lang.String str27 = settings22.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings22);
        int int29 = indexSettings28.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting30 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings28.getValue(timeValueSetting30);
        boolean boolean32 = indexSettings28.isOnSharedFilesystem();
        java.lang.String str33 = indexSettings28.getUUID();
        org.elasticsearch.common.settings.Settings settings34 = indexSettings28.getNodeSettings();
        java.lang.String[] strArray36 = settings34.getAsArray("index.version.created_string");
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData10.excludeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff39 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput40 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_na_" + "'", str33, "_na_");
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(indexMetaDataDiff39);
    }

    @Test
    public void test4855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4855");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        int int14 = builder7.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.lang.String str25 = settings23.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put(settings23);
        org.elasticsearch.common.settings.Settings settings28 = settings23.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet29 = settings23.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder7.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder7.state(state31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder1.state(state31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.numberOfShards(10);
        int int36 = builder35.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test4856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4856");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("state-");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(index8);
    }

    @Test
    public void test4857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4857");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        java.lang.String str23 = indexSettings22.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = indexSettings22.getIndexMetaData();
        org.elasticsearch.Version version25 = indexMetaData24.getUpgradedVersion();
        org.elasticsearch.Version version26 = settings8.getAsVersion("active_allocations", version25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        boolean boolean41 = indexSettings40.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue42 = indexSettings40.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability43 = indexSettings40.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings40.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue45 = settings8.getAsTime("", timeValue44);
        java.lang.String str48 = settings8.get("_na_", "state-");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteSizeValue42);
        org.junit.Assert.assertTrue("'" + durability43 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability43.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "state-" + "'", str48, "state-");
    }

    @Test
    public void test4858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4858");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version12 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings13 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNotNull(settings13);
    }

    @Test
    public void test4859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4859");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher15 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher15);
        org.junit.Assert.assertNotNull(timeValue16);
    }

    @Test
    public void test4860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4860");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        java.lang.String str13 = indexMetaData0.getIndexUUID();
        boolean boolean15 = indexMetaData0.isSameUUID("index.version.upgraded");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData0.mapping("_all");
        long long18 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int20 = indexMetaData19.getTotalNumberOfShards();
        int int21 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        long long25 = indexMetaData22.primaryTerm(0);
        org.apache.lucene.util.Version version26 = indexMetaData22.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version27 = indexMetaData22.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData22.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        boolean boolean31 = indexMetaData19.equals((java.lang.Object) indexMetaData22);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData22.excludeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData0.diff(indexMetaData22);
        int int34 = indexMetaData22.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings35 = indexMetaData22.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNull(version27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(settings35);
    }

    @Test
    public void test4861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4861");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String str13 = builder2.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("state-", (int) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder2.put("index.number_of_shards", (int) ' ');
        java.nio.file.Path path20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.loadFromPath(path20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4862");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.state(state28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.settings(settings30);
        boolean boolean34 = settings30.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder19.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder13.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData38.getMappings();
        int int40 = indexMetaData38.getNumberOfShards();
        long long41 = indexMetaData38.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = indexScopedSettings0.copy(settings30, indexMetaData38);
        org.elasticsearch.common.settings.Setting.Property property43 = indexScopedSettings42.getScope();
        org.elasticsearch.common.settings.Setting.Property property44 = indexScopedSettings42.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        java.lang.String str55 = settings53.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder47.put(settings53);
        org.elasticsearch.common.settings.Settings settings57 = builder47.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings57.getGroups("active_allocations");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings42.applySettings(settings57);
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder63.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap69 = builder63.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder72.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder72.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass77 = builder72.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder63.put("index.number_of_shards", (java.lang.Class) wildcardClass77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder80.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder82.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder82.normalizePrefix("index.blocks.read");
        java.lang.String[] strArray90 = new java.lang.String[] { "index.number_of_shards" };
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder87.putArray("archived.", strArray90);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder78.extendArray("index.blocks.read", strArray90);
        org.elasticsearch.common.settings.Settings settings93 = builder78.build();
        org.elasticsearch.common.unit.SizeValue sizeValue95 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue96 = settings93.getAsSize("index.shadow_replicas", sizeValue95);
        org.elasticsearch.common.settings.Settings settings97 = indexScopedSettings42.dryRun(settings93);
        java.lang.Class<?> wildcardClass98 = settings93.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + property43 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property43.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + property44 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property44.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNull(sizeValue96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test4863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4863");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version7 = null;
        org.elasticsearch.Version version8 = settings2.getAsVersion("index.creation_date_string", version7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings10 = settings2.filter(strPredicate9);
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings10.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test4864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4864");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test4865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4865");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder44.removeAllAliases();
        long long46 = builder45.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.removeAlias("index.version.minimum_compatible");
        java.lang.String str49 = builder48.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder48.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder48.index("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder56.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("index.priority", 10.0f);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long70 = indexMetaData69.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap71 = indexMetaData69.getMappings();
        int int72 = indexMetaData69.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate74 = null;
        org.elasticsearch.common.settings.Settings settings75 = settings73.filter(strPredicate74);
        java.lang.String str77 = settings75.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings75.getAsGroups();
        java.lang.String str80 = settings75.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings75);
        int int82 = indexSettings81.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig83 = indexSettings81.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Settings settings84 = indexSettings81.getSettings();
        java.lang.String str86 = settings84.toDelimitedString('#');
        boolean boolean88 = settings84.equals((java.lang.Object) 60000L);
        org.elasticsearch.common.settings.Settings settings90 = settings84.getAsSettings("index.creation_date");
        java.lang.Class<?> wildcardClass91 = settings90.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder64.put("index.version.upgraded", (java.lang.Class) wildcardClass91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder48.settings(builder64);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder48.putAlias(aliasMetaData94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "index.number_of_shards" + "'", str49, "index.number_of_shards");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#" + "'", str86, "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test4866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4866");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Set<java.lang.String> strSet18 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.putActiveAllocationIds((int) (byte) 1, strSet18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.putMapping(mappingMetaData26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4867");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("state-", (float) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData41.getMappings();
        int int44 = indexMetaData41.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters45 = indexMetaData41.getInitialRecoveryFilters();
        org.elasticsearch.Version version46 = indexMetaData41.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder39.put("active_allocations", version46);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder39.put("index.blocks.read=nullaindex.blocks.read_only=nullaindex.blocks.readprimary_terms=index.number_of_replicasa", "");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder54 = builder50.put("index.version.created", (long) (byte) 1, byteSizeUnit53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test4868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4868");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean16 = indexSettings12.isIndexUsingShadowReplicas();
        int int17 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings12.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData21.getMappings();
        int int24 = indexMetaData21.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getAsGroups();
        java.lang.String str32 = settings27.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27);
        int int34 = indexSettings33.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings33.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue36 = settings19.getAsTime("state-", timeValue35);
        org.elasticsearch.common.settings.Settings settings38 = settings19.getAsSettings("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(settings38);
    }

    @Test
    public void test4869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4869");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = indexSettings12.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValue19);
    }

    @Test
    public void test4870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4870");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAllAliases();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder21.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder18.settings(builder51);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = builder52.mapping("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder52.numberOfReplicas((int) (short) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(mappingMetaData54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4871");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.state(state19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder20.settings(settings21);
        boolean boolean25 = settings21.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings21.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder10.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.settings(settings21);
        org.elasticsearch.common.settings.Settings settings30 = settings21.getAsSettings("active_allocations");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings21.getAsGroups(false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test4872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4872");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.version((long) 1);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder20.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.state(state27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder28.putCustom("", custom34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.version((long) 1);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder37.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.state(state44);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder45.settings(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom51 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder49.putCustom("state-", custom51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder49.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int57 = builder56.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder56.index("index.version.upgraded");
        int int60 = builder59.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder59.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData64 = builder62.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder62.state(state65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder54.state(state65);
        byte byte68 = state65.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder35.state(state65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder18.state(state65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder70.version((long) (byte) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(mappingMetaData64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + byte68 + "' != '" + (byte) 0 + "'", byte68 == (byte) 0);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test4873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4873");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        int int20 = indexSettings12.getNumberOfReplicas();
        int int21 = indexSettings12.getMaxRescoreWindow();
        int int22 = indexSettings12.getNumberOfShards();
        java.lang.String str23 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test4874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4874");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        int int16 = indexSettings12.getNumberOfShards();
        java.lang.String str17 = indexSettings12.getUUID();
        boolean boolean18 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean19 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test4875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4875");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str15 = indexSettings12.getDefaultField();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        boolean boolean18 = indexSettings12.matchesIndexName("index.number_of_replicas");
        java.lang.String str19 = indexSettings12.getDefaultField();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4876");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData9.getMappings();
        int int12 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        java.lang.String str17 = settings15.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getAsGroups();
        java.lang.String str20 = settings15.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings15);
        boolean boolean22 = indexSettings21.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings21.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings21.getTranslogDurability();
        int int25 = indexSettings21.getMaxRescoreWindow();
        boolean boolean26 = indexSettings21.isQueryStringAllowLeadingWildcard();
        boolean boolean27 = indexSettings21.isQueryStringAllowLeadingWildcard();
        boolean boolean28 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData29.getMappings();
        int int32 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getAsGroups();
        java.lang.String str40 = settings35.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings35);
        int int42 = indexSettings41.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getValue(timeValueSetting43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings21.getValue(timeValueSetting43);
        boolean boolean46 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.index.translog.Translog.Durability durability47 = indexSettings21.getTranslogDurability();
        boolean boolean48 = indexMetaData0.equals((java.lang.Object) indexSettings21);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap49 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteSizeValue23);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + durability47 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability47.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap49);
        org.junit.Assert.assertNull(mappingMetaData51);
    }

    @Test
    public void test4877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4877");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 'a');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test4878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4878");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        org.apache.lucene.index.MergePolicy mergePolicy20 = indexSettings12.getMergePolicy();
        boolean boolean22 = indexSettings12.matchesIndexName("index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(mergePolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4879");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.version((long) 1);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder31.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.state(state38);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder39.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder39.putCustom("", custom45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.version((long) 1);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder48.settings(settings51);
        org.elasticsearch.common.settings.Settings settings56 = settings51.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder39.settings(settings56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder26.put(settings56);
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.Settings settings68 = settings66.filter(strPredicate67);
        java.lang.String str70 = settings68.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder62.put(settings68);
        java.lang.String[] strArray78 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder62.putArray("", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder58.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder11.putArray("_na_", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder11.loadFromSource("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder11.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder88.put("10", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test4880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4880");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.putCustom("", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.state(state25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.putCustom("state-", custom32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder30.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int38 = builder37.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder37.index("index.version.upgraded");
        int int41 = builder40.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = builder43.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder43.state(state46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder35.state(state46);
        byte byte49 = state46.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder16.state(state46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder53.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 0 + "'", byte49 == (byte) 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test4881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4881");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData14.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData14.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData14.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
    }

    @Test
    public void test4882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4882");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        long long6 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    public void test4883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4883");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.lang.String str13 = settings11.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder5.put(settings11);
        org.elasticsearch.common.settings.Settings settings16 = settings11.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet17 = settings11.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putActiveAllocationIds(1, strSet17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.index("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder22.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test4884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4884");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        int int8 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test4885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4885");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 100);
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) 1);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder9.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version((long) 1);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder24.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.state(state31);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder32.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom38 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder36.putCustom("state-", custom38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder36.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder36.version((long) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        java.lang.String str55 = settings53.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder47.put(settings53);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = settings53.getAsStructuredMap();
        java.lang.String str59 = settings53.toDelimitedString('a');
        java.util.Set<java.lang.String> strSet60 = settings53.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder43.putActiveAllocationIds((-1), strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder19.putActiveAllocationIds(10, strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder1.putActiveAllocationIds((int) (short) 100, strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder63.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder65.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData68);
        long long71 = indexMetaData68.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int73 = indexMetaData72.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff74 = indexMetaData68.diff(indexMetaData72);
        long long75 = indexMetaData68.getVersion();
        java.lang.String str76 = indexMetaData68.getIndexUUID();
        org.elasticsearch.Version version77 = indexMetaData68.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state78 = indexMetaData68.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder67.state(state78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder79.index("false");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
        org.junit.Assert.assertNotNull(version77);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state78.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test4886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4886");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        long long18 = indexSettings12.getGcDeletesInMillis();
        boolean boolean19 = indexSettings12.isWarmerEnabled();
        boolean boolean21 = indexSettings12.matchesIndexName("index.blocks.write");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4887");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.version((long) 1);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder20.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.state(state27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder28.putCustom("", custom34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.version((long) 1);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder37.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.state(state44);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder45.settings(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom51 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder49.putCustom("state-", custom51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder49.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int57 = builder56.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder56.index("index.version.upgraded");
        int int60 = builder59.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder59.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData64 = builder62.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder62.state(state65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder54.state(state65);
        byte byte68 = state65.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder35.state(state65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder18.state(state65);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = builder18.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(mappingMetaData64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + byte68 + "' != '" + (byte) 0 + "'", byte68 == (byte) 0);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test4888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4888");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int10 = indexMetaData9.getTotalNumberOfShards();
        int int11 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData9.getInitialRecoveryFilters();
        java.lang.String str13 = indexMetaData9.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData9);
        boolean boolean16 = indexMetaData0.isSameUUID("index.shadow_replicas");
        boolean boolean18 = indexMetaData0.isSameUUID("");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.includeFilters();
        boolean boolean21 = indexMetaData0.isSameUUID("0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4889");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        boolean boolean4 = settings3.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4890");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put(settings20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.state(state34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.settings(settings36);
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings36.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder23.put(settings36);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder11.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.put(settings57);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder46.put("index.shared_filesystem.recover_on_any_node", (float) ' ');
        java.lang.String str63 = builder46.get("0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test4891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4891");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put(settings34);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder28.putArray("", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = builder56.internalMap();
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder56.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder66.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate73 = null;
        org.elasticsearch.common.settings.Settings settings74 = settings72.filter(strPredicate73);
        java.lang.String str76 = settings74.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder68.put(settings74);
        org.elasticsearch.common.settings.Settings settings79 = settings74.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet80 = settings79.names();
        java.lang.String[] strArray82 = settings79.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder65.put(settings79);
        java.lang.Class<?> wildcardClass84 = builder65.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder21.put("active_allocations", (java.lang.Class) wildcardClass84);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder21.replacePropertyPlaceholders();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder88 = builder86.put(objDictionary87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test4892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4892");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet30 = settings24.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder13.putActiveAllocationIds(1, strSet30);
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder13.settings(settings32);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = builder13.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test4893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4893");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAlias("index.version.created_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.primaryTerm((int) (short) -1, 60000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test4894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4894");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.hasCustomDataPath();
        boolean boolean16 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test4895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4895");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.state(state10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.putCustom("archived.", custom13);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder22.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.put(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder38.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.version((long) 1);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder42.settings(settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.state(state49);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder50.settings(settings51);
        java.lang.Boolean boolean57 = settings51.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = settings51.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder38.put(settings51);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder59.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder26.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder64.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder69.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings72 = builder71.build();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder61.put(settings72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = builder73.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder7.settings(builder73);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder7.putMapping(mappingMetaData76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + boolean57 + "' != '" + false + "'", boolean57, false);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test4896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4896");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        long long19 = indexSettings12.getGcDeletesInMillis();
        java.lang.String str20 = indexSettings12.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        int int22 = indexSettings12.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 60000L + "'", long19 == 60000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test4897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4897");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings12.getNodeSettings();
        java.lang.String str18 = indexSettings12.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean20 = indexSettings12.isTTLPurgeDisabled();
        java.lang.String str21 = indexSettings12.getNodeName();
        java.lang.String str22 = indexSettings12.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
    }

    @Test
    public void test4898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4898");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData6.getMappings();
        int int9 = indexMetaData6.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getAsGroups();
        java.lang.String str17 = settings12.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12);
        int int19 = indexSettings18.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings18.getValue(timeValueSetting20);
        boolean boolean22 = indexSettings18.isOnSharedFilesystem();
        java.lang.String str23 = indexSettings18.getUUID();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings18.getNodeSettings();
        java.lang.String[] strArray26 = settings24.getAsArray("index.version.created_string");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings24);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap33 = indexMetaData31.getMappings();
        int int34 = indexMetaData31.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings37.getAsGroups();
        java.lang.String str42 = settings37.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings37);
        java.lang.String str44 = indexSettings43.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = indexSettings43.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff48 = indexMetaData0.diff(indexMetaData45);
        org.elasticsearch.common.io.stream.StreamInput streamInput49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff50 = indexMetaData0.readDiffFrom(streamInput49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertNotNull(indexMetaDataDiff48);
    }

    @Test
    public void test4899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4899");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putCustom("active_allocations", custom18);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.putMapping(mappingMetaData20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test4900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4900");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getCreationDate();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        int int5 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData6.getMappings();
        int int9 = indexMetaData6.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getAsGroups();
        java.lang.String str17 = settings12.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12);
        int int19 = indexSettings18.getMaxResultWindow();
        java.lang.String str20 = indexSettings18.getUUID();
        int int21 = indexSettings18.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue22 = indexSettings18.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = indexSettings18.getParseFieldMatcher();
        boolean boolean24 = indexSettings18.isQueryStringAllowLeadingWildcard();
        boolean boolean25 = indexSettings18.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexSettings18.getIndexMetaData();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData0.diff(indexMetaData26);
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData26.getSettings();
        org.elasticsearch.Version version29 = indexMetaData26.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue22);
        org.junit.Assert.assertNotNull(parseFieldMatcher23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(version29);
    }

    @Test
    public void test4901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4901");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.Version version18 = indexSettings12.getIndexVersionCreated();
        org.apache.lucene.index.MergePolicy mergePolicy19 = indexSettings12.getMergePolicy();
        java.lang.String str20 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(mergePolicy19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test4902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4902");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings settings30 = settings25.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet31 = settings30.names();
        java.lang.String[] strArray33 = settings30.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData14.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = indexMetaData14.mappingOrDefault("_na_");
        int int38 = indexMetaData14.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNull(mappingMetaData37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test4903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4903");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        int int7 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put(settings18);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = settings18.getAsMap();
        java.lang.String str25 = settings18.get("", "primary_terms");
        java.util.Set<java.lang.String> strSet26 = settings18.names();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getMaxResultWindow();
        boolean boolean42 = indexSettings40.isQueryStringAnalyzeWildcard();
        boolean boolean43 = indexSettings40.isTTLPurgeDisabled();
        boolean boolean44 = indexSettings40.isWarmerEnabled();
        boolean boolean45 = indexSettings40.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability46 = indexSettings40.getTranslogDurability();
        boolean boolean47 = indexSettings40.isQueryStringLenient();
        boolean boolean48 = indexSettings40.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting49 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings40.getValue(timeValueSetting49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = settings18.getAsTime("index.version.created", timeValue50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings18.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings53.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "primary_terms" + "'", str25, "primary_terms");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + durability46 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability46.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeValueSetting49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(timeValue54);
    }

    @Test
    public void test4904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4904");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.Version version15 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(version15);
    }

    @Test
    public void test4905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4905");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test4906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4906");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (float) (byte) 0);
        org.elasticsearch.common.settings.Settings settings30 = builder29.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test4907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4907");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getAsGroups();
        java.lang.String str19 = settings14.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings14);
        java.lang.String str21 = indexSettings20.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexSettings20.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put(settings33);
        org.elasticsearch.common.settings.Settings settings38 = settings33.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet39 = settings38.names();
        java.lang.String[] strArray41 = settings38.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings38);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap43 = indexMetaData22.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters44 = indexMetaData22.includeFilters();
        org.elasticsearch.Version version45 = indexMetaData22.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff46 = indexMetaData0.diff(indexMetaData22);
        boolean boolean48 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData0.getSettings();
        int int50 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap43);
        org.junit.Assert.assertNull(discoveryNodeFilters44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(indexMetaDataDiff46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test4908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4908");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder17.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass31 = builder26.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder17.put("index.number_of_shards", (java.lang.Class) wildcardClass31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings43.getAsMap();
        java.lang.String str50 = settings43.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue52 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue53 = settings43.getAsSize("state-", sizeValue52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings56.getAsGroups();
        org.elasticsearch.common.settings.Settings settings59 = settings56.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings34.diff(settings43, settings56);
        java.lang.Class<?> wildcardClass61 = settings60.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder32.put("index.", (java.lang.Class) wildcardClass61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.normalizePrefix("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder65.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.Settings settings73 = settings71.filter(strPredicate72);
        java.lang.String str75 = settings73.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder67.put(settings73);
        org.elasticsearch.common.settings.Settings settings78 = settings73.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet79 = settings78.names();
        java.lang.String[] strArray81 = settings78.getAsArray("index.shared_filesystem");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings78.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder32.put(settings78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder14.settings(builder84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder85.numberOfShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder85.primaryTerm(32, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "primary_terms" + "'", str50, "primary_terms");
        org.junit.Assert.assertNull(sizeValue53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test4909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4909");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexScopedSettings0.get(timeValueSetting27);
        boolean boolean30 = indexScopedSettings0.hasDynamicSetting("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Setting.Property property31 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        java.lang.String str44 = settings42.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder36.put(settings42);
        org.elasticsearch.common.settings.Settings settings47 = settings42.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet48 = settings47.names();
        org.elasticsearch.common.settings.Settings settings50 = settings47.getByPrefix("");
        indexScopedSettings33.validate(settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long53 = indexMetaData52.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap54 = indexMetaData52.getMappings();
        org.elasticsearch.common.settings.Settings settings55 = indexMetaData52.getSettings();
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings33.dryRun(settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long58 = indexMetaData57.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap59 = indexMetaData57.getMappings();
        int int60 = indexMetaData57.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate62 = null;
        org.elasticsearch.common.settings.Settings settings63 = settings61.filter(strPredicate62);
        java.lang.String str65 = settings63.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getAsGroups();
        java.lang.String str68 = settings63.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings63);
        int int70 = indexSettings69.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting71 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings69.getValue(timeValueSetting71);
        boolean boolean73 = indexSettings69.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue74 = indexSettings69.getRefreshInterval();
        boolean boolean75 = indexSettings69.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig76 = indexSettings69.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int78 = indexMetaData77.getTotalNumberOfShards();
        int int79 = indexMetaData77.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap81 = indexMetaData80.getMappings();
        int int82 = indexMetaData80.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings83 = indexMetaData80.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings83);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting85 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue86 = indexSettings84.getValue(timeValueSetting85);
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings69.getValue(timeValueSetting85);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer88 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer89 = null;
        indexScopedSettings33.addSettingsUpdateConsumer(timeValueSetting85, timeValueConsumer88, timeValueConsumer89);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer91 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer92 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting85, timeValueConsumer91, timeValueConsumer92);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + property31 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property31.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(timeValueSetting85);
        org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertNotNull(timeValue87);
    }

    @Test
    public void test4910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4910");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean19 = indexSettings12.matchesIndexName("index.data_path");
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher21 = indexSettings12.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(parseFieldMatcher21);
    }

    @Test
    public void test4911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4911");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder21.putArray("", (java.util.List<java.lang.String>) strList38);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder49.internalMap();
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder49.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder43.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder2.put(objArray56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap63 = indexMetaData61.getMappings();
        int int64 = indexMetaData61.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings67.getAsGroups();
        java.lang.String str72 = settings67.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings67);
        int int74 = indexSettings73.getMaxResultWindow();
        int int75 = indexSettings73.getMaxResultWindow();
        org.apache.lucene.index.MergePolicy mergePolicy76 = indexSettings73.getMergePolicy();
        boolean boolean77 = indexSettings73.isQueryStringLenient();
        java.lang.String str78 = indexSettings73.getDefaultField();
        int int79 = indexSettings73.getNumberOfReplicas();
        java.lang.Class<?> wildcardClass80 = indexSettings73.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder59.put("10", (java.lang.Class) wildcardClass80);
        java.lang.String str83 = builder59.remove("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10000 + "'", int74 == 10000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_all" + "'", str78, "_all");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test4912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4912");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(indexMetaData18);
    }

    @Test
    public void test4913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4913");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version7 = null;
        org.elasticsearch.Version version8 = settings2.getAsVersion("index.creation_date_string", version7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings2.getAsMap();
        java.lang.String str12 = settings2.get("index.number_of_replicas", "index.auto_expand_replicas");
        java.lang.Boolean boolean15 = settings2.getAsBoolean("index.version.created", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings17 = settings2.getAsSettings("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.version((long) 1);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder19.settings(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        org.elasticsearch.common.settings.Settings settings48 = settings43.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet49 = settings43.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder33.putActiveAllocationIds(1, strSet49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder30.putActiveAllocationIds((int) ' ', strSet49);
        boolean boolean52 = settings17.equals((java.lang.Object) builder30);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.auto_expand_replicas" + "'", str12, "index.auto_expand_replicas");
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4914");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        boolean boolean9 = settings8.isEmpty();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings10.getAsGroups();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue14 = settings10.getAsRatio("index.data_path", "100");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Ratio should be in [0-1.0], got [100.0]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test4915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4915");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.creationDate((long) 32);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test4916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4916");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put(settings20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.state(state34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.settings(settings36);
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings36.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder23.put(settings36);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder11.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.put(settings57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings67.filter(strPredicate68);
        java.lang.String str71 = settings69.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder63.put(settings69);
        org.elasticsearch.common.settings.Settings settings74 = settings69.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet75 = settings74.names();
        org.elasticsearch.common.settings.Settings settings77 = settings74.getByPrefix("index.number_of_replicas");
        indexScopedSettings59.validate("index.data_path", settings74);
        java.util.Map<java.lang.String, java.lang.String> strMap79 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate81 = null;
        org.elasticsearch.common.settings.Settings settings82 = settings80.filter(strPredicate81);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings82.getAsGroups();
        org.elasticsearch.common.settings.Settings settings85 = settings82.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version87 = null;
        org.elasticsearch.Version version88 = settings82.getAsVersion("index.creation_date_string", version87);
        java.util.function.Predicate<java.lang.String> strPredicate89 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings90 = settings82.filter(strPredicate89);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction91 = null;
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder46.putProperties(strMap79, strPredicate89, strFunction91);
        java.lang.String str94 = builder92.remove("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(version88);
        org.junit.Assert.assertNotNull(strPredicate89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test4917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4917");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.Version version12 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version13 = indexMetaData0.getCreationVersion();
        int int14 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int17 = builder16.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.index("index.version.upgraded");
        int int20 = builder19.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder22.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder22.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder22.putCustom("archived.", custom28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder31.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.numberOfReplicas((int) (short) 100);
        boolean boolean37 = indexMetaData0.equals((java.lang.Object) builder36);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test4918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4918");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        int int18 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.index.translog.Translog.Durability durability19 = indexSettings12.getTranslogDurability();
        boolean boolean20 = indexSettings12.isShadowReplicaIndex();
        boolean boolean21 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        java.lang.String str33 = settings31.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put(settings31);
        org.elasticsearch.common.settings.Settings settings36 = settings31.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = settings36.getByPrefix("index.blocks.metadata");
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = settings36.getAsStructuredMap();
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings36.getGroups("_all", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + durability19 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability19.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
        org.junit.Assert.assertNotNull(strMap46);
    }

    @Test
    public void test4919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4919");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean16 = indexSettings12.matchesIndexName("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean19 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test4920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4920");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeValue16);
    }

    @Test
    public void test4921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4921");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAllAliases();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder21.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder18.settings(builder51);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = builder52.mapping("state-");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder52.putMapping(mappingMetaData55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(mappingMetaData54);
    }

    @Test
    public void test4922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4922");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        boolean boolean4 = indexMetaData0.isSameUUID("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int6 = indexMetaData5.getTotalNumberOfShards();
        int int7 = indexMetaData5.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData5.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData5.getMappings();
        int int10 = indexMetaData5.getTotalNumberOfShards();
        int int11 = indexMetaData5.getTotalNumberOfShards();
        long long13 = indexMetaData5.primaryTerm(0);
        org.apache.lucene.util.Version version14 = indexMetaData5.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData5);
        int int17 = indexMetaData5.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test4923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4923");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version37 = indexMetaData0.getMinimumCompatibleVersion();
        long long38 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test4924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4924");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("primary_terms", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getAsGroups();
        java.lang.String str31 = settings26.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        java.lang.String str33 = indexSettings32.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexSettings32.getIndexMetaData();
        java.lang.String str35 = indexSettings32.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher36 = indexSettings32.getParseFieldMatcher();
        int int37 = indexSettings32.getMaxRescoreWindow();
        int int38 = indexSettings32.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings39 = indexSettings32.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData41.getMappings();
        int int44 = indexMetaData41.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        java.lang.String str49 = settings47.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getAsGroups();
        java.lang.String str52 = settings47.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings47);
        int int54 = indexSettings53.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting55 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings53.getValue(timeValueSetting55);
        int int57 = indexSettings53.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = indexSettings53.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = settings39.getAsBytesSize("index.blocks.write", byteSizeValue58);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = settings15.getAsBytesSize("archived.", byteSizeValue58);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue63 = settings15.getAsMemory("index.uuid", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.uuid] with value [index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting55);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertNotNull(byteSizeValue59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
    }

    @Test
    public void test4925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4925");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test4926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4926");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        int int16 = indexMetaData14.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData14.getInitialRecoveryFilters();
        int int18 = indexMetaData14.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData14.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test4927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4927");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings7.filter(strPredicate8);
        java.lang.String str11 = settings9.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.put(settings9);
        org.elasticsearch.common.settings.Settings settings14 = settings9.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet15 = settings14.names();
        org.elasticsearch.common.settings.Settings settings17 = settings14.getByPrefix("");
        indexScopedSettings0.validate(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData19.getSettings();
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings22, streamOutput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
    }

    @Test
    public void test4928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4928");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.put("10", (long) 1, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test4929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4929");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean19 = indexSettings12.matchesIndexName("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        boolean boolean21 = indexSettings12.isQueryStringAllowLeadingWildcard();
        long long22 = indexSettings12.getGcDeletesInMillis();
        boolean boolean23 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean25 = indexSettings12.matchesIndexName("10");
        java.lang.String str26 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test4930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4930");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        java.lang.String str17 = indexSettings12.getUUID();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        int int19 = indexSettings12.getNumberOfReplicas();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4931");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings17 = settings13.getAsSettings("hi!");
        java.lang.String str20 = settings13.get("", "index.version.created_string");
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings13);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.version.created_string" + "'", str20, "index.version.created_string");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4932");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getRefreshInterval();
        java.lang.String str19 = indexSettings12.getDefaultField();
        java.lang.String str20 = indexSettings12.getDefaultField();
        java.lang.String str21 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_all" + "'", str20, "_all");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test4933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4933");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put(settings18);
        org.elasticsearch.common.settings.Settings settings23 = settings18.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = settings23.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings27 = settings25.getByPrefix("index.");
        java.lang.Boolean boolean30 = settings25.getAsBoolean("", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        java.lang.String str43 = settings41.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder35.put(settings41);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings41.getAsMap();
        java.lang.String str48 = settings41.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue50 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue51 = settings41.getAsSize("state-", sizeValue50);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings54.getAsGroups();
        org.elasticsearch.common.settings.Settings settings57 = settings54.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings32.diff(settings41, settings54);
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.Settings settings68 = settings66.filter(strPredicate67);
        java.lang.String str70 = settings68.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder62.put(settings68);
        org.elasticsearch.common.settings.Settings settings73 = settings68.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings75 = settings73.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings77 = settings73.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getGroups("index.shared_filesystem");
        java.lang.String[] strArray85 = settings79.getAsArray("index.shared_filesystem.recover_on_any_node");
        java.lang.String[] strArray86 = settings77.getAsArray("index.blocks.read", strArray85);
        java.lang.String[] strArray87 = settings58.getAsArray("index.version.created", strArray85);
        java.lang.String[] strArray89 = settings25.getAsArray("index.blocks.read_only", strArray85, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings25);
        org.elasticsearch.common.unit.TimeValue timeValue91 = indexSettings90.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "primary_terms" + "'", str48, "primary_terms");
        org.junit.Assert.assertNull(sizeValue51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(timeValue91);
    }

    @Test
    public void test4934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4934");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.putCustom("index.blocks.metadata", custom16);
        int int18 = builder17.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test4935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4935");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put("_na_", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("active_allocations", 100.0f);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.put("index.blocks.read", (long) (short) 100, byteSizeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test4936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4936");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder3.mapping("hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test4937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4937");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        java.lang.String str21 = indexSettings12.getNodeName();
        org.apache.lucene.index.MergePolicy mergePolicy22 = indexSettings12.getMergePolicy();
        java.lang.Class<?> wildcardClass23 = indexSettings12.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(mergePolicy22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test4938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4938");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.version.upgraded_string", true);
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.version.created_string");
        boolean boolean8 = settings7.isEmpty();
        java.util.Set<java.lang.String> strSet9 = settings7.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getGroups("index.");
        org.elasticsearch.common.settings.Settings settings13 = settings7.getAsSettings("index.creation_date_string");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
    }

    @Test
    public void test4939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4939");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        int int5 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test4940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4940");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.state(state10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.putCustom("archived.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfShards(0);
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.version((long) 1);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder34.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.state(state41);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder42.settings(settings43);
        java.lang.Boolean boolean49 = settings43.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = settings43.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder30.put(settings43);
        java.lang.String str53 = builder30.get("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder16.settings(builder30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder16.index("-1");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + false + "'", boolean49, false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test4941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4941");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("false");
    }

    @Test
    public void test4942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4942");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder21.putArray("", (java.util.List<java.lang.String>) strList38);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder49.internalMap();
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder49.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder43.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder2.put(objArray56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap63 = indexMetaData61.getMappings();
        int int64 = indexMetaData61.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings67.getAsGroups();
        java.lang.String str72 = settings67.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings67);
        int int74 = indexSettings73.getMaxResultWindow();
        int int75 = indexSettings73.getMaxResultWindow();
        org.apache.lucene.index.MergePolicy mergePolicy76 = indexSettings73.getMergePolicy();
        boolean boolean77 = indexSettings73.isQueryStringLenient();
        java.lang.String str78 = indexSettings73.getDefaultField();
        int int79 = indexSettings73.getNumberOfReplicas();
        java.lang.Class<?> wildcardClass80 = indexSettings73.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder59.put("10", (java.lang.Class) wildcardClass80);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long84 = indexMetaData83.getVersion();
        org.elasticsearch.Version version85 = indexMetaData83.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder81.put("index.creation_date", version85);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder88 = builder81.put(objDictionary87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10000 + "'", int74 == 10000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_all" + "'", str78, "_all");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(version85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test4943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4943");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean17 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mapping("index.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteSizeValue20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
    }

    @Test
    public void test4944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4944");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        boolean boolean20 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder5.settings(settings16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder5.mapping("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put(settings33);
        java.lang.String str38 = builder27.get("");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder27.put("state-", (int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder5.settings(builder41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.putCustom("index.number_of_shards", custom44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder42.putMapping("index.creation_date_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test4945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4945");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings settings19 = indexMetaData0.getSettings();
        java.lang.String[] strArray21 = null;
        java.lang.String[] strArray23 = settings19.getAsArray("-1", strArray21, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test4946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4946");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder4.mapping("primary_terms");
        long long7 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.version(100L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int14 = builder13.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version((long) 1);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder24.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.state(state31);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder32.settings(settings33);
        boolean boolean37 = settings33.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder22.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder16.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap42 = indexMetaData41.getMappings();
        int int43 = indexMetaData41.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings44 = indexMetaData41.getSettings();
        org.apache.lucene.util.Version version45 = indexMetaData41.getMinimumCompatibleVersion();
        int int46 = indexMetaData41.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state47 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder40.state(state47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder11.state(state47);
        int int50 = builder49.numberOfShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNull(version45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + state47 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state47.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test4947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4947");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        boolean boolean18 = indexSettings12.matchesIndexName("_na_");
        org.apache.lucene.index.MergePolicy mergePolicy19 = indexSettings12.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mergePolicy19);
    }

    @Test
    public void test4948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4948");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet2 = indexMetaData0.activeAllocationIds(0);
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("archived.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test4949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4949");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test4950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4950");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig15 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        boolean boolean19 = indexSettings12.isTTLPurgeDisabled();
        int int20 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergeSchedulerConfig15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
    }

    @Test
    public void test4951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4951");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        java.lang.String str17 = indexMetaData16.getIndexUUID();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData16.getSettings();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings settings32 = settings27.getByPrefix("index.shadow_replicas");
        java.lang.String str35 = settings27.get("hi!", "");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings38.getAsGroups();
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version43 = null;
        org.elasticsearch.Version version44 = settings38.getAsVersion("index.creation_date_string", version43);
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings46 = settings38.filter(strPredicate45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings48.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue52 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue53 = settings48.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings47.dryRun(settings54);
        java.lang.String str56 = indexScopedSettings47.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting57 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer58 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        indexScopedSettings47.addSettingsUpdateConsumer(timeValueSetting57, timeValueConsumer58, timeValueConsumer59);
        java.lang.String str61 = indexScopedSettings47.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting63 = indexScopedSettings47.get("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings27, strPredicate45, indexScopedSettings47);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings27.getGroups("5000099", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(version44);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(sizeValue53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(timeValueSetting57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(wildcardSetting63);
        org.junit.Assert.assertNotNull(strMap67);
    }

    @Test
    public void test4952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4952");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm((int) (byte) 1, (long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put(settings18);
        org.elasticsearch.common.settings.Settings settings23 = settings18.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet24 = settings18.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder8.putActiveAllocationIds(0, strSet24);
        int int26 = builder8.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder8.removeAllAliases();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings29.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue33);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.dryRun(settings35);
        org.elasticsearch.common.settings.Settings settings38 = settings35.getByPrefix("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder8.settings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings35.getGroups("primary_terms", true);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test4953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4953");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.putCustom("10", custom13);
        int int15 = builder14.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test4954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4954");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings17 = settings13.getAsSettings("hi!");
        java.lang.String str19 = settings17.toDelimitedString(' ');
        org.elasticsearch.common.settings.Settings settings21 = settings17.getAsSettings("index.auto_expand_replicas");
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings21);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4955");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings21 = builder11.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder7.settings(builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.removeAlias("index.shadow_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder22.putMapping("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test4956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4956");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData3.getMappings();
        int int5 = indexMetaData3.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData3.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings7.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexSettings7.getIndexMetaData();
        boolean boolean10 = indexSettings7.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4957");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getNumberOfShards();
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        long long13 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test4958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4958");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.put(settings16);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = settings16.getAsMap();
        java.lang.String str23 = settings16.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings25 = settings16.getAsSettings("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.settings(settings25);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = builder4.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "primary_terms" + "'", str23, "primary_terms");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test4959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4959");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet30 = settings24.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder13.putActiveAllocationIds(1, strSet30);
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder13.settings(settings32);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
    }

    @Test
    public void test4960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4960");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        long long15 = indexMetaData12.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int17 = indexMetaData16.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData12.diff(indexMetaData16);
        long long19 = indexMetaData12.getVersion();
        java.lang.String str20 = indexMetaData12.getIndexUUID();
        org.elasticsearch.Version version21 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData12.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue28 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue29 = settings24.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings23.dryRun(settings30);
        java.lang.String str32 = indexScopedSettings23.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer34 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer35 = null;
        indexScopedSettings23.addSettingsUpdateConsumer(timeValueSetting33, timeValueConsumer34, timeValueConsumer35);
        boolean boolean37 = indexMetaData12.equals((java.lang.Object) timeValueConsumer34);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff38 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData12.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData12.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(sizeValue29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(timeValueSetting33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
    }

    @Test
    public void test4961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4961");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        int int19 = indexSettings12.getMaxResultWindow();
        int int20 = indexSettings12.getNumberOfReplicas();
        int int21 = indexSettings12.getMaxResultWindow();
        boolean boolean22 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4962");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", 10.0f);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData15.getMappings();
        int int18 = indexMetaData15.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings21.getAsGroups();
        java.lang.String str26 = settings21.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21);
        int int28 = indexSettings27.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig29 = indexSettings27.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings27.getSettings();
        java.lang.String str32 = settings30.toDelimitedString('#');
        boolean boolean34 = settings30.equals((java.lang.Object) 60000L);
        org.elasticsearch.common.settings.Settings settings36 = settings30.getAsSettings("index.creation_date");
        java.lang.Class<?> wildcardClass37 = settings36.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder10.put("index.version.upgraded", (java.lang.Class) wildcardClass37);
        org.elasticsearch.common.settings.Settings settings39 = builder10.build();
        java.io.InputStream inputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder42 = builder10.loadFromStream("index.", inputStream41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#" + "'", str32, "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
    }

    @Test
    public void test4963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4963");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test4964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4964");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_shards");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_shards]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test4965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4965");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        boolean boolean19 = indexSettings12.matchesIndexName("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData20.mapping("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData23.getMappings();
        int int26 = indexMetaData23.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap27 = indexMetaData23.getActiveAllocationIds();
        org.elasticsearch.Version version28 = indexMetaData23.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData23.requireFilters();
        long long30 = indexMetaData23.getCreationDate();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings33);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings33.getAsMap();
        java.lang.String[] strArray39 = new java.lang.String[] {};
        java.lang.String[] strArray41 = settings33.getAsArray("", strArray39, (java.lang.Boolean) true);
        boolean boolean42 = indexMetaData20.equals((java.lang.Object) true);
        long long43 = indexMetaData20.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    }

    @Test
    public void test4966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4966");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        boolean boolean19 = indexSettings12.matchesIndexName("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        org.apache.lucene.index.MergePolicy mergePolicy21 = indexSettings12.getMergePolicy();
        int int22 = indexSettings12.getNumberOfShards();
        boolean boolean23 = indexSettings12.isQueryStringLenient();
        java.lang.String str24 = indexSettings12.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings12.getIndexMetaData();
        org.apache.lucene.util.Version version26 = indexMetaData25.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(mergePolicy21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_all" + "'", str24, "_all");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(version26);
    }

    @Test
    public void test4967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4967");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        boolean boolean14 = indexSettings12.isQueryStringLenient();
        java.lang.String str15 = indexSettings12.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        java.lang.String str18 = indexSettings12.getUUID();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.lang.String str30 = settings28.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder22.put(settings28);
        org.elasticsearch.common.settings.Settings settings33 = settings28.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet34 = settings33.names();
        org.elasticsearch.common.settings.Settings settings36 = settings33.getByPrefix("");
        indexScopedSettings19.validate(settings36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue43 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue44 = settings39.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue43);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings38.dryRun(settings45);
        java.lang.String str47 = indexScopedSettings38.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer49 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer50 = null;
        indexScopedSettings38.addSettingsUpdateConsumer(timeValueSetting48, timeValueConsumer49, timeValueConsumer50);
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexScopedSettings19.get(timeValueSetting48);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexScopedSettings19.get(timeValueSetting53);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting55 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexScopedSettings19.get(timeValueSetting55);
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings12.getValue(timeValueSetting55);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(sizeValue44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(timeValueSetting48);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(timeValueSetting55);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(timeValue57);
    }

    @Test
    public void test4968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4968");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        java.lang.String str8 = builder5.index();
        long long9 = builder5.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "primary_terms" + "'", str8, "primary_terms");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test4969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4969");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        java.lang.String str21 = builder20.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test4970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4970");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "index.blocks.read_only", "state-", "index.version.upgraded", "index.version.upgraded", "index.version.minimum_compatible", "index.version.upgraded_string", "", "_na_", "index.number_of_shards", "index.auto_expand_replicas" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder7.removeAlias("index.data_path");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test4971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4971");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test4972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4972");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        java.lang.String str16 = indexSettings12.getDefaultField();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        int int18 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
    }

    @Test
    public void test4973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4973");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings7.filter(strPredicate8);
        java.lang.String str11 = settings9.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.put(settings9);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = settings9.getAsMap();
        java.lang.String str16 = settings9.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue18 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue19 = settings9.getAsSize("state-", sizeValue18);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings22.getAsGroups();
        org.elasticsearch.common.settings.Settings settings25 = settings22.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings9, settings22);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        java.lang.String str38 = settings36.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder30.put(settings36);
        org.elasticsearch.common.settings.Settings settings41 = settings36.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = settings41.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings45 = settings41.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings47.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings47.getGroups("index.shared_filesystem");
        java.lang.String[] strArray53 = settings47.getAsArray("index.shared_filesystem.recover_on_any_node");
        java.lang.String[] strArray54 = settings45.getAsArray("index.blocks.read", strArray53);
        java.lang.String[] strArray55 = settings26.getAsArray("index.version.created", strArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue58 = settings26.getAsRatio("index.creation_date", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [_all]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "primary_terms" + "'", str16, "primary_terms");
        org.junit.Assert.assertNull(sizeValue19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test4974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4974");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        java.lang.String str17 = indexSettings12.getUUID();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        int int19 = indexSettings12.getNumberOfReplicas();
        int int20 = indexSettings12.getMaxResultWindow();
        java.lang.Class<?> wildcardClass21 = indexSettings12.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4975");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.version((long) 1);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder31.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.state(state38);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings40.filter(strPredicate41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder39.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder39.putCustom("", custom45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.version((long) 1);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder48.settings(settings51);
        org.elasticsearch.common.settings.Settings settings56 = settings51.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder39.settings(settings56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder26.put(settings56);
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.Settings settings68 = settings66.filter(strPredicate67);
        java.lang.String str70 = settings68.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder62.put(settings68);
        java.lang.String[] strArray78 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder62.putArray("", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder58.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder11.putArray("_na_", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("state-", 0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test4976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4976");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData9.getMappings();
        int int12 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        java.lang.String str17 = settings15.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getAsGroups();
        java.lang.String str20 = settings15.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings15);
        java.lang.String str22 = indexSettings21.getNodeName();
        boolean boolean23 = indexSettings21.isDefaultAllowUnmappedFields();
        boolean boolean24 = indexSettings21.isWarmerEnabled();
        int int25 = indexSettings21.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings26 = indexSettings21.getNodeSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        long long31 = indexMetaData28.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int33 = indexMetaData32.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData28.diff(indexMetaData32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = indexMetaData28.mapping("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings38 = indexMetaData28.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings38.getGroups("index.", true);
        java.lang.String str43 = settings38.get("active_allocations");
        java.lang.String str45 = settings38.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings47 = settings38.getByPrefix("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = null;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings49.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings49.getGroups("index.shared_filesystem");
        java.lang.String[] strArray55 = settings49.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        java.lang.String str61 = settings59.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings59.getAsMap();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = null;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings65.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params68 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = settings65.toXContent(xContentBuilder67, params68);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = settings63.toXContent(xContentBuilder64, params68);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = settings49.toXContent(xContentBuilder56, params68);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = settings47.toXContent(xContentBuilder48, params68);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = settings26.toXContent(xContentBuilder27, params68);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(mappingMetaData37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994" + "'", str45, "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(params68);
        org.junit.Assert.assertNull(xContentBuilder69);
        org.junit.Assert.assertNull(xContentBuilder70);
        org.junit.Assert.assertNull(xContentBuilder71);
        org.junit.Assert.assertNull(xContentBuilder72);
        org.junit.Assert.assertNull(xContentBuilder73);
    }

    @Test
    public void test4977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4977");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test4978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4978");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        java.lang.String str17 = indexSettings12.getNodeName();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig19 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig19);
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test4979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4979");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
    }

    @Test
    public void test4980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4980");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings12.getTranslogDurability();
        java.lang.String str18 = indexSettings12.customDataPath();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
    }

    @Test
    public void test4981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4981");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        boolean boolean14 = indexSettings12.isQueryStringLenient();
        java.lang.String str15 = indexSettings12.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean18 = indexSettings12.isQueryStringLenient();
        java.lang.String str19 = indexSettings12.getDefaultField();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getNodeSettings();
        boolean boolean21 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean22 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4982");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4983");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        java.lang.String str17 = indexSettings12.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy18 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getRefreshInterval();
        java.lang.String str20 = indexSettings12.getUUID();
        org.elasticsearch.Version version21 = indexSettings12.getIndexVersionCreated();
        int int22 = indexSettings12.getNumberOfShards();
        java.lang.String str23 = indexSettings12.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test4984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4984");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder13.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.putCustom("_na_", custom19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.putCustom("index.shared_filesystem.recover_on_any_node", custom22);
        java.lang.String[] strArray64 = new java.lang.String[] { "index.", "primary_terms", "index.uuid", "100", "index.number_of_shards", "", "index.creation_date", "index.shared_filesystem.recover_on_any_node", "index.blocks.metadata", "index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "hi!", "index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada", "index.blocks.read.0=index.number_of_shards4index.blocks.readprimary_terms=index.number_of_replicas4index.number_of_shards=org.elasticsearch.cluster.metadata.IndexMetaData$Builder4", "index.number_of_replicas", "primary_terms", "index.creation_date_string", "index.version.upgraded_string", "index.priority", "index.auto_expand_replicas", "index.creation_date", "", "index.uuid", "index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada", "index.priority", "-1", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", "100", "index.blocks.read_only", "index.version.upgraded_string", "_all", "index.shared_filesystem", "index.creation_date", "primary_terms", "index.blocks.read", "", "index.data_path", "", "archived." };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder20.putActiveAllocationIds((int) (byte) 0, (java.util.Set<java.lang.String>) strSet65);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder67.primaryTerm((int) ' ', (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test4985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4985");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig15 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        boolean boolean19 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.Version version20 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergeSchedulerConfig15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(version20);
    }

    @Test
    public void test4986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4986");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.state(state28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.settings(settings30);
        boolean boolean34 = settings30.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder19.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder13.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData38.getMappings();
        int int40 = indexMetaData38.getNumberOfShards();
        long long41 = indexMetaData38.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = indexScopedSettings0.copy(settings30, indexMetaData38);
        org.elasticsearch.common.settings.Setting.Property property43 = indexScopedSettings42.getScope();
        org.elasticsearch.common.settings.Setting.Property property44 = indexScopedSettings42.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long46 = indexMetaData45.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap47 = indexMetaData45.getMappings();
        int int48 = indexMetaData45.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.Settings settings51 = settings49.filter(strPredicate50);
        java.lang.String str53 = settings51.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings51.getAsGroups();
        java.lang.String str56 = settings51.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        int int58 = indexSettings57.getMaxResultWindow();
        boolean boolean59 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version60 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings42.applySettings(settings61);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + property43 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property43.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + property44 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property44.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10000 + "'", int58 == 10000);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
    }

    @Test
    public void test4987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4987");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.Boolean boolean16 = settings10.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = settings10.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings10.getAsSize("state-", sizeValue19);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue27 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue28 = settings23.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings22.dryRun(settings29);
        java.lang.String str31 = indexScopedSettings22.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting32 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer33 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer34 = null;
        indexScopedSettings22.addSettingsUpdateConsumer(timeValueSetting32, timeValueConsumer33, timeValueConsumer34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.lang.String str46 = settings44.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder38.put(settings44);
        org.elasticsearch.common.settings.Settings settings49 = settings44.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet50 = settings49.names();
        java.lang.String[] strArray52 = settings49.getAsArray("index.shared_filesystem");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings49.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings49);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = settings49.getAsMemory("index.blocks.metadata", "-1");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap63 = indexMetaData61.getMappings();
        int int64 = indexMetaData61.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings67.getAsGroups();
        java.lang.String str72 = settings67.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings67);
        int int74 = indexSettings73.getMaxResultWindow();
        java.lang.String str75 = indexSettings73.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings73.getRefreshInterval();
        org.elasticsearch.common.settings.Settings settings77 = indexSettings73.getNodeSettings();
        boolean boolean78 = indexSettings73.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue79 = indexSettings73.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue80 = settings49.getAsTime("index.version.minimum_compatible", timeValue79);
        org.elasticsearch.common.unit.TimeValue timeValue81 = settings10.getAsTime("_na_", timeValue79);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(sizeValue28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(timeValueSetting32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(byteSizeValue59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10000 + "'", int74 == 10000);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "_na_" + "'", str75, "_na_");
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(timeValue79);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(timeValue81);
    }

    @Test
    public void test4988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4988");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder32.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder32.put("", (long) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test4989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4989");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        boolean boolean13 = indexMetaData0.isSameUUID("index.blocks.write");
        boolean boolean15 = indexMetaData0.isSameUUID("index.number_of_replicas");
        long long16 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int18 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test4990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4990");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings12.getIndexMetaData();
        org.elasticsearch.Version version65 = indexMetaData64.getUpgradedVersion();
        java.lang.String str66 = indexMetaData64.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_na_" + "'", str66, "_na_");
    }

    @Test
    public void test4991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4991");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData9.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getVersion();
        org.elasticsearch.Version version14 = indexMetaData12.getUpgradedVersion();
        boolean boolean15 = indexMetaData9.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        int int17 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.Version version18 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData9.mappingOrDefault("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData9.getState();
        long long22 = indexMetaData9.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test4992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4992");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.creationDate((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.primaryTerm(0, (long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.numberOfShards((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test4993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4993");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        boolean boolean17 = indexSettings12.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test4994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4994");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 0);
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        java.lang.String str20 = builder19.index();
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder22.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put(settings30);
        org.elasticsearch.common.settings.Settings settings35 = settings30.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet36 = settings30.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder19.putActiveAllocationIds(1, strSet36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder1.putActiveAllocationIds((int) (short) -1, strSet36);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version40 = indexMetaData39.getCreationVersion();
        boolean boolean42 = indexMetaData39.isSameUUID("index.version.minimum_compatible");
        boolean boolean44 = indexMetaData39.isSameUUID("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData39.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder38.state(state45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int49 = indexMetaData48.getTotalNumberOfShards();
        boolean boolean51 = indexMetaData48.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData48.getState();
        java.util.Set<java.lang.String> strSet54 = indexMetaData48.activeAllocationIds((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder46.putActiveAllocationIds((int) 'a', strSet54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long57 = indexMetaData56.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap58 = indexMetaData56.getMappings();
        int int59 = indexMetaData56.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.common.settings.Settings settings62 = settings60.filter(strPredicate61);
        java.lang.String str64 = settings62.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getAsGroups();
        java.lang.String str67 = settings62.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings62);
        int int69 = indexSettings68.getMaxResultWindow();
        java.lang.String str70 = indexSettings68.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability71 = indexSettings68.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy72 = indexSettings68.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings68.getGlobalCheckpointInterval();
        int int74 = indexSettings68.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings75 = indexSettings68.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder46.settings(settings75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap79 = indexMetaData78.getMappings();
        int int80 = indexMetaData78.getNumberOfShards();
        long long81 = indexMetaData78.getVersion();
        int int82 = indexMetaData78.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap83 = indexMetaData78.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters84 = indexMetaData78.excludeFilters();
        org.elasticsearch.Version version85 = indexMetaData78.getUpgradedVersion();
        org.elasticsearch.Version version86 = settings75.getAsVersion("index.=10aindex.auto_expand_replicas=falseaindex.auto_expand_replicasprimary_terms=index.number_of_replicasaindex.blocks.write.0=index.blocks.read_onlyaindex.blocks.write.1=aindex.blocks.write.2=index.number_of_replicasaindex.blocks.write.3=index.blocks.readaindex.blocks.write.4=index.blocks.readaindex.blocks.write.5=index.blocks.reada", version85);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue89 = settings75.getAsRatio("1", "index.blocks.read=nullaindex.blocks.read_only=nullaindex.blocks.readprimary_terms=index.number_of_replicasa");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.read=nullaindex.blocks.read_only=nullaindex.blocks.readprimary_terms=index.number_of_replicasa]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "primary_terms" + "'", str20, "primary_terms");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10000 + "'", int69 == 10000);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "_na_" + "'", str70, "_na_");
        org.junit.Assert.assertTrue("'" + durability71 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability71.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(strImmutableOpenMap79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap83);
        org.junit.Assert.assertNull(discoveryNodeFilters84);
        org.junit.Assert.assertNotNull(version85);
        org.junit.Assert.assertNotNull(version86);
    }

    @Test
    public void test4995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4995");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getAsGroups();
        java.lang.String str31 = settings26.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        int int33 = indexSettings32.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings32.getValue(timeValueSetting34);
        boolean boolean36 = indexSettings32.isWarmerEnabled();
        java.lang.String str37 = indexSettings32.getUUID();
        java.lang.String str38 = indexSettings32.getUUID();
        java.lang.String str39 = indexSettings32.getDefaultField();
        boolean boolean40 = indexSettings32.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings32.getRefreshInterval();
        org.elasticsearch.common.settings.Settings settings42 = indexSettings32.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData43);
        long long46 = indexMetaData43.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int48 = indexMetaData47.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff49 = indexMetaData43.diff(indexMetaData47);
        long long50 = indexMetaData43.getVersion();
        java.lang.String str51 = indexMetaData43.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData43.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap53 = indexMetaData43.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = indexScopedSettings0.copy(settings42, indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_na_" + "'", str37, "_na_");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_na_" + "'", str38, "_na_");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "_all" + "'", str39, "_all");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "_na_" + "'", str51, "_na_");
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
    }

    @Test
    public void test4996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4996");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings9.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue13);
        java.lang.Boolean boolean17 = settings9.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings19 = settings9.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet22 = settings21.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test4997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4997");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet23 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.putCustom("index.blocks.read", custom30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test4998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4998");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.loadFromSource("state-");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.normalizePrefix("index.uuid");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder29.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test4999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4999");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig15 = indexSettings12.getMergeSchedulerConfig();
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getNodeSettings();
        boolean boolean21 = indexSettings12.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability22 = indexSettings12.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergeSchedulerConfig15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + durability22 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability22.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test5000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test5000");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        long long8 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }
}
