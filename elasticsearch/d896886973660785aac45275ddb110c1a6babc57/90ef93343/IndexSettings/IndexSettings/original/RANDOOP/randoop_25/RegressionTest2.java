import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.creation_date");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.creation_date]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        boolean boolean17 = indexSettings12.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getNodeSettings();
        int int19 = indexSettings12.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version7 = null;
        org.elasticsearch.Version version8 = settings2.getAsVersion("index.creation_date_string", version7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder14.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass28 = builder23.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder14.put("index.number_of_shards", (java.lang.Class) wildcardClass28);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder33.normalizePrefix("index.blocks.read");
        java.lang.String[] strArray41 = new java.lang.String[] { "index.number_of_shards" };
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder38.putArray("archived.", strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder29.extendArray("index.blocks.read", strArray41);
        java.lang.String[] strArray44 = settings2.getAsArray("index.version.created", strArray41);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings7.filter(strPredicate8);
        java.lang.String str11 = settings9.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.put(settings9);
        org.elasticsearch.common.settings.Settings settings14 = settings9.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet15 = settings14.names();
        org.elasticsearch.common.settings.Settings settings17 = settings14.getByPrefix("");
        indexScopedSettings0.validate(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData19.getSettings();
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.version((long) 1);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder26.settings(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue36 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue37 = settings29.getAsSize("primary_terms", sizeValue36);
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings41.getAsGroups();
        org.elasticsearch.common.settings.Settings settings44 = settings41.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings41.getAsVersion("index.creation_date_string", version46);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings49 = settings41.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings24.diff(settings29, settings41);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting51 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexScopedSettings24.get(timeValueSetting51);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer53 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting51, timeValueConsumer53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.version((long) 1);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.Settings settings61 = settings59.filter(strPredicate60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder56.settings(settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder62.state(state63);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder64.settings(settings65);
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings0.dryRun(settings65);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue72 = settings65.getAsRatio("index.creation_date_string", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.auto_expand_replicas]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNull(sizeValue37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(timeValueSetting51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.lang.String str13 = settings11.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder5.put(settings11);
        org.elasticsearch.common.settings.Settings settings16 = settings11.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet17 = settings11.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putActiveAllocationIds(1, strSet17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.numberOfShards((int) (byte) 1);
        int int21 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        java.lang.String str17 = indexSettings12.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy18 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getRefreshInterval();
        java.lang.String str20 = indexSettings12.getUUID();
        org.elasticsearch.Version version21 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version((long) 1);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder24.settings(settings27);
        org.elasticsearch.common.settings.Settings settings32 = settings27.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue34 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue35 = settings27.getAsSize("primary_terms", sizeValue34);
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings39.getAsGroups();
        org.elasticsearch.common.settings.Settings settings42 = settings39.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version44 = null;
        org.elasticsearch.Version version45 = settings39.getAsVersion("index.creation_date_string", version44);
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings47 = settings39.filter(strPredicate46);
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings22.diff(settings27, settings39);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting49 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexScopedSettings22.get(timeValueSetting49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = indexSettings12.getValue(timeValueSetting49);
        java.lang.String str52 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(sizeValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNull(version45);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(timeValueSetting49);
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put(objArray9);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.blocks.metadata", "");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("archived.", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        java.lang.String str33 = settings31.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put(settings31);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.version((long) 1);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder38.settings(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.state(state45);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings47.filter(strPredicate48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder46.settings(settings47);
        java.lang.Boolean boolean53 = settings47.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = settings47.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder34.put(settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder55.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder58.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.Settings settings66 = settings64.filter(strPredicate65);
        java.lang.String str68 = settings66.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder60.put(settings66);
        java.lang.String[] strArray76 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder60.putArray("", (java.util.List<java.lang.String>) strList77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder55.putArray("hi!", (java.util.List<java.lang.String>) strList77);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder55.put("index.number_of_shards", (int) (short) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap84 = builder83.internalMap();
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder87 = builder16.putProperties(strMap84, strPredicate85, strFunction86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(strMap84);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings12 = builder2.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData14.getMappings();
        int int17 = indexMetaData14.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings20.getAsGroups();
        java.lang.String str25 = settings20.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        int int27 = indexSettings26.getMaxResultWindow();
        int int28 = indexSettings26.getMaxResultWindow();
        boolean boolean29 = indexSettings26.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings26.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue31 = settings12.getAsTime("index.auto_expand_replicas", timeValue30);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(timeValue31);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        java.lang.String str18 = indexSettings12.getUUID();
        boolean boolean20 = indexSettings12.matchesIndexName("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentParser xContentParser11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        int int15 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings18.getAsGroups();
        java.lang.String str23 = settings18.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18);
        int int25 = indexSettings24.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting26 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings24.getValue(timeValueSetting26);
        boolean boolean28 = indexSettings24.isWarmerEnabled();
        java.lang.String str29 = indexSettings24.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy30 = indexSettings24.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings24.getRefreshInterval();
        java.lang.String str32 = indexSettings24.getUUID();
        org.elasticsearch.Version version33 = indexSettings24.getIndexVersionCreated();
        int int34 = indexSettings24.getNumberOfShards();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher35 = indexSettings24.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = indexMetaData0.fromXContent(xContentParser11, parseFieldMatcher35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_na_" + "'", str29, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy30);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(parseFieldMatcher35);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putCustom("index.number_of_shards", custom11);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        int int17 = indexSettings12.getNumberOfShards();
        boolean boolean18 = indexSettings12.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("state-", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("_na_");
        java.lang.String str18 = builder14.get("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder32.put("index.number_of_shards", (int) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder32.put("state-", (float) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.normalizePrefix("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.Settings settings68 = settings66.filter(strPredicate67);
        java.lang.String str70 = settings68.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap71 = settings68.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder73.version((long) 1);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.Settings settings78 = settings76.filter(strPredicate77);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder73.settings(settings76);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state80 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder79.state(state80);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate83 = null;
        org.elasticsearch.common.settings.Settings settings84 = settings82.filter(strPredicate83);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder81.settings(settings82);
        java.lang.Boolean boolean88 = settings82.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.lang.Boolean boolean91 = settings82.getAsBoolean("hi!", (java.lang.Boolean) false);
        java.util.function.Predicate<java.lang.String> strPredicate92 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings93 = settings82.filter(strPredicate92);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction94 = null;
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder65.putProperties(strMap71, strPredicate92, strFunction94);
        java.util.List<java.lang.String> strList97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder98 = builder65.putArray("-1", strList97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + state80 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state80.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + boolean88 + "' != '" + false + "'", boolean88, false);
        org.junit.Assert.assertEquals("'" + boolean91 + "' != '" + false + "'", boolean91, false);
        org.junit.Assert.assertNotNull(strPredicate92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder24.put("index.blocks.read", "index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long31 = indexMetaData30.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap32 = indexMetaData30.getMappings();
        int int33 = indexMetaData30.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap34 = indexMetaData30.getActiveAllocationIds();
        org.elasticsearch.Version version35 = indexMetaData30.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData30.requireFilters();
        long long37 = indexMetaData30.getCreationDate();
        org.elasticsearch.Version version38 = indexMetaData30.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue43 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue44 = settings39.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue43);
        java.lang.Boolean boolean47 = settings39.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings49 = settings39.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings39);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder24.put(settings39);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder24.put("index.creation_date_string", 0);
        java.lang.String str56 = builder24.remove("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap34);
        org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(version38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(sizeValue44);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + false + "'", boolean47, false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        boolean boolean21 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings12.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = settings22.getAsMemory("index.shadow_replicas", "index.data_path");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.shadow_replicas] with value [index.data_path] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = settings3.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.put(settings14);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = settings14.getAsStructuredMap();
        java.lang.String str20 = settings14.toDelimitedString('a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) 1);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder23.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.state(state30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder31.settings(settings32);
        java.lang.Boolean boolean38 = settings32.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.lang.Boolean boolean41 = settings32.getAsBoolean("hi!", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings45.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params48 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = settings45.toXContent(xContentBuilder47, params48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap51 = indexMetaData50.getMappings();
        int int52 = indexMetaData50.getNumberOfShards();
        long long53 = indexMetaData50.getCreationDate();
        boolean boolean54 = settings45.equals((java.lang.Object) long53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long57 = indexMetaData56.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap58 = indexMetaData56.getMappings();
        int int59 = indexMetaData56.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.common.settings.Settings settings62 = settings60.filter(strPredicate61);
        java.lang.String str64 = settings62.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getAsGroups();
        java.lang.String str67 = settings62.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings62);
        int int69 = indexSettings68.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting70 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue71 = indexSettings68.getValue(timeValueSetting70);
        int int72 = indexSettings68.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = indexSettings68.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = settings45.getAsBytesSize("state-", byteSizeValue73);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings32.getAsBytesSize("index.version.upgraded", byteSizeValue74);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue76 = settings14.getAsBytesSize("index.creation_date_string", byteSizeValue75);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = settings3.getAsBytesSize("index.version.upgraded", byteSizeValue75);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + false + "'", boolean38, false);
        org.junit.Assert.assertEquals("'" + boolean41 + "' != '" + false + "'", boolean41, false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(params48);
        org.junit.Assert.assertNull(xContentBuilder49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting70);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10000 + "'", int72 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertNotNull(byteSizeValue74);
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(byteSizeValue76);
        org.junit.Assert.assertNotNull(byteSizeValue77);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings12.getNodeSettings();
        int int18 = indexSettings12.getMaxResultWindow();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        int int20 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData14.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getByPrefix("index.shadow_replicas");
        java.lang.String str37 = settings29.get("hi!", "");
        java.util.Set<java.lang.String> strSet38 = settings29.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder19.putActiveAllocationIds((int) (byte) 0, strSet38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.creationDate((long) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings21 = builder11.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder7.settings(builder11);
        long long23 = builder7.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder21.replacePropertyPlaceholders();
        java.io.InputStream inputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder28 = builder21.loadFromStream("index.shadow_replicas", inputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "primary_terms" + "'", str2, "primary_terms");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        java.lang.String str49 = settings47.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder41.put(settings47);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.version((long) 1);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder54.settings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.state(state61);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.Settings settings65 = settings63.filter(strPredicate64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder62.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap70 = settings63.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder50.put(settings63);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder38.put(strMap72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder74.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder76.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder81.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings84 = builder83.build();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder73.put(settings84);
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate87 = null;
        org.elasticsearch.common.settings.Settings settings88 = settings86.filter(strPredicate87);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap89 = settings88.getAsGroups();
        org.elasticsearch.common.settings.Settings settings91 = settings88.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version93 = null;
        org.elasticsearch.Version version94 = settings88.getAsVersion("index.creation_date_string", version93);
        java.util.function.Predicate<java.lang.String> strPredicate95 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings96 = settings88.filter(strPredicate95);
        org.elasticsearch.common.settings.Settings settings97 = indexScopedSettings0.diff(settings84, settings96);
        org.elasticsearch.common.settings.Setting.Property property98 = indexScopedSettings0.getScope();
        java.lang.String str99 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(version94);
        org.junit.Assert.assertNotNull(strPredicate95);
        org.junit.Assert.assertNotNull(settings96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertTrue("'" + property98 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property98.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.getTranslogDurability();
        boolean boolean22 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getAsGroups();
        java.lang.String str19 = settings14.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings14);
        java.lang.String str21 = indexSettings20.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexSettings20.getIndexMetaData();
        java.lang.String str23 = indexSettings20.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher24 = indexSettings20.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexMetaData0.fromXContent(xContentParser7, parseFieldMatcher24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher24);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData11.getMappings();
        int int14 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        java.lang.String str22 = settings17.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        java.lang.String str24 = indexSettings23.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings23.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData25.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue34 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue35 = settings30.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings29.dryRun(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings36);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings36);
        boolean boolean40 = indexSettings39.isOnSharedFilesystem();
        java.lang.String str41 = indexSettings39.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(sizeValue35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings22.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue43 = indexSettings40.getValue(timeValueSetting42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings22.getValue(timeValueSetting42);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer45 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueConsumer45, timeValueConsumer46);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting49 = indexScopedSettings0.get("index.priority");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings50.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue54);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.Settings settings58 = settings56.filter(strPredicate57);
        java.util.Set<java.lang.String> strSet59 = settings58.names();
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings0.diff(settings50, settings58);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings50, streamOutput61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(wildcardSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(sizeValue55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(settings60);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        java.lang.String str17 = indexSettings12.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        int int17 = indexSettings12.getNumberOfReplicas();
        int int18 = indexSettings12.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean64 = indexSettings12.isIndexUsingShadowReplicas();
        java.lang.String str65 = indexSettings12.getUUID();
        boolean boolean66 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean67 = indexSettings12.isShadowReplicaIndex();
        boolean boolean68 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_na_" + "'", str65, "_na_");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("state-", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap20 = indexMetaData18.getMappings();
        int int21 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getAsGroups();
        java.lang.String str29 = settings24.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        int int31 = indexSettings30.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig32 = indexSettings30.getMergeSchedulerConfig();
        boolean boolean33 = indexSettings30.isWarmerEnabled();
        org.elasticsearch.Version version34 = indexSettings30.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder14.put("index.priority", version34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.version((long) 1);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder38.settings(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.state(state45);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings47.filter(strPredicate48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder46.settings(settings47);
        java.lang.String str52 = settings47.get("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings47.getGroups("_na_");
        java.lang.String str56 = settings47.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version59 = indexMetaData58.getCreationVersion();
        org.elasticsearch.Version version60 = settings47.getAsVersion("primary_terms", version59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder14.put("index.blocks.metadata", version59);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder14.loadFromSource("active_allocations");
        java.io.InputStream inputStream65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder66 = builder14.loadFromStream("index.creation_date", inputStream65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder4.mapping("primary_terms");
        long long7 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.version(100L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.putCustom("index.blocks.metadata", custom11);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getRefreshInterval();
        java.lang.String str19 = indexSettings12.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getAsGroups();
        java.lang.String str31 = settings26.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        java.lang.String str33 = indexSettings32.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings32.getValue(timeValueSetting34);
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings12.getValue(timeValueSetting34);
        int int37 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(timeValueSetting34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        int int17 = indexSettings12.getNumberOfReplicas();
        boolean boolean18 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.state(state4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.removeAlias("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        int int8 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.numberOfShards((int) '#');
        long long12 = builder10.primaryTerm((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.state(state10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.putCustom("archived.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.put("_na_", "primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder17.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder14.settings(builder17);
        int int25 = builder24.numberOfShards();
        java.lang.String str26 = builder24.index();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index.creation_date" + "'", str26, "index.creation_date");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.lang.String str8 = indexMetaData7.getIndexUUID();
        long long9 = indexMetaData7.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.readDiffFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put(settings18);
        java.lang.String[] strArray39 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder12.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder2.putArray("", (java.util.List<java.lang.String>) strList40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.version((long) 1);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.Settings settings50 = settings48.filter(strPredicate49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder45.settings(settings48);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.state(state52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder53.settings(settings54);
        java.lang.Boolean boolean60 = settings54.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = settings54.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue63 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue64 = settings54.getAsSize("state-", sizeValue63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params66 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings54.toXContent(xContentBuilder65, params66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = settings54.getAsMap();
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings71.getAsGroups();
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version76 = null;
        org.elasticsearch.Version version77 = settings71.getAsVersion("index.creation_date_string", version76);
        java.util.function.Predicate<java.lang.String> strPredicate78 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings79 = settings71.filter(strPredicate78);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder2.putProperties(strMap68, strPredicate78, strFunction80);
        java.util.concurrent.TimeUnit timeUnit84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder85 = builder81.put("index.creation_date", (long) (short) 1, timeUnit84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + boolean60 + "' != '" + false + "'", boolean60, false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(sizeValue64);
        org.junit.Assert.assertNotNull(params66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(version77);
        org.junit.Assert.assertNotNull(strPredicate78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.putNull("index.shared_filesystem.recover_on_any_node");
        java.util.concurrent.TimeUnit timeUnit62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder63 = builder57.put("index.shadow_replicas", 0L, timeUnit62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue4 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue5 = settings0.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue4);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue9 = settings0.getAsMemory("index.shared_filesystem.recover_on_any_node", "index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [index.shared_filesystem]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(sizeValue5);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        java.lang.String str4 = builder0.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.putNull("index.auto_expand_replicas");
        java.lang.String str8 = builder0.get("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.lang.String str25 = settings17.get("hi!", "");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue27 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = settings17.getAsBytesSize("state-", byteSizeValue27);
        org.elasticsearch.common.unit.SizeValue sizeValue30 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue31 = settings17.getAsSize("index.auto_expand_replicas", sizeValue30);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder0.put(settings17);
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.put("index.number_of_shards", (long) (byte) 0, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(byteSizeValue28);
        org.junit.Assert.assertNull(sizeValue31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.putAlias(aliasMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        java.lang.String str18 = indexSettings12.getNodeName();
        org.elasticsearch.Version version19 = indexSettings12.getIndexVersionCreated();
        long long20 = indexSettings12.getGcDeletesInMillis();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig21 = indexSettings12.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60000L + "'", long20 == 60000L);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig21);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.version.created");
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings13, streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.version.upgraded_string", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        java.lang.String str42 = settings40.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put(settings40);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder34.putArray("", (java.util.List<java.lang.String>) strList51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder30.putArray("index.auto_expand_replicas", (java.util.List<java.lang.String>) strList51);
        org.elasticsearch.common.settings.Settings settings55 = builder30.build();
        java.lang.String str57 = settings55.get("index.");
        boolean boolean58 = settings55.isEmpty();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder2.loadFromSource("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("index.shared_filesystem", (double) 100.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm((int) (byte) 1, (long) (short) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putAlias(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        int int20 = indexSettings12.getMaxResultWindow();
        boolean boolean21 = indexSettings12.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder30.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder30.internalMap();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder30.put(objArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder24.put(objArray37);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.put(objDictionary40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        boolean boolean18 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        java.lang.String str11 = settings9.toDelimitedString('4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994" + "'", str11, "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put(objArray9);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put("index.", (int) (byte) 0);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder10.put("index.blocks.read_only", (-1L), byteSizeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings settings30 = settings25.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet31 = settings30.names();
        java.lang.String[] strArray33 = settings30.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap35 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData14.includeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput37 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData14.writeTo(streamOutput37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        int int15 = indexSettings12.getMaxResultWindow();
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean17 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        boolean boolean20 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder5.settings(settings16);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder5.primaryTerm((int) (byte) 0, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        int int12 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = indexMetaData0.readFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(version13);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("archived.", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.lang.String str25 = settings23.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put(settings23);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        java.lang.String str42 = settings40.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put(settings40);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.Settings settings51 = settings49.filter(strPredicate50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings51.getAsGroups();
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version56 = null;
        org.elasticsearch.Version version57 = settings51.getAsVersion("index.creation_date_string", version56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = settings51.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder45.putProperties(strMap58, strPredicate59, strFunction60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder31.put(strMap58);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder7.put(strMap58);
        org.elasticsearch.common.settings.Settings settings64 = builder7.build();
        java.nio.file.Path path65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder66 = builder7.loadFromPath(path65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(version57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(settings64);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamInput streamInput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData16.readDiffFrom(streamInput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet23 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.creationDate((-1L));
        int int27 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.removeAlias("_all");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        boolean boolean14 = indexSettings12.isQueryStringLenient();
        java.lang.String str15 = indexSettings12.getUUID();
        int int16 = indexSettings12.getNumberOfShards();
        boolean boolean17 = indexSettings12.isQueryStringLenient();
        long long18 = indexSettings12.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put("index.blocks.read", (long) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder2.put("index.creation_date_string", (double) 10.0f);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", (long) (byte) -1, byteSizeUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings11.getFlushThresholdSize();
        java.lang.String str13 = indexSettings11.getUUID();
        int int14 = indexSettings11.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("state-", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder13.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean18 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        java.lang.String str20 = indexSettings12.getUUID();
        org.elasticsearch.Version version21 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.Version version22 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(version22);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params4 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = indexMetaData0.toXContent(xContentBuilder3, params4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(params4);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long38 = indexMetaData0.getVersion();
        int int39 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        long long43 = indexMetaData40.primaryTerm(0);
        org.apache.lucene.util.Version version44 = indexMetaData40.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version45 = indexMetaData40.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData40.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff49 = indexMetaData0.diff(indexMetaData40);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData40.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData52 = indexMetaData40.mappingOrDefault("index.data_path");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNull(version44);
        org.junit.Assert.assertNull(version45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertNotNull(indexMetaDataDiff49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNull(mappingMetaData52);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings12.getIndexMetaData();
        org.elasticsearch.Version version65 = indexMetaData64.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap66 = indexMetaData64.getAliases();
        // The following exception was thrown during execution in test generation
        try {
            long long68 = indexMetaData64.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData9.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getVersion();
        org.elasticsearch.Version version14 = indexMetaData12.getUpgradedVersion();
        boolean boolean15 = indexMetaData9.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(settings16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        long long21 = indexMetaData19.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder24.putNull("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.loadFromSource("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.normalizePrefix("100.0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("archived.", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.metadata", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("index.auto_expand_replicas", "");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.common.io.stream.StreamInput streamInput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData8.readDiffFrom(streamInput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version((long) 1);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings17.filter(strPredicate18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder14.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.state(state21);
        byte byte23 = state21.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder12.state(state21);
        byte byte25 = state21.id();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.lang.String str16 = settings8.get("hi!", "");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings8.getGroups("index.number_of_shards", false);
        java.lang.String[] strArray21 = settings8.getAsArray("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = settings8.getAsMemory("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "index.blocks.read_only", "state-", "index.version.upgraded", "index.version.upgraded", "index.version.minimum_compatible", "index.version.upgraded_string", "", "_na_", "index.number_of_shards", "index.auto_expand_replicas" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("index.uuid", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.numberOfReplicas((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.version((long) 1);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder30.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.state(state37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder38.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.putCustom("state-", custom44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder42.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder47.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.version((long) 1);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder50.settings(settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.state(state57);
        byte byte59 = state57.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder47.state(state57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder28.state(state57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom63 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder61.putCustom("100.0", custom63);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) 0 + "'", byte59 == (byte) 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings11.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("archived.");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings0.dryRun(settings11);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put(settings24);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder18.putArray("", (java.util.List<java.lang.String>) strList35);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder40.putNull("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder40.put("index.number_of_replicas", (double) ' ');
        java.lang.String str49 = builder40.get("index.blocks.read");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [.0]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData14.includeFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData20.getMappings();
        int int23 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str28 = settings26.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings26.getAsGroups();
        java.lang.String str31 = settings26.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26);
        int int33 = indexSettings32.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexSettings32.getValue(timeValueSetting34);
        boolean boolean36 = indexSettings32.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings32.getRefreshInterval();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher38 = indexSettings32.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = indexMetaData14.fromXContent(xContentParser19, parseFieldMatcher38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(parseFieldMatcher38);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxRescoreWindow();
        int int14 = indexSettings12.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        int int15 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(timeValue17);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.state(state28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.settings(settings30);
        boolean boolean34 = settings30.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder19.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder13.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData38.getMappings();
        int int40 = indexMetaData38.getNumberOfShards();
        long long41 = indexMetaData38.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = indexScopedSettings0.copy(settings30, indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings44.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue48 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue49 = settings44.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue48);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings43.dryRun(settings50);
        java.lang.String str52 = indexScopedSettings43.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long54 = indexMetaData53.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap55 = indexMetaData53.getMappings();
        int int56 = indexMetaData53.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        java.lang.String str61 = settings59.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings59.getAsGroups();
        java.lang.String str64 = settings59.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings59);
        int int66 = indexSettings65.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings65.getValue(timeValueSetting67);
        boolean boolean69 = indexSettings65.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue70 = indexSettings65.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long72 = indexMetaData71.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap73 = indexMetaData71.getMappings();
        int int74 = indexMetaData71.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.Settings settings77 = settings75.filter(strPredicate76);
        java.lang.String str79 = settings77.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings77.getAsGroups();
        java.lang.String str82 = settings77.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings77);
        int int84 = indexSettings83.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting85 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue86 = indexSettings83.getValue(timeValueSetting85);
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings65.getValue(timeValueSetting85);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer88 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer89 = null;
        indexScopedSettings43.addSettingsUpdateConsumer(timeValueSetting85, timeValueConsumer88, timeValueConsumer89);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer91 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting85, timeValueConsumer91);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(sizeValue49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(timeValue70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting85);
        org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertNotNull(timeValue87);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData6.getMappings();
        int int9 = indexMetaData6.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getAsGroups();
        java.lang.String str17 = settings12.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12);
        int int19 = indexSettings18.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings18.getValue(timeValueSetting20);
        boolean boolean22 = indexSettings18.isOnSharedFilesystem();
        java.lang.String str23 = indexSettings18.getUUID();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings18.getNodeSettings();
        java.lang.String[] strArray26 = settings24.getAsArray("index.version.created_string");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings24);
        java.lang.String str29 = settings24.get("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.number_of_shards");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            mappingMetaData9.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put("index.blocks.metadata", (-1.0f));
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap15 = indexMetaData13.getMappings();
        int int16 = indexMetaData13.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings17.filter(strPredicate18);
        java.lang.String str21 = settings19.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getAsGroups();
        java.lang.String str24 = settings19.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings19);
        int int26 = indexSettings25.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig27 = indexSettings25.getMergeSchedulerConfig();
        int int28 = indexSettings25.getMaxResultWindow();
        boolean boolean29 = indexSettings25.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version30 = indexSettings25.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder2.put("state-", version30);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder2.put("index.version.upgraded_string", (int) (byte) 1);
        java.nio.file.Path path35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.loadFromPath(path35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version2 = indexMetaData0.getCreationVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings11.getFlushThresholdSize();
        java.lang.String str13 = indexSettings11.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings11.getGlobalCheckpointInterval();
        org.apache.lucene.index.MergePolicy mergePolicy15 = indexSettings11.getMergePolicy();
        int int16 = indexSettings11.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(mergePolicy15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version15 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getNodeSettings();
        boolean boolean17 = indexSettings12.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings8.getAsStructuredMap();
        java.lang.String str14 = settings8.toDelimitedString('a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version((long) 1);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder17.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.state(state24);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder25.settings(settings26);
        java.lang.Boolean boolean32 = settings26.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.lang.Boolean boolean35 = settings26.getAsBoolean("hi!", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings39.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params42 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = settings39.toXContent(xContentBuilder41, params42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap45 = indexMetaData44.getMappings();
        int int46 = indexMetaData44.getNumberOfShards();
        long long47 = indexMetaData44.getCreationDate();
        boolean boolean48 = settings39.equals((java.lang.Object) long47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long51 = indexMetaData50.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap52 = indexMetaData50.getMappings();
        int int53 = indexMetaData50.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        java.lang.String str58 = settings56.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings56.getAsGroups();
        java.lang.String str61 = settings56.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings56);
        int int63 = indexSettings62.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings62.getValue(timeValueSetting64);
        int int66 = indexSettings62.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = indexSettings62.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue68 = settings39.getAsBytesSize("state-", byteSizeValue67);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = settings26.getAsBytesSize("index.version.upgraded", byteSizeValue68);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = settings8.getAsBytesSize("index.creation_date_string", byteSizeValue69);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData72);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap74 = indexMetaData72.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData72.excludeFilters();
        org.elasticsearch.Version version76 = indexMetaData72.getCreationVersion();
        org.elasticsearch.Version version77 = settings8.getAsVersion("", version76);
        java.lang.String str79 = settings8.get("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings8.getGroups("100.0", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + false + "'", boolean35, false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(params42);
        org.junit.Assert.assertNull(xContentBuilder43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue67);
        org.junit.Assert.assertNotNull(byteSizeValue68);
        org.junit.Assert.assertNotNull(byteSizeValue69);
        org.junit.Assert.assertNotNull(byteSizeValue70);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(version77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder21.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.normalizePrefix("index.version.created_string");
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.put("index.auto_expand_replicas", (long) (byte) 1, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean16 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version17 = indexSettings12.getIndexVersionCreated();
        long long18 = indexSettings12.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings12.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings8.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings14 = settings8.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings16 = settings8.getAsSettings("primary_terms");
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings18 = settings8.filter(strPredicate17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getAsGroups(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        boolean boolean58 = indexSettings54.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings54.getRefreshInterval();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings54.getNodeSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings68.filter(strPredicate69);
        java.lang.String str72 = settings70.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder64.put(settings70);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = settings70.getAsMap();
        java.lang.String str77 = settings70.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue79 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue80 = settings70.getAsSize("state-", sizeValue79);
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.Settings settings83 = settings81.filter(strPredicate82);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap84 = settings83.getAsGroups();
        org.elasticsearch.common.settings.Settings settings86 = settings83.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings61.diff(settings70, settings83);
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings0.diff(settings60, settings83);
        org.elasticsearch.common.settings.Setting.Property property89 = indexScopedSettings0.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData90);
        long long93 = indexMetaData90.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData94 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int95 = indexMetaData94.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff96 = indexMetaData90.diff(indexMetaData94);
        org.elasticsearch.index.Index index97 = indexMetaData94.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings98 = indexMetaData94.getSettings();
        org.elasticsearch.common.settings.Settings settings99 = indexScopedSettings0.applySettings(settings98);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "primary_terms" + "'", str77, "primary_terms");
        org.junit.Assert.assertNull(sizeValue80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + property89 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property89.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff96);
        org.junit.Assert.assertNull(index97);
        org.junit.Assert.assertNotNull(settings98);
        org.junit.Assert.assertNotNull(settings99);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        boolean boolean5 = indexMetaData0.isSameUUID("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = settings7.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings7.toXContent(xContentBuilder9, params10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = indexMetaData0.toXContent(xContentBuilder6, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.upgraded_string", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(settings37);
        org.elasticsearch.common.settings.Settings settings42 = settings37.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.blocks.metadata");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings42.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder25.put(strMap45);
        java.nio.file.Path path47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder48 = builder25.loadFromPath(path47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        java.lang.String str17 = indexSettings12.getUUID();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getNodeSettings();
        long long19 = indexSettings12.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 60000L + "'", long19 == 60000L);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings2.getAsGroups(false);
        java.lang.String str9 = settings2.get("index.shared_filesystem");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = settings2.getAsMemory("index.version.created_string", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.version.created_string] with value [index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put(objArray9);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put("index.", (int) (byte) 0);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.loadFromSource("index.uuid");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder23 = builder19.put("index.auto_expand_replicas", (long) (byte) -1, byteSizeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings8.getAsStructuredMap();
        java.lang.String str14 = settings8.toDelimitedString('a');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version((long) 1);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder17.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.state(state24);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder25.settings(settings26);
        java.lang.Boolean boolean32 = settings26.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = settings26.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue35 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue36 = settings26.getAsSize("state-", sizeValue35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = settings26.toXContent(xContentBuilder37, params38);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = settings8.toXContent(xContentBuilder15, params38);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings8, streamOutput41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(sizeValue36);
        org.junit.Assert.assertNotNull(params38);
        org.junit.Assert.assertNull(xContentBuilder39);
        org.junit.Assert.assertNull(xContentBuilder40);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings8.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings14 = settings8.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings16 = settings8.getAsSettings("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder26.putArray("index.auto_expand_replicas", strArray34);
        java.lang.String[] strArray36 = settings16.getAsArray("index.version.minimum_compatible", strArray34);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings16, streamOutput37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.state(state28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.settings(settings30);
        boolean boolean34 = settings30.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder19.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder13.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData38.getMappings();
        int int40 = indexMetaData38.getNumberOfShards();
        long long41 = indexMetaData38.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = indexScopedSettings0.copy(settings30, indexMetaData38);
        org.elasticsearch.common.settings.Setting.Property property43 = indexScopedSettings0.getScope();
        java.lang.String str44 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + property43 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property43.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder32.put("index.number_of_shards", (int) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder32.put("state-", (float) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.normalizePrefix("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder63.put("index.number_of_shards", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        long long17 = indexSettings12.getGcDeletesInMillis();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        boolean boolean19 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 60000L + "'", long17 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put(settings18);
        java.lang.String[] strArray39 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder12.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder2.putArray("", (java.util.List<java.lang.String>) strList40);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.loadFromSource("state-");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.creation_date_string", "index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        java.nio.file.Path path14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.loadFromPath(path14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str15 = settings10.get("");
        boolean boolean16 = settings10.isEmpty();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.version((long) 1);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings13.filter(strPredicate14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.settings(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.version((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.util.Set<java.lang.String> strSet27 = settings26.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder22.putActiveAllocationIds((int) (byte) 1, strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder7.putActiveAllocationIds((int) (byte) 1, strSet27);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = builder7.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.creationDate((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = builder12.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: [index.version.created] is not present in the index settings for index with uuid: [null]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings2.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue6 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue7 = settings2.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue6);
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings1.dryRun(settings8);
        java.lang.String str10 = indexScopedSettings1.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData11.getMappings();
        int int14 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        java.lang.String str22 = settings17.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        int int24 = indexSettings23.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings23.getValue(timeValueSetting25);
        boolean boolean27 = indexSettings23.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings23.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData29.getMappings();
        int int32 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getAsGroups();
        java.lang.String str40 = settings35.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings35);
        int int42 = indexSettings41.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getValue(timeValueSetting43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings23.getValue(timeValueSetting43);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer47 = null;
        indexScopedSettings1.addSettingsUpdateConsumer(timeValueSetting43, timeValueConsumer46, timeValueConsumer47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long50 = indexMetaData49.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap51 = indexMetaData49.getMappings();
        int int52 = indexMetaData49.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        java.lang.String str57 = settings55.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings55.getAsGroups();
        java.lang.String str60 = settings55.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55);
        int int62 = indexSettings61.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings61.getValue(timeValueSetting63);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer65 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting43, timeValueSetting63, timeValueBiConsumer65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder68.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate75 = null;
        org.elasticsearch.common.settings.Settings settings76 = settings74.filter(strPredicate75);
        java.lang.String str78 = settings76.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder70.put(settings76);
        org.elasticsearch.common.settings.Settings settings81 = settings76.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet82 = settings81.names();
        org.elasticsearch.common.settings.Settings settings84 = settings81.getByPrefix("");
        indexScopedSettings67.validate(settings84);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long87 = indexMetaData86.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap88 = indexMetaData86.getMappings();
        org.elasticsearch.common.settings.Settings settings89 = indexMetaData86.getSettings();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings67.dryRun(settings89);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings0.dryRun(settings90);
        org.elasticsearch.common.settings.Settings settings93 = settings91.getByPrefix("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(sizeValue7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings93);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("index.auto_expand_replicas", strArray16);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.shared_filesystem");
        java.lang.String[] strArray25 = settings19.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.putArray("index.version.upgraded", strArray25);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder29.internalMap();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.put(objArray36);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put(objArray36);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.read_only", (float) '#');
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.version.upgraded", (double) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.version((long) 1);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder36.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.state(state43);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder44.settings(settings45);
        java.lang.Boolean boolean51 = settings45.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = settings45.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder32.put(settings45);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder53.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.version.minimum_compatible", 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long61 = indexMetaData60.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap62 = indexMetaData60.getMappings();
        int int63 = indexMetaData60.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.Settings settings66 = settings64.filter(strPredicate65);
        java.lang.String str68 = settings66.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getAsGroups();
        java.lang.String str71 = settings66.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings66);
        int int73 = indexSettings72.getMaxResultWindow();
        java.lang.String str74 = indexSettings72.getUUID();
        int int75 = indexSettings72.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue76 = indexSettings72.getFlushThresholdSize();
        java.lang.Class<?> wildcardClass77 = indexSettings72.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder55.put("hi!", (java.lang.Class) wildcardClass77);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder19.put("active_allocations", (java.lang.Class) wildcardClass77);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder19.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put("index.uuid", (float) 60000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + boolean51 + "' != '" + false + "'", boolean51, false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10000 + "'", int73 == 10000);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "_na_" + "'", str74, "_na_");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        java.lang.String str16 = indexSettings12.getUUID();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.auto_expand_replicas");
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int26 = builder25.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.index("index.number_of_shards");
        int int31 = builder30.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.version((long) 1);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder33.settings(settings36);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.state(state40);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder41.settings(settings42);
        java.lang.Boolean boolean48 = settings42.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = settings42.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue51 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue52 = settings42.getAsSize("state-", sizeValue51);
        org.elasticsearch.common.unit.TimeValue timeValue54 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue55 = settings42.getAsTime("index.version.upgraded_string", timeValue54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder30.settings(settings42);
        boolean boolean57 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        long long61 = indexMetaData58.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int63 = indexMetaData62.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff64 = indexMetaData58.diff(indexMetaData62);
        long long65 = indexMetaData58.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap66 = indexMetaData58.getAliases();
        org.apache.lucene.util.Version version67 = indexMetaData58.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap68 = indexMetaData58.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = indexScopedSettings0.copy(settings42, indexMetaData58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder71.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate78 = null;
        org.elasticsearch.common.settings.Settings settings79 = settings77.filter(strPredicate78);
        java.lang.String str81 = settings79.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder73.put(settings79);
        java.util.Map<java.lang.String, java.lang.String> strMap83 = settings79.getAsMap();
        java.lang.String str86 = settings79.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue88 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue89 = settings79.getAsSize("state-", sizeValue88);
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate91 = null;
        org.elasticsearch.common.settings.Settings settings92 = settings90.filter(strPredicate91);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings92.getAsGroups();
        org.elasticsearch.common.settings.Settings settings95 = settings92.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings96 = indexScopedSettings70.diff(settings79, settings92);
        indexScopedSettings0.validate(settings79);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + false + "'", boolean48, false);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(sizeValue52);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNull(version67);
        org.junit.Assert.assertNotNull(strImmutableOpenMap68);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "primary_terms" + "'", str86, "primary_terms");
        org.junit.Assert.assertNull(sizeValue89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(settings95);
        org.junit.Assert.assertNotNull(settings96);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet23 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.creationDate((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = builder28.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.Boolean boolean16 = settings10.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = settings10.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings10.getAsSize("state-", sizeValue19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings10.toXContent(xContentBuilder21, params22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = settings10.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings10.getGroups("active_allocations", true);
        java.lang.String str29 = settings10.get("index.priority");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "index.blocks.read_only", "state-", "index.version.upgraded", "index.version.upgraded", "index.version.minimum_compatible", "index.version.upgraded_string", "", "_na_", "index.number_of_shards", "index.auto_expand_replicas" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version(60000L);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.putAlias(aliasMetaData27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfReplicas((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.numberOfReplicas(1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.primaryTerm((int) (byte) 1, (long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.state(state10);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings settings26 = settings21.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet27 = settings21.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder11.putActiveAllocationIds(0, strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.putActiveAllocationIds((int) (short) 0, strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.version((long) 1);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder32.settings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.state(state39);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder40.settings(settings41);
        java.lang.Boolean boolean47 = settings41.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.lang.Boolean boolean50 = settings41.getAsBoolean("hi!", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings54.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = settings54.toXContent(xContentBuilder56, params57);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap60 = indexMetaData59.getMappings();
        int int61 = indexMetaData59.getNumberOfShards();
        long long62 = indexMetaData59.getCreationDate();
        boolean boolean63 = settings54.equals((java.lang.Object) long62);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long66 = indexMetaData65.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap67 = indexMetaData65.getMappings();
        int int68 = indexMetaData65.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.lang.String str73 = settings71.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings71.getAsGroups();
        java.lang.String str76 = settings71.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings71);
        int int78 = indexSettings77.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting79 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue80 = indexSettings77.getValue(timeValueSetting79);
        int int81 = indexSettings77.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue82 = indexSettings77.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue83 = settings54.getAsBytesSize("state-", byteSizeValue82);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue84 = settings41.getAsBytesSize("index.version.upgraded", byteSizeValue83);
        java.util.Set<java.lang.String> strSet85 = settings41.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder29.putActiveAllocationIds((int) (byte) 0, strSet85);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + false + "'", boolean47, false);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + false + "'", boolean50, false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(params57);
        org.junit.Assert.assertNull(xContentBuilder58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting79);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10000 + "'", int81 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue82);
        org.junit.Assert.assertNotNull(byteSizeValue83);
        org.junit.Assert.assertNotNull(byteSizeValue84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting16 = indexScopedSettings0.get("index.version.created");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings0.get("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.version((long) 1);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder34.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.state(state41);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder42.settings(settings43);
        java.lang.Boolean boolean49 = settings43.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = settings43.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder30.put(settings43);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = builder51.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((long) 1);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.Settings settings60 = settings58.filter(strPredicate59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder55.settings(settings58);
        int int62 = builder55.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder63 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.lang.String str73 = settings71.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder65.put(settings71);
        org.elasticsearch.common.settings.Settings settings76 = settings71.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet77 = settings71.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder55.settings(settings71);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state79 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder55.state(state79);
        java.lang.Class<?> wildcardClass81 = builder55.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder51.put("hi!", (java.lang.Class) wildcardClass81);
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap84 = settings83.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params86 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder87 = settings83.toXContent(xContentBuilder85, params86);
        java.lang.String[] strArray89 = settings83.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder51.put(settings83);
        java.lang.String str93 = settings83.get("primary_terms", "active_allocations");
        org.elasticsearch.common.settings.Settings settings94 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings83);
        java.lang.String str97 = settings94.get("index.blocks.read_only", "hi!");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardSetting16);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + false + "'", boolean49, false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state79.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(params86);
        org.junit.Assert.assertNull(xContentBuilder87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "active_allocations" + "'", str93, "active_allocations");
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        java.lang.String str13 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version14 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "index.blocks.read_only", "state-", "index.version.upgraded", "index.version.upgraded", "index.version.minimum_compatible", "index.version.upgraded_string", "", "_na_", "index.number_of_shards", "index.auto_expand_replicas" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder7.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.putMapping("index.version.minimum_compatible", "active_allocations");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting16 = indexScopedSettings0.get("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.version((long) 1);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder32.settings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.state(state39);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder40.settings(settings41);
        java.lang.Boolean boolean47 = settings41.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = settings41.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder28.put(settings41);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.version((long) 1);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.Settings settings58 = settings56.filter(strPredicate57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder53.settings(settings56);
        int int60 = builder53.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings67.filter(strPredicate68);
        java.lang.String str71 = settings69.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder63.put(settings69);
        org.elasticsearch.common.settings.Settings settings74 = settings69.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet75 = settings69.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder53.settings(settings69);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state77 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder53.state(state77);
        java.lang.Class<?> wildcardClass79 = builder53.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder49.put("hi!", (java.lang.Class) wildcardClass79);
        org.elasticsearch.common.settings.Settings settings81 = builder49.build();
        java.util.Set<java.lang.String> strSet82 = settings81.names();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(settings81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardSetting16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + false + "'", boolean47, false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state77.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.version.upgraded", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.creation_date", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder20.put("index.blocks.read", (int) (byte) 1);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder30 = builder20.put("index.version.upgraded", 0L, byteSizeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder2.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings12.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData4.getMappings();
        int int7 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getAsGroups();
        java.lang.String str15 = settings10.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings10);
        java.lang.String str17 = indexSettings16.getNodeName();
        boolean boolean18 = indexSettings16.isDefaultAllowUnmappedFields();
        boolean boolean19 = indexSettings16.isWarmerEnabled();
        int int20 = indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = indexSettings16.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher22 = indexSettings16.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = indexMetaData0.fromXContent(xContentParser3, parseFieldMatcher22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(parseFieldMatcher22);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings5.getGroups("index.number_of_shards", true);
        org.elasticsearch.common.settings.Settings settings31 = settings5.getAsSettings("state-");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder8.putAlias(builder13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        long long7 = indexMetaData4.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int9 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData4.diff(indexMetaData8);
        long long11 = indexMetaData4.getVersion();
        java.lang.String str12 = indexMetaData4.getIndexUUID();
        org.elasticsearch.Version version13 = indexMetaData4.getCreationVersion();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData4.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version16 = indexMetaData4.getCreationVersion();
        java.lang.String str17 = indexMetaData4.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData4.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getNumberOfShards();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getRefreshInterval();
        int int16 = indexSettings12.getNumberOfReplicas();
        int int17 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int20 = builder19.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.version((long) 1);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder30.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.state(state37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder38.settings(settings39);
        boolean boolean43 = settings39.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings39.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder28.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder22.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap48 = indexMetaData47.getMappings();
        int int49 = indexMetaData47.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings50 = indexMetaData47.getSettings();
        org.apache.lucene.util.Version version51 = indexMetaData47.getMinimumCompatibleVersion();
        int int52 = indexMetaData47.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = indexMetaData47.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder46.state(state53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder17.state(state53);
        byte byte56 = state53.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNull(version51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.state(state25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder26.putCustom("", custom32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.version((long) 1);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder35.settings(settings38);
        org.elasticsearch.common.settings.Settings settings43 = settings38.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder26.settings(settings43);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder13.put(settings43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        java.lang.String str57 = settings55.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder49.put(settings55);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder49.putArray("", (java.util.List<java.lang.String>) strList66);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder45.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList66);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder45.put("index.shadow_replicas", false);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder45.put("100.0", false);
        java.io.InputStream inputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder78 = builder45.loadFromStream("index.number_of_replicas", inputStream77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData3.getMappings();
        int int5 = indexMetaData3.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData3.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(version9);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder44.removeAllAliases();
        long long46 = builder45.version();
        // The following exception was thrown during execution in test generation
        try {
            long long48 = builder45.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        boolean boolean14 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getRefreshInterval();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(mergePolicy16);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        boolean boolean18 = indexSettings12.hasCustomDataPath();
        int int19 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        boolean boolean19 = indexSettings12.matchesIndexName("index.shared_filesystem");
        int int20 = indexSettings12.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.version.created");
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.lang.String[] strArray18 = settings16.getAsArray("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        boolean boolean19 = indexSettings12.matchesIndexName("hi!");
        int int20 = indexSettings12.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("index.auto_expand_replicas", custom11);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.putMapping(mappingMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put(objArray9);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.blocks.metadata", "");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder13.put(objDictionary17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getGroups("index.shared_filesystem");
        java.lang.String[] strArray6 = settings0.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.unit.SizeValue sizeValue8 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue9 = settings0.getAsSize("index.", sizeValue8);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNull(sizeValue9);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexScopedSettings0.get(timeValueSetting27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.version((long) 1);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder31.settings(settings34);
        org.elasticsearch.common.settings.Settings settings39 = settings34.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue41 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue42 = settings34.getAsSize("primary_terms", sizeValue41);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.Settings settings46 = settings44.filter(strPredicate45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings46.getAsGroups();
        org.elasticsearch.common.settings.Settings settings49 = settings46.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version51 = null;
        org.elasticsearch.Version version52 = settings46.getAsVersion("index.creation_date_string", version51);
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings54 = settings46.filter(strPredicate53);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings29.diff(settings34, settings46);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexScopedSettings29.get(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer58 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer58, timeValueConsumer59);
        org.elasticsearch.common.settings.Setting.Property property61 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate63 = null;
        org.elasticsearch.common.settings.Settings settings64 = settings62.filter(strPredicate63);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings64.getAsGroups();
        org.elasticsearch.common.settings.Settings settings67 = settings64.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version69 = null;
        org.elasticsearch.Version version70 = settings64.getAsVersion("index.creation_date_string", version69);
        java.util.function.Predicate<java.lang.String> strPredicate71 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings72 = settings64.filter(strPredicate71);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData73);
        long long76 = indexMetaData73.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int78 = indexMetaData77.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff79 = indexMetaData73.diff(indexMetaData77);
        org.elasticsearch.index.Index index80 = indexMetaData77.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap81 = indexMetaData77.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = indexScopedSettings0.copy(settings72, indexMetaData77);
        org.elasticsearch.common.io.stream.StreamInput streamInput83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData84 = indexMetaData77.readFrom(streamInput83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNull(sizeValue42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNull(version52);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertTrue("'" + property61 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property61.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNull(version70);
        org.junit.Assert.assertNotNull(strPredicate71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff79);
        org.junit.Assert.assertNull(index80);
        org.junit.Assert.assertNotNull(strImmutableOpenMap81);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean19 = indexSettings12.matchesIndexName("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        java.lang.String str22 = settings20.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a" + "'", str22, "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings12.getRefreshInterval();
        int int15 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put(settings18);
        java.lang.String[] strArray39 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder12.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder2.putArray("", (java.util.List<java.lang.String>) strList40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.version((long) 1);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.Settings settings50 = settings48.filter(strPredicate49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder45.settings(settings48);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.state(state52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder53.settings(settings54);
        java.lang.Boolean boolean60 = settings54.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = settings54.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue63 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue64 = settings54.getAsSize("state-", sizeValue63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params66 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings54.toXContent(xContentBuilder65, params66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = settings54.getAsMap();
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings71.getAsGroups();
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version76 = null;
        org.elasticsearch.Version version77 = settings71.getAsVersion("index.creation_date_string", version76);
        java.util.function.Predicate<java.lang.String> strPredicate78 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings79 = settings71.filter(strPredicate78);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder2.putProperties(strMap68, strPredicate78, strFunction80);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData83);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap85 = indexMetaData83.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters86 = indexMetaData83.excludeFilters();
        org.elasticsearch.Version version87 = indexMetaData83.getCreationVersion();
        org.elasticsearch.Version version88 = indexMetaData83.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder81.put("active_allocations", version88);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + boolean60 + "' != '" + false + "'", boolean60, false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(sizeValue64);
        org.junit.Assert.assertNotNull(params66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(version77);
        org.junit.Assert.assertNotNull(strPredicate78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertNotNull(strImmutableOpenMap85);
        org.junit.Assert.assertNull(discoveryNodeFilters86);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = settings2.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings2.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings2.getAsSize("index.version.upgraded", sizeValue10);
        java.lang.String[] strArray13 = settings2.getAsArray("");
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings2.getAsGroups();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.auto_expand_replicas");
        boolean boolean7 = settings5.equals((java.lang.Object) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = settings5.getAsMemory("_all", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [_all] with value [hi!] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings2.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue6 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue7 = settings2.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue6);
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings1.dryRun(settings8);
        java.lang.String str10 = indexScopedSettings1.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData11.getMappings();
        int int14 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        java.lang.String str22 = settings17.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        int int24 = indexSettings23.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings23.getValue(timeValueSetting25);
        boolean boolean27 = indexSettings23.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings23.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData29.getMappings();
        int int32 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getAsGroups();
        java.lang.String str40 = settings35.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings35);
        int int42 = indexSettings41.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getValue(timeValueSetting43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings23.getValue(timeValueSetting43);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer47 = null;
        indexScopedSettings1.addSettingsUpdateConsumer(timeValueSetting43, timeValueConsumer46, timeValueConsumer47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long50 = indexMetaData49.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap51 = indexMetaData49.getMappings();
        int int52 = indexMetaData49.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        java.lang.String str57 = settings55.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings55.getAsGroups();
        java.lang.String str60 = settings55.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55);
        int int62 = indexSettings61.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings61.getValue(timeValueSetting63);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer65 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting43, timeValueSetting63, timeValueBiConsumer65);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting68 = indexScopedSettings0.get("index.priority");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting70 = indexScopedSettings0.get("index.number_of_shards");
        java.lang.Class<?> wildcardClass71 = indexScopedSettings0.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(sizeValue7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(wildcardSetting68);
        org.junit.Assert.assertNotNull(wildcardSetting70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        java.lang.String str17 = settings15.toDelimitedString('#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int19 = indexMetaData18.getTotalNumberOfShards();
        int int20 = indexMetaData18.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData18.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings25.getAsGroups();
        org.elasticsearch.common.settings.Settings settings28 = settings25.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings25);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData18.excludeFilters();
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData18.activeAllocationIds((int) '#');
        boolean boolean33 = settings15.equals((java.lang.Object) '#');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#" + "'", str17, "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        int int15 = indexSettings12.getMaxRescoreWindow();
        int int16 = indexSettings12.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        java.lang.String str10 = builder9.index();
        java.lang.String str11 = builder9.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.putMapping("index.blocks.read_only", "primary_terms");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "primary_terms" + "'", str10, "primary_terms");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "primary_terms" + "'", str11, "primary_terms");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        java.lang.String str19 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = indexSettings12.getFlushThresholdSize();
        boolean boolean14 = indexSettings12.isQueryStringLenient();
        java.lang.String str15 = indexSettings12.getUUID();
        int int16 = indexSettings12.getNumberOfShards();
        boolean boolean17 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap5 = settings2.getAsMap();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings8.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = settings8.toXContent(xContentBuilder10, params11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings6.toXContent(xContentBuilder7, params11);
        org.elasticsearch.common.settings.Settings settings15 = settings6.getAsSettings("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings6.getAsGroups(true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNull(xContentBuilder12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Set<java.lang.String> strSet18 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.putActiveAllocationIds((int) (byte) 1, strSet18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder23.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.putAlias(builder26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.index.translog.Translog.Durability durability19 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings22 = settings20.getAsSettings("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.version((long) 1);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder25.settings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.state(state32);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder33.settings(settings34);
        java.lang.String str39 = settings34.get("");
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings42.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = settings42.toXContent(xContentBuilder44, params45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = settings34.toXContent(xContentBuilder41, params45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings20.toXContent(xContentBuilder23, params45);
        org.elasticsearch.common.settings.Settings settings50 = settings20.getAsSettings("_all");
        java.util.Set<java.lang.String> strSet51 = settings50.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + durability19 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability19.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(params45);
        org.junit.Assert.assertNull(xContentBuilder46);
        org.junit.Assert.assertNull(xContentBuilder47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder5.put(objDictionary9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        int int20 = indexSettings12.getMaxResultWindow();
        boolean boolean22 = indexSettings12.matchesIndexName("index.auto_expand_replicas");
        boolean boolean23 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings9.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings9.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue13);
        java.lang.Boolean boolean17 = settings9.getAsBoolean("archived.", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings19 = settings9.getAsSettings("state-");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData0.getMappings();
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.putMapping(mappingMetaData14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.version.minimum_compatible", 1);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings40.getAsGroups();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder37.put(settings40);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.blocks.read", 100L);
        org.elasticsearch.common.settings.Settings settings46 = builder42.build();
        boolean boolean47 = settings46.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue50 = settings46.getAsRatio("index.number_of_replicas", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.created]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        int int17 = indexMetaData16.getNumberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = indexMetaData16.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put(settings20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.state(state34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.settings(settings36);
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings36.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder23.put(settings36);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder11.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder11.put("index.version.upgraded_string", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.shared_filesystem", 10);
        java.io.InputStream inputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.loadFromStream("index.shared_filesystem", inputStream54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings22.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue43 = indexSettings40.getValue(timeValueSetting42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings22.getValue(timeValueSetting42);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer45 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueConsumer45, timeValueConsumer46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData48.getMappings();
        int int51 = indexMetaData48.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.lang.String str56 = settings54.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getAsGroups();
        java.lang.String str59 = settings54.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings54);
        int int61 = indexSettings60.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings60.getValue(timeValueSetting62);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer64 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer65 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting62, timeValueConsumer64, timeValueConsumer65);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting68 = indexScopedSettings0.get("index.uuid");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting70 = indexScopedSettings0.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder71.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder73.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder78.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings81 = builder80.build();
        java.util.Set<java.lang.String> strSet82 = settings81.names();
        java.lang.String[] strArray84 = settings81.getAsArray("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings0.applySettings(settings81);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int87 = indexMetaData86.getTotalNumberOfShards();
        int int88 = indexMetaData86.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData89 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap90 = indexMetaData89.getMappings();
        int int91 = indexMetaData89.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings92 = indexMetaData89.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData86, settings92);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting94 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue95 = indexSettings93.getValue(timeValueSetting94);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer96 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting94, timeValueConsumer96);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNull(wildcardSetting68);
        org.junit.Assert.assertNull(wildcardSetting70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(indexMetaData89);
        org.junit.Assert.assertNotNull(strImmutableOpenMap90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(timeValueSetting94);
        org.junit.Assert.assertNotNull(timeValue95);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        java.lang.String str17 = indexSettings12.getUUID();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        int int19 = indexSettings12.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("-1", 10.0d);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("state-", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfReplicas((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = builder18.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.index.translog.Translog.Durability durability19 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings22 = settings20.getAsSettings("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.version((long) 1);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder25.settings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.state(state32);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder33.settings(settings34);
        java.lang.String str39 = settings34.get("");
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings42.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = settings42.toXContent(xContentBuilder44, params45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = settings34.toXContent(xContentBuilder41, params45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings20.toXContent(xContentBuilder23, params45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings20.getGroups("index.blocks.read", false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue54 = settings20.getAsRatio("-1", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + durability19 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability19.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(params45);
        org.junit.Assert.assertNull(xContentBuilder46);
        org.junit.Assert.assertNull(xContentBuilder47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertNotNull(strMap51);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings7 = settings5.getByPrefix("index.uuid");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings5, streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings22.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue43 = indexSettings40.getValue(timeValueSetting42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings22.getValue(timeValueSetting42);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer45 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueConsumer45, timeValueConsumer46);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting49 = indexScopedSettings0.get("index.priority");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings50.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue54);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.Settings settings58 = settings56.filter(strPredicate57);
        java.util.Set<java.lang.String> strSet59 = settings58.names();
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings0.diff(settings50, settings58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder63 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.lang.String str73 = settings71.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder65.put(settings71);
        java.util.Map<java.lang.String, java.lang.String> strMap75 = settings71.getAsMap();
        java.lang.String str78 = settings71.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue80 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue81 = settings71.getAsSize("state-", sizeValue80);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate83 = null;
        org.elasticsearch.common.settings.Settings settings84 = settings82.filter(strPredicate83);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings84.getAsGroups();
        org.elasticsearch.common.settings.Settings settings87 = settings84.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings62.diff(settings71, settings84);
        indexScopedSettings0.validate("index.blocks.read", settings71);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue92 = settings71.getAsRatio("index.blocks.read", "index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.version.upgraded]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(wildcardSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(sizeValue55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "primary_terms" + "'", str78, "primary_terms");
        org.junit.Assert.assertNull(sizeValue81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.creation_date_string", (long) (short) 0);
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.put("_na_", 100L, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.index("state-");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.putMapping("index.version.minimum_compatible", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version2 = indexMetaData0.getCreationVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.Version version5 = indexMetaData3.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.version((long) 1);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.state(state20);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder21.settings(settings22);
        java.lang.String str27 = settings22.get("");
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings30.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings22.toXContent(xContentBuilder29, params33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = indexMetaData0.toXContent(xContentBuilder11, params33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.blocks.write", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.Version version15 = indexMetaData14.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData17.getMappings();
        int int20 = indexMetaData17.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.lang.String str25 = settings23.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getAsGroups();
        java.lang.String str28 = settings23.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23);
        int int30 = indexSettings29.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting31 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue32 = indexSettings29.getValue(timeValueSetting31);
        int int33 = indexSettings29.getMaxRescoreWindow();
        boolean boolean35 = indexSettings29.matchesIndexName("hi!");
        org.elasticsearch.index.translog.Translog.Durability durability36 = indexSettings29.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings37 = indexSettings29.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings39 = settings37.getAsSettings("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.version((long) 1);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder42.settings(settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.state(state49);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder50.settings(settings51);
        java.lang.String str56 = settings51.get("");
        boolean boolean57 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = null;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap60 = settings59.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings59.toXContent(xContentBuilder61, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings51.toXContent(xContentBuilder58, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings37.toXContent(xContentBuilder40, params62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData14, xContentBuilder16, params62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + durability36 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability36.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        boolean boolean20 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder5.settings(settings16);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put("index.blocks.metadata", (-1.0f));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder22.settings(builder34);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.put("primary_terms", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder34.put("", true);
        java.nio.file.Path path42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.loadFromPath(path42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.putMapping(mappingMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("index.shadow_replicas");
        int int13 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder2.put("", (float) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.auto_expand_replicas", 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings7.filter(strPredicate8);
        java.lang.String str11 = settings9.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.put(settings9);
        org.elasticsearch.common.settings.Settings settings14 = settings9.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet15 = settings14.names();
        org.elasticsearch.common.settings.Settings settings17 = settings14.getByPrefix("");
        indexScopedSettings0.validate(settings17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue24 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue25 = settings20.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue24);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings19.dryRun(settings26);
        java.lang.String str28 = indexScopedSettings19.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting29 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer30 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer31 = null;
        indexScopedSettings19.addSettingsUpdateConsumer(timeValueSetting29, timeValueConsumer30, timeValueConsumer31);
        org.elasticsearch.common.unit.TimeValue timeValue33 = indexScopedSettings0.get(timeValueSetting29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting34 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue35 = indexScopedSettings0.get(timeValueSetting34);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting36 = org.elasticsearch.index.IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexScopedSettings0.get(timeValueSetting36);
        org.elasticsearch.common.settings.Setting.Property property38 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(sizeValue25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(timeValueSetting29);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(timeValueSetting34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(timeValueSetting36);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertTrue("'" + property38 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property38.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("index.auto_expand_replicas", strArray16);
        java.lang.String str19 = builder17.get("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.put("index.data_path", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.lang.String str34 = settings32.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder26.put(settings32);
        org.elasticsearch.common.settings.Settings settings37 = settings32.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet38 = settings37.names();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long41 = indexMetaData40.getVersion();
        org.elasticsearch.Version version42 = indexMetaData40.getUpgradedVersion();
        org.elasticsearch.Version version43 = settings37.getAsVersion("", version42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder22.put("hi!", version42);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder48 = builder44.put("100.0", (long) (-1), byteSizeUnit47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str15 = indexSettings12.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str17 = indexSettings12.customDataPath();
        java.lang.String str18 = indexSettings12.customDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups();
        java.lang.String str30 = settings25.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25);
        int int32 = indexSettings31.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings31.getValue(timeValueSetting33);
        boolean boolean35 = indexSettings31.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings31.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData37.getMappings();
        int int40 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getAsGroups();
        java.lang.String str48 = settings43.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43);
        int int50 = indexSettings49.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting51 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings49.getValue(timeValueSetting51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings31.getValue(timeValueSetting51);
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings12.getValue(timeValueSetting51);
        org.elasticsearch.common.settings.Settings settings55 = indexSettings12.getNodeSettings();
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder58.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray74 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder66.putArray("index.auto_expand_replicas", strArray74);
        java.lang.String[] strArray77 = settings55.getAsArray("index.data_path", strArray74, (java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet78 = settings55.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strSet78);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings22.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue43 = indexSettings40.getValue(timeValueSetting42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings22.getValue(timeValueSetting42);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer45 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueConsumer45, timeValueConsumer46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData48.getMappings();
        int int51 = indexMetaData48.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.lang.String str56 = settings54.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getAsGroups();
        java.lang.String str59 = settings54.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings54);
        int int61 = indexSettings60.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings60.getValue(timeValueSetting62);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer64 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer65 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting62, timeValueConsumer64, timeValueConsumer65);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting68 = indexScopedSettings0.get("index.uuid");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting70 = indexScopedSettings0.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder71.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder73.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder78.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings81 = builder80.build();
        java.util.Set<java.lang.String> strSet82 = settings81.names();
        java.lang.String[] strArray84 = settings81.getAsArray("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings0.applySettings(settings81);
        org.elasticsearch.common.unit.SizeValue sizeValue87 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue88 = settings85.getAsSize("primary_terms", sizeValue87);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNull(wildcardSetting68);
        org.junit.Assert.assertNull(wildcardSetting70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(sizeValue88);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue11 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue12 = settings7.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings24.getAsSize("state-", sizeValue33);
        org.elasticsearch.common.unit.TimeValue timeValue36 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue37 = settings24.getAsTime("index.version.upgraded_string", timeValue36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = settings7.getAsTime("", timeValue36);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.apache.lucene.index.MergePolicy mergePolicy40 = indexSettings39.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(sizeValue12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(mergePolicy40);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.lang.String str16 = settings8.get("hi!", "");
        java.lang.String str19 = settings8.get("index.data_path", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.putArray("index.auto_expand_replicas", strArray37);
        java.lang.String[] strArray39 = settings8.getAsArray("index.shadow_replicas", strArray37);
        boolean boolean40 = settings8.isEmpty();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index." + "'", str19, "index.");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        int int16 = indexSettings12.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getRefreshInterval();
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        int int14 = indexSettings12.getMaxResultWindow();
        org.apache.lucene.index.MergePolicy mergePolicy15 = indexSettings12.getMergePolicy();
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteSizeValue17);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings17 = settings13.getAsSettings("hi!");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.shared_filesystem");
        java.lang.String[] strArray25 = settings19.getAsArray("index.shared_filesystem.recover_on_any_node");
        java.lang.String[] strArray26 = settings17.getAsArray("index.blocks.read", strArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue29 = settings17.getAsRatio("hi!", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [state-]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData12.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData12.mapping("index.creation_date_string");
        org.elasticsearch.Version version17 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData12);
        org.apache.lucene.util.Version version19 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet21 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getRefreshInterval();
        boolean boolean18 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getCreationDate();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.creationDate((long) (short) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.version.upgraded_string", true);
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.version.created_string");
        boolean boolean8 = settings7.isEmpty();
        java.util.Set<java.lang.String> strSet9 = settings7.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getGroups("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int14 = builder13.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.index("index.number_of_shards");
        int int19 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder13.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder13.creationDate((long) (byte) -1);
        boolean boolean24 = settings7.equals((java.lang.Object) (byte) -1);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        java.lang.String str17 = settings15.toDelimitedString('4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994" + "'", str17, "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getRefreshInterval();
        int int16 = indexSettings12.getNumberOfReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings12.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.Boolean boolean16 = settings10.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = settings10.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings10.getAsSize("state-", sizeValue19);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = settings10.getAsMemory("index.shared_filesystem.recover_on_any_node", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.shared_filesystem.recover_on_any_node] with value [index.auto_expand_replicas] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = settings2.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings2.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings2.getAsSize("index.version.upgraded", sizeValue10);
        java.lang.String[] strArray13 = settings2.getAsArray("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = settings2.getAsMemory("index.version.upgraded", "index.number_of_shards");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.version.upgraded] with value [index.number_of_shards] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String str20 = settings18.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put(settings18);
        org.elasticsearch.common.settings.Settings settings23 = settings18.getByPrefix("index.shadow_replicas");
        java.lang.String str25 = settings18.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.applySettings(settings18);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings27.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData33.getMappings();
        int int36 = indexMetaData33.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        java.lang.String str41 = settings39.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings39.getAsGroups();
        java.lang.String str44 = settings39.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        int int46 = indexSettings45.getMaxResultWindow();
        int int47 = indexSettings45.getMaxResultWindow();
        org.apache.lucene.index.MergePolicy mergePolicy48 = indexSettings45.getMergePolicy();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = indexSettings45.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = indexScopedSettings0.copy(settings27, indexMetaData49);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.util.Set<java.lang.String> strSet55 = settings54.names();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings50.validate("", settings54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy48);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("state-", (float) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("state-", false);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings42.getGroups("index.shared_filesystem");
        java.lang.String[] strArray48 = settings42.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.putArray("index.number_of_replicas", strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder34.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.normalizePrefix("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.lang.String str30 = settings28.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder22.put(settings28);
        java.lang.String[] strArray38 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder22.putArray("", (java.util.List<java.lang.String>) strList39);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder11.settings(builder41);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder46.putMapping("100.0", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData11.getMappings();
        int int14 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        java.lang.String str22 = settings17.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        java.lang.String str24 = indexSettings23.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = indexSettings23.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData25.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue34 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue35 = settings30.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings29.dryRun(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings36);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings36);
        boolean boolean40 = indexSettings39.isOnSharedFilesystem();
        boolean boolean42 = indexSettings39.matchesIndexName("index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(sizeValue35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings7 = settings2.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData9.getMappings();
        int int11 = indexMetaData9.getNumberOfShards();
        long long12 = indexMetaData9.getVersion();
        int int13 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData9.getActiveAllocationIds();
        long long15 = indexMetaData9.getVersion();
        org.elasticsearch.Version version16 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.Version version17 = settings2.getAsVersion("index.data_path", version16);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(version17);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getByPrefix("index.shadow_replicas");
        java.lang.String str37 = settings29.get("hi!", "");
        java.util.Set<java.lang.String> strSet38 = settings29.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder19.putActiveAllocationIds((int) (byte) 0, strSet38);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.putMapping(mappingMetaData40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        boolean boolean17 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put(settings33);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = settings33.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings39 = settings33.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings41 = settings33.getAsSettings("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray59 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder51.putArray("index.auto_expand_replicas", strArray59);
        java.lang.String[] strArray61 = settings41.getAsArray("index.version.minimum_compatible", strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder24.put((java.lang.Object[]) strArray61);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean16 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version17 = indexSettings12.getIndexVersionCreated();
        long long18 = indexSettings12.getGcDeletesInMillis();
        java.lang.String str19 = indexSettings12.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.index("index.version.upgraded");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.numberOfReplicas((int) (byte) 10);
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.index("index.version.upgraded");
        int int22 = builder21.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder1.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.creationDate((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = builder30.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int19 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData17.diff(indexMetaData18);
        org.elasticsearch.Version version21 = indexMetaData18.getUpgradedVersion();
        boolean boolean23 = indexMetaData18.isSameUUID("-1");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData18.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData18.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters25);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder17.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass31 = builder26.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder17.put("index.number_of_shards", (java.lang.Class) wildcardClass31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings43.getAsMap();
        java.lang.String str50 = settings43.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue52 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue53 = settings43.getAsSize("state-", sizeValue52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings56.getAsGroups();
        org.elasticsearch.common.settings.Settings settings59 = settings56.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings34.diff(settings43, settings56);
        java.lang.Class<?> wildcardClass61 = settings60.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder32.put("index.", (java.lang.Class) wildcardClass61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.normalizePrefix("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder65.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.Settings settings73 = settings71.filter(strPredicate72);
        java.lang.String str75 = settings73.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder67.put(settings73);
        org.elasticsearch.common.settings.Settings settings78 = settings73.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet79 = settings78.names();
        java.lang.String[] strArray81 = settings78.getAsArray("index.shared_filesystem");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings78.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder32.put(settings78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder14.settings(builder84);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder85.putAlias(aliasMetaData86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "primary_terms" + "'", str50, "primary_terms");
        org.junit.Assert.assertNull(sizeValue53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(settings9);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.state(state4);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder5.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.auto_expand_replicas");
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings17);
        java.lang.String str25 = settings17.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings7.filter(strPredicate8);
        java.lang.String str11 = settings9.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.put(settings9);
        org.elasticsearch.common.settings.Settings settings14 = settings9.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet15 = settings14.names();
        org.elasticsearch.common.settings.Settings settings17 = settings14.getByPrefix("");
        indexScopedSettings0.validate(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData19.getSettings();
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings22);
        java.lang.String str25 = settings23.get("index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put(objArray9);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put("index.", (int) (byte) 0);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.loadFromSource("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder23.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder32.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass37 = builder32.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder23.put("index.number_of_shards", (java.lang.Class) wildcardClass37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder19.put("index.version.created", (java.lang.Class) wildcardClass37);
        java.util.concurrent.TimeUnit timeUnit42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder43 = builder39.put("archived.", (long) 100, timeUnit42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.upgraded_string");
        org.elasticsearch.common.xcontent.XContentParser xContentParser8 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.fromXContent(xContentParser8, parseFieldMatcher9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.state(state19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder20.settings(settings21);
        boolean boolean25 = settings21.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings21.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder10.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.settings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings21.getAsGroups();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.blocks.metadata", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings12.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mergePolicy16);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean19 = indexSettings12.matchesIndexName("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        boolean boolean21 = indexSettings12.isQueryStringAllowLeadingWildcard();
        long long22 = indexSettings12.getGcDeletesInMillis();
        boolean boolean23 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean24 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        long long19 = indexSettings12.getGcDeletesInMillis();
        java.lang.String str20 = indexSettings12.getNodeName();
        boolean boolean21 = indexSettings12.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 60000L + "'", long19 == 60000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings12 = builder2.build();
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder16.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put(settings33);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.", (long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.version((long) 1);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder43.settings(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state50 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.state(state50);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder51.settings(settings52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom57 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder51.putCustom("", custom57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.version((long) 1);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.Settings settings65 = settings63.filter(strPredicate64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder60.settings(settings63);
        org.elasticsearch.common.settings.Settings settings68 = settings63.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder51.settings(settings68);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder38.put(settings68);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder72.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate79 = null;
        org.elasticsearch.common.settings.Settings settings80 = settings78.filter(strPredicate79);
        java.lang.String str82 = settings80.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put(settings80);
        java.lang.String[] strArray90 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder74.putArray("", (java.util.List<java.lang.String>) strList91);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder70.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList91);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder21.putArray("index.priority", (java.util.List<java.lang.String>) strList91);
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder2.putArray("_na_", (java.util.List<java.lang.String>) strList91);
        java.io.InputStream inputStream98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder99 = builder96.loadFromStream("index.creation_date_string", inputStream98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + state50 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state50.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.shadow_replicas");
        java.lang.Class<?> wildcardClass35 = builder34.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        long long11 = indexMetaData8.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int13 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.index.Index index15 = indexMetaData12.getMergeSourceIndex();
        long long16 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData12.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.state(state17);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet2 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate((long) (short) -1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        int int15 = indexSettings12.getMaxRescoreWindow();
        java.lang.String str16 = indexSettings12.getNodeName();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        boolean boolean18 = indexSettings12.isQueryStringLenient();
        java.lang.String str19 = indexSettings12.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean16 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version17 = indexSettings12.getIndexVersionCreated();
        long long18 = indexSettings12.getGcDeletesInMillis();
        int int19 = indexSettings12.getMaxRescoreWindow();
        boolean boolean20 = indexSettings12.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put(settings20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.state(state34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.settings(settings36);
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings36.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder23.put(settings36);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder11.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.put(settings57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder61.put(settings67);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder70.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.Settings settings78 = settings76.filter(strPredicate77);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings78.getAsGroups();
        org.elasticsearch.common.settings.Settings settings81 = settings78.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version83 = null;
        org.elasticsearch.Version version84 = settings78.getAsVersion("index.creation_date_string", version83);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = settings78.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate86 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction87 = null;
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder72.putProperties(strMap85, strPredicate86, strFunction87);
        org.elasticsearch.common.settings.Settings settings89 = settings57.filter(strPredicate86);
        java.lang.String str92 = settings57.get("", "index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNull(version84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(strPredicate86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "index.version.upgraded" + "'", str92, "index.version.upgraded");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = builder1.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("100.0");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(aliasMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData3.getMappings();
        int int5 = indexMetaData3.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData3.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexSettings7.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings7.getGlobalCheckpointInterval();
        long long10 = indexSettings7.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte21 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder11.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder11.index("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = builder24.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getNumberOfShards();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.readDiffFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        int int22 = indexSettings12.getNumberOfReplicas();
        boolean boolean23 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder44.removeAllAliases();
        long long46 = builder45.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.removeAlias("index.version.minimum_compatible");
        java.lang.String str49 = builder48.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder48.version((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = builder51.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.number_of_shards]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "index.number_of_shards" + "'", str49, "index.number_of_shards");
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        int int4 = builder1.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.primaryTerm((int) ' ', (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder17.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass31 = builder26.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder17.put("index.number_of_shards", (java.lang.Class) wildcardClass31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings43.getAsMap();
        java.lang.String str50 = settings43.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue52 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue53 = settings43.getAsSize("state-", sizeValue52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings54.filter(strPredicate55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings56.getAsGroups();
        org.elasticsearch.common.settings.Settings settings59 = settings56.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings34.diff(settings43, settings56);
        java.lang.Class<?> wildcardClass61 = settings60.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder32.put("index.", (java.lang.Class) wildcardClass61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.normalizePrefix("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder65.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.Settings settings73 = settings71.filter(strPredicate72);
        java.lang.String str75 = settings73.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder67.put(settings73);
        org.elasticsearch.common.settings.Settings settings78 = settings73.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet79 = settings78.names();
        java.lang.String[] strArray81 = settings78.getAsArray("index.shared_filesystem");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings78.getGroups("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder32.put(settings78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder14.settings(builder84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder85.numberOfShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder87.primaryTerm((int) (byte) -1, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "primary_terms" + "'", str50, "primary_terms");
        org.junit.Assert.assertNull(sizeValue53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData6.getMappings();
        int int9 = indexMetaData6.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getAsGroups();
        java.lang.String str17 = settings12.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12);
        int int19 = indexSettings18.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting20 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings18.getValue(timeValueSetting20);
        boolean boolean22 = indexSettings18.isOnSharedFilesystem();
        java.lang.String str23 = indexSettings18.getUUID();
        org.elasticsearch.common.settings.Settings settings24 = indexSettings18.getNodeSettings();
        java.lang.String[] strArray26 = settings24.getAsArray("index.version.created_string");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings24);
        org.elasticsearch.common.unit.SizeValue sizeValue29 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue30 = settings24.getAsSize("index.version.created", sizeValue29);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(sizeValue30);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.auto_expand_replicas");
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings17);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = settings23.getAsMap();
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = settings23.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean64 = indexSettings12.isIndexUsingShadowReplicas();
        java.lang.String str65 = indexSettings12.getUUID();
        boolean boolean66 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean67 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_na_" + "'", str65, "_na_");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        int int14 = builder7.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.lang.String str25 = settings23.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put(settings23);
        org.elasticsearch.common.settings.Settings settings28 = settings23.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet29 = settings23.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder7.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder7.state(state31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder1.state(state31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.creationDate(10L);
        java.lang.Class<?> wildcardClass36 = builder35.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getVersion();
        org.elasticsearch.Version version5 = indexMetaData3.getUpgradedVersion();
        boolean boolean6 = indexMetaData0.equals((java.lang.Object) indexMetaData3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = indexMetaData0.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.state(state19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder20.settings(settings21);
        boolean boolean25 = settings21.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings21.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder10.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.settings(settings21);
        org.elasticsearch.common.unit.SizeValue sizeValue30 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue31 = settings21.getAsSize("index.blocks.read_only", sizeValue30);
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings21.getAsSize("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", sizeValue33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings21.getGroups("index.number_of_shards");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(sizeValue31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        boolean boolean13 = indexMetaData0.isSameUUID("index.blocks.write");
        boolean boolean15 = indexMetaData0.isSameUUID("index.number_of_replicas");
        long long16 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version19 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNull(version19);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.state(state19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder20.settings(settings21);
        boolean boolean25 = settings21.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings21.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder10.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData29.getMappings();
        int int31 = indexMetaData29.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = indexMetaData29.getSettings();
        org.apache.lucene.util.Version version33 = indexMetaData29.getMinimumCompatibleVersion();
        int int34 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = indexMetaData29.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder28.state(state35);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = builder28.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(version33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig19 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = indexSettings12.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig19);
        org.junit.Assert.assertNotNull(byteSizeValue20);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings settings30 = settings25.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet31 = settings25.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder15.putActiveAllocationIds(1, strSet31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder12.putActiveAllocationIds((int) ' ', strSet31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.numberOfReplicas(10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean19 = indexSettings12.matchesIndexName("index.data_path");
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        boolean boolean21 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings29.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue33);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.dryRun(settings35);
        java.lang.String str37 = indexScopedSettings28.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long39 = indexMetaData38.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap40 = indexMetaData38.getMappings();
        int int41 = indexMetaData38.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.lang.String str46 = settings44.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings44.getAsGroups();
        java.lang.String str49 = settings44.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings44);
        int int51 = indexSettings50.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting52 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings50.getValue(timeValueSetting52);
        boolean boolean54 = indexSettings50.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings50.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long57 = indexMetaData56.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap58 = indexMetaData56.getMappings();
        int int59 = indexMetaData56.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.common.settings.Settings settings62 = settings60.filter(strPredicate61);
        java.lang.String str64 = settings62.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getAsGroups();
        java.lang.String str67 = settings62.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings62);
        int int69 = indexSettings68.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting70 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue71 = indexSettings68.getValue(timeValueSetting70);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings50.getValue(timeValueSetting70);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer73 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer74 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(timeValueSetting70, timeValueConsumer73, timeValueConsumer74);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer76 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting27, timeValueSetting70, timeValueBiConsumer76);
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings78.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue82 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue83 = settings78.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue82);
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings78);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings0.applySettings(settings84);
        java.lang.String[] strArray87 = null;
        java.lang.String[] strArray89 = settings84.getAsArray("", strArray87, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting52);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting70);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(sizeValue83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(strArray89);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet30 = settings24.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder13.putActiveAllocationIds(1, strSet30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder13.numberOfShards((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder24.putNull("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.function.Predicate<java.lang.String> strPredicate39 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings40 = settings32.filter(strPredicate39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder28.put(settings32);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder28.put("index.auto_expand_replicas", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        java.lang.String str55 = settings53.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder47.put(settings53);
        java.lang.String[] strArray74 = new java.lang.String[] { "index.data_path", "index.number_of_shards", "index.shadow_replicas", "", "index.number_of_shards", "index.", "index.blocks.read_only", "index.shadow_replicas", "index.version.minimum_compatible", "index.version.upgraded_string", "index.blocks.read_only", "index.number_of_shards", "index.creation_date_string", "hi!", "primary_terms", "primary_terms" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder47.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList75);
        java.util.Map<java.lang.String, java.lang.String> strMap78 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder28.put(strMap78);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder5, params6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        long long4 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put(settings34);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder28.putArray("", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = builder56.internalMap();
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder56.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder66.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate73 = null;
        org.elasticsearch.common.settings.Settings settings74 = settings72.filter(strPredicate73);
        java.lang.String str76 = settings74.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder68.put(settings74);
        org.elasticsearch.common.settings.Settings settings79 = settings74.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet80 = settings79.names();
        java.lang.String[] strArray82 = settings79.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder65.put(settings79);
        java.lang.Class<?> wildcardClass84 = builder65.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder21.put("active_allocations", (java.lang.Class) wildcardClass84);
        java.util.concurrent.TimeUnit timeUnit88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder89 = builder85.put("index.auto_expand_replicas", (long) (short) 10, timeUnit88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        long long12 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexScopedSettings0.get(timeValueSetting27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.version((long) 1);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder31.settings(settings34);
        org.elasticsearch.common.settings.Settings settings39 = settings34.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue41 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue42 = settings34.getAsSize("primary_terms", sizeValue41);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.Settings settings46 = settings44.filter(strPredicate45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings46.getAsGroups();
        org.elasticsearch.common.settings.Settings settings49 = settings46.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version51 = null;
        org.elasticsearch.Version version52 = settings46.getAsVersion("index.creation_date_string", version51);
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings54 = settings46.filter(strPredicate53);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings29.diff(settings34, settings46);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexScopedSettings29.get(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer58 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer58, timeValueConsumer59);
        org.elasticsearch.common.settings.Setting.Property property61 = indexScopedSettings0.getScope();
        java.lang.String str62 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder63 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.lang.String str73 = settings71.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder65.put(settings71);
        org.elasticsearch.common.settings.Settings settings76 = settings71.getByPrefix("index.shadow_replicas");
        java.lang.String str78 = settings71.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder79 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder79.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate86 = null;
        org.elasticsearch.common.settings.Settings settings87 = settings85.filter(strPredicate86);
        java.lang.String str89 = settings87.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder81.put(settings87);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = settings87.getAsMap();
        java.lang.String str94 = settings87.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings96 = settings87.getByPrefix("_na_");
        org.elasticsearch.common.settings.Settings settings97 = indexScopedSettings0.diff(settings71, settings87);
        java.lang.String str98 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNull(sizeValue42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNull(version52);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertTrue("'" + property61 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property61.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "primary_terms" + "'", str94, "primary_terms");
        org.junit.Assert.assertNotNull(settings96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData20);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData20.writeTo(streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version18 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(version18);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.state(state28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.settings(settings30);
        boolean boolean34 = settings30.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder19.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder13.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData38.getMappings();
        int int40 = indexMetaData38.getNumberOfShards();
        long long41 = indexMetaData38.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = indexScopedSettings0.copy(settings30, indexMetaData38);
        java.lang.Class<?> wildcardClass43 = settings30.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting27 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings29.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue33);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings28.dryRun(settings35);
        java.lang.String str37 = indexScopedSettings28.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long39 = indexMetaData38.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap40 = indexMetaData38.getMappings();
        int int41 = indexMetaData38.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.lang.String str46 = settings44.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings44.getAsGroups();
        java.lang.String str49 = settings44.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings44);
        int int51 = indexSettings50.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting52 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings50.getValue(timeValueSetting52);
        boolean boolean54 = indexSettings50.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings50.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long57 = indexMetaData56.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap58 = indexMetaData56.getMappings();
        int int59 = indexMetaData56.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.common.settings.Settings settings62 = settings60.filter(strPredicate61);
        java.lang.String str64 = settings62.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getAsGroups();
        java.lang.String str67 = settings62.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings62);
        int int69 = indexSettings68.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting70 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue71 = indexSettings68.getValue(timeValueSetting70);
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings50.getValue(timeValueSetting70);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer73 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer74 = null;
        indexScopedSettings28.addSettingsUpdateConsumer(timeValueSetting70, timeValueConsumer73, timeValueConsumer74);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer76 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting27, timeValueSetting70, timeValueBiConsumer76);
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings78.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue82 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue83 = settings78.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue82);
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings78);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings0.applySettings(settings84);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting87 = indexScopedSettings0.get("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValueSetting27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting52);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting70);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(sizeValue83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(wildcardSetting87);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.creation_date_string");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        java.lang.String str16 = indexSettings12.getDefaultField();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean18 = indexSettings12.isDefaultAllowUnmappedFields();
        int int19 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet30 = settings24.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder13.putActiveAllocationIds(1, strSet30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder13.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom35 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder13.putCustom("10", custom35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.index("index.creation_date");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings22.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue43 = indexSettings40.getValue(timeValueSetting42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings22.getValue(timeValueSetting42);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer45 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueConsumer45, timeValueConsumer46);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting49 = indexScopedSettings0.get("index.priority");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings50.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue54);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.Settings settings58 = settings56.filter(strPredicate57);
        java.util.Set<java.lang.String> strSet59 = settings58.names();
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings0.diff(settings50, settings58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder63 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.lang.String str73 = settings71.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder65.put(settings71);
        java.util.Map<java.lang.String, java.lang.String> strMap75 = settings71.getAsMap();
        java.lang.String str78 = settings71.get("", "primary_terms");
        org.elasticsearch.common.unit.SizeValue sizeValue80 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue81 = settings71.getAsSize("state-", sizeValue80);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate83 = null;
        org.elasticsearch.common.settings.Settings settings84 = settings82.filter(strPredicate83);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings84.getAsGroups();
        org.elasticsearch.common.settings.Settings settings87 = settings84.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings62.diff(settings71, settings84);
        indexScopedSettings0.validate("index.blocks.read", settings71);
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings71);
        java.lang.String str92 = settings71.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(wildcardSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(sizeValue55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "primary_terms" + "'", str78, "primary_terms");
        org.junit.Assert.assertNull(sizeValue81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int19 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData17.diff(indexMetaData18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        java.lang.String str31 = settings29.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(settings29);
        org.elasticsearch.common.settings.Settings settings34 = settings29.getByPrefix("index.version.created");
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData37.getMappings();
        int int40 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getAsGroups();
        java.lang.String str48 = settings43.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43);
        int int50 = indexSettings49.getMaxResultWindow();
        boolean boolean51 = indexSettings49.isQueryStringAnalyzeWildcard();
        boolean boolean52 = indexSettings49.isTTLPurgeDisabled();
        boolean boolean53 = indexSettings49.isWarmerEnabled();
        boolean boolean54 = indexSettings49.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability55 = indexSettings49.getTranslogDurability();
        boolean boolean56 = indexSettings49.isQueryStringLenient();
        boolean boolean57 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings49.getGlobalCheckpointInterval();
        boolean boolean59 = indexSettings49.isWarmerEnabled();
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings49.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue61 = settings29.getAsTime("index.number_of_shards", timeValue60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap63 = indexMetaData62.getMappings();
        int int64 = indexMetaData62.getNumberOfShards();
        long long65 = indexMetaData62.getVersion();
        int int66 = indexMetaData62.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap67 = indexMetaData62.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters68 = indexMetaData62.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap69 = indexMetaData62.getMappings();
        boolean boolean70 = settings29.equals((java.lang.Object) strImmutableOpenMap69);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10000 + "'", int50 == 10000);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + durability55 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability55.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap67);
        org.junit.Assert.assertNull(discoveryNodeFilters68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        int int6 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        boolean boolean22 = indexSettings12.isShadowReplicaIndex();
        long long23 = indexSettings12.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60000L + "'", long23 == 60000L);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.putAlias(builder19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData0.mappingOrDefault("index.creation_date");
        int int18 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.blocks.write");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putMapping("index.shadow_replicas", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "primary_terms" + "'", str2, "primary_terms");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData12.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData12.mapping("index.creation_date_string");
        org.elasticsearch.Version version17 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.Version version19 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNotNull(version19);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getAsGroups();
        java.lang.String str19 = settings14.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings14);
        int int21 = indexSettings20.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings20.getValue(timeValueSetting22);
        boolean boolean24 = indexSettings20.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings20.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings20.getTranslogSyncInterval();
        boolean boolean27 = indexMetaData0.equals((java.lang.Object) timeValue26);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings22.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue43 = indexSettings40.getValue(timeValueSetting42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings22.getValue(timeValueSetting42);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer45 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueConsumer45, timeValueConsumer46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData48.getMappings();
        int int51 = indexMetaData48.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings52.filter(strPredicate53);
        java.lang.String str56 = settings54.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getAsGroups();
        java.lang.String str59 = settings54.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings54);
        int int61 = indexSettings60.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings60.getValue(timeValueSetting62);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer64 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer65 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting62, timeValueConsumer64, timeValueConsumer65);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting68 = indexScopedSettings0.get("index.uuid");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting70 = indexScopedSettings0.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder71.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder73.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap79 = builder73.internalMap();
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder73.put(objArray80);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder81.put("index.", (int) (byte) 0);
        java.util.Map<java.lang.String, java.lang.String> strMap88 = builder87.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder87.loadFromSource("index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNull(wildcardSetting68);
        org.junit.Assert.assertNull(wildcardSetting70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("state-", (float) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData41.getMappings();
        int int44 = indexMetaData41.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters45 = indexMetaData41.getInitialRecoveryFilters();
        org.elasticsearch.Version version46 = indexMetaData41.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder39.put("active_allocations", version46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray65 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder57.putArray("index.auto_expand_replicas", strArray65);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings68.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings68.getGroups("index.shared_filesystem");
        java.lang.String[] strArray74 = settings68.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder66.putArray("index.version.upgraded", strArray74);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder47.extendArray("index.shared_filesystem.recover_on_any_node", strArray74);
        org.elasticsearch.common.settings.Settings settings77 = builder47.build();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder81 = builder47.put("index.creation_date", (long) (byte) -1, byteSizeUnit80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(settings77);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData12.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData12.mapping("index.creation_date_string");
        org.elasticsearch.Version version17 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.Version version19 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings23.getAsGroups();
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings23.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings23.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings23.getAsSize("index.version.upgraded", sizeValue31);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = null;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings34.filter(strPredicate35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings36.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params39 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = settings36.toXContent(xContentBuilder38, params39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = settings23.toXContent(xContentBuilder33, params39);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder20, params39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(params39);
        org.junit.Assert.assertNull(xContentBuilder40);
        org.junit.Assert.assertNull(xContentBuilder41);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder15.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder44.removeAllAliases();
        long long46 = builder45.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.version((long) 1);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder48.settings(settings51);
        int int55 = builder48.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder56.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate63 = null;
        org.elasticsearch.common.settings.Settings settings64 = settings62.filter(strPredicate63);
        java.lang.String str66 = settings64.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder58.put(settings64);
        org.elasticsearch.common.settings.Settings settings69 = settings64.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet70 = settings64.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder48.settings(settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder48.state(state72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder45.state(state72);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder45.primaryTerm((int) (short) 100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version12 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int14 = builder13.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings44.getAsGroups();
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings44.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings44.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue52 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue53 = settings44.getAsSize("index.version.upgraded", sizeValue52);
        java.lang.String[] strArray55 = settings44.getAsArray("");
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings44);
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings41.applySettings(settings44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = settings44.getAsMemory("100", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [100] with value [_all] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(sizeValue53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.");
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        long long10 = indexMetaData0.getCreationDate();
        long long11 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder13.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.putCustom("_na_", custom19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder13.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentParser xContentParser6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData7.getMappings();
        int int10 = indexMetaData7.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getAsGroups();
        java.lang.String str18 = settings13.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings13);
        int int20 = indexSettings19.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting21 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings19.getValue(timeValueSetting21);
        int int23 = indexSettings19.getMaxRescoreWindow();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = indexSettings19.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability25 = indexSettings19.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher26 = indexSettings19.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexMetaData0.fromXContent(xContentParser6, parseFieldMatcher26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValue24);
        org.junit.Assert.assertTrue("'" + durability25 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability25.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher26);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData14.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings22.getValue(timeValueSetting24);
        boolean boolean26 = indexSettings22.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings22.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData28.getMappings();
        int int31 = indexMetaData28.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getAsGroups();
        java.lang.String str39 = settings34.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34);
        int int41 = indexSettings40.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting42 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue43 = indexSettings40.getValue(timeValueSetting42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings22.getValue(timeValueSetting42);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer45 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting42, timeValueConsumer45, timeValueConsumer46);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting49 = indexScopedSettings0.get("index.priority");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings50.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings50.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue54);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.Settings settings58 = settings56.filter(strPredicate57);
        java.util.Set<java.lang.String> strSet59 = settings58.names();
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings0.diff(settings50, settings58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings67.filter(strPredicate68);
        java.lang.String str71 = settings69.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder63.put(settings69);
        org.elasticsearch.common.settings.Settings settings74 = settings69.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet75 = settings69.names();
        java.lang.String str78 = settings69.get("", "index.version.created");
        java.util.Map<java.lang.String, java.lang.Object> strMap79 = settings69.getAsStructuredMap();
        indexScopedSettings0.validate(settings69);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate83 = null;
        org.elasticsearch.common.settings.Settings settings84 = settings82.filter(strPredicate83);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings84.getAsGroups();
        org.elasticsearch.common.settings.Settings settings87 = settings84.getAsSettings("index.auto_expand_replicas");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("archived.", settings87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [archived.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(wildcardSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(sizeValue55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "index.version.created" + "'", str78, "index.version.created");
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(settings87);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("state-", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfReplicas((int) (byte) 1);
        long long19 = builder13.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder13.numberOfShards(1);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder13.putAlias(builder22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamInput streamInput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData14.readDiffFrom(streamInput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.priority");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int10 = indexMetaData9.getTotalNumberOfShards();
        int int11 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData9.getInitialRecoveryFilters();
        java.lang.String str13 = indexMetaData9.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData9.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        java.lang.String str5 = settings2.get("index.shared_filesystem.recover_on_any_node");
        boolean boolean6 = settings2.isEmpty();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version12 = indexMetaData0.getMinimumCompatibleVersion();
        long long13 = indexMetaData0.getVersion();
        int int14 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap15 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap5 = settings2.getAsMap();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings8.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = settings8.toXContent(xContentBuilder10, params11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings6.toXContent(xContentBuilder7, params11);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue16 = settings6.getAsRatio("archived.", "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNull(xContentBuilder12);
        org.junit.Assert.assertNull(xContentBuilder13);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        long long14 = builder13.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.upgraded]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int19 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData17.diff(indexMetaData18);
        org.elasticsearch.Version version21 = indexMetaData18.getUpgradedVersion();
        boolean boolean23 = indexMetaData18.isSameUUID("-1");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData18.getState();
        byte byte25 = state24.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.putNull("index.shared_filesystem.recover_on_any_node");
        java.lang.String str61 = builder59.remove("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder66 = builder62.put("index.shared_filesystem.recover_on_any_node", (long) (-1), timeUnit65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder8.build();
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData11.getMappings();
        int int14 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        java.lang.String str22 = settings17.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        int int24 = indexSettings23.getMaxResultWindow();
        java.lang.String str25 = indexSettings23.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability26 = indexSettings23.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings23.getParseFieldMatcher();
        boolean boolean28 = indexSettings23.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings23.getGlobalCheckpointInterval();
        long long30 = indexSettings23.getGcDeletesInMillis();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig31 = indexSettings23.getMergeSchedulerConfig();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher32 = indexSettings23.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = indexMetaData9.fromXContent(xContentParser10, parseFieldMatcher32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
        org.junit.Assert.assertTrue("'" + durability26 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability26.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 60000L + "'", long30 == 60000L);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig31);
        org.junit.Assert.assertNotNull(parseFieldMatcher32);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) ' ');
        long long13 = builder7.version();
        long long14 = builder7.version();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings7.filter(strPredicate8);
        java.lang.String str11 = settings9.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.put(settings9);
        org.elasticsearch.common.settings.Settings settings14 = settings9.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet15 = settings14.names();
        org.elasticsearch.common.settings.Settings settings17 = settings14.getByPrefix("");
        indexScopedSettings0.validate(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups();
        java.lang.String str30 = settings25.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25);
        java.lang.String str32 = indexSettings31.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings31.getValue(timeValueSetting33);
        boolean boolean35 = indexSettings31.isTTLPurgeDisabled();
        java.lang.String str36 = indexSettings31.getNodeName();
        boolean boolean37 = indexSettings31.isQueryStringLenient();
        boolean boolean38 = settings17.equals((java.lang.Object) indexSettings31);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(timeValueSetting33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.apache.lucene.index.MergePolicy mergePolicy17 = indexSettings12.getMergePolicy();
        boolean boolean19 = indexSettings12.matchesIndexName("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getSettings();
        int int21 = indexSettings12.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = indexSettings12.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertNotNull(mergePolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(indexMetaData22);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index7 = indexMetaData4.getMergeSourceIndex();
        long long8 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData10.getMappings();
        int int13 = indexMetaData10.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings14.filter(strPredicate15);
        java.lang.String str18 = settings16.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getAsGroups();
        java.lang.String str21 = settings16.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        int int23 = indexSettings22.getMaxResultWindow();
        boolean boolean24 = indexSettings22.isQueryStringAnalyzeWildcard();
        java.lang.String str25 = indexSettings22.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings22.getMergeSchedulerConfig();
        java.lang.String str27 = indexSettings22.customDataPath();
        java.lang.String str28 = indexSettings22.customDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData29.getMappings();
        int int32 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getAsGroups();
        java.lang.String str40 = settings35.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings35);
        int int42 = indexSettings41.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getValue(timeValueSetting43);
        boolean boolean45 = indexSettings41.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue46 = indexSettings41.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long48 = indexMetaData47.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap49 = indexMetaData47.getMappings();
        int int50 = indexMetaData47.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings51.filter(strPredicate52);
        java.lang.String str55 = settings53.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings53.getAsGroups();
        java.lang.String str58 = settings53.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings53);
        int int60 = indexSettings59.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting61 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings59.getValue(timeValueSetting61);
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings41.getValue(timeValueSetting61);
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings22.getValue(timeValueSetting61);
        org.elasticsearch.common.settings.Settings settings65 = indexSettings22.getNodeSettings();
        boolean boolean66 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("-1");
        boolean boolean69 = indexMetaData4.equals((java.lang.Object) "-1");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_all" + "'", str25, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getNumberOfShards();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap17 = settings14.getAsMap();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings20.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings20.toXContent(xContentBuilder22, params23);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings18.toXContent(xContentBuilder19, params23);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = indexMetaData0.toXContent(xContentBuilder11, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(params23);
        org.junit.Assert.assertNull(xContentBuilder24);
        org.junit.Assert.assertNull(xContentBuilder25);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentParser xContentParser6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData7.getMappings();
        int int10 = indexMetaData7.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getAsGroups();
        java.lang.String str18 = settings13.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings13);
        int int20 = indexSettings19.getMaxResultWindow();
        java.lang.String str21 = indexSettings19.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability22 = indexSettings19.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = indexSettings19.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = indexMetaData0.fromXContent(xContentParser6, parseFieldMatcher23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertTrue("'" + durability22 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability22.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher23);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isTTLPurgeDisabled();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("_all");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap19 = indexMetaData16.getAliases();
        long long20 = indexMetaData16.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.version.upgraded_string", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        java.lang.String str42 = settings40.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put(settings40);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder34.putArray("", (java.util.List<java.lang.String>) strList51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder30.putArray("index.auto_expand_replicas", (java.util.List<java.lang.String>) strList51);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("active_allocations", 1L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        java.lang.String str16 = indexSettings12.getDefaultField();
        java.lang.String str17 = indexSettings12.getDefaultField();
        boolean boolean18 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_all" + "'", str17, "_all");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.Version version16 = indexSettings12.getIndexVersionCreated();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getRefreshInterval();
        java.lang.String str19 = indexSettings12.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_all" + "'", str19, "_all");
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.auto_expand_replicas");
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings17);
        boolean boolean25 = indexScopedSettings0.hasDynamicSetting("index.version.created");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = settings26.toXContent(xContentBuilder28, params29);
        org.elasticsearch.common.settings.Settings settings32 = settings26.getAsSettings("index.version.created");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings26);
        java.lang.Class<?> wildcardClass34 = indexScopedSettings0.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(params29);
        org.junit.Assert.assertNull(xContentBuilder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        boolean boolean19 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        java.lang.String str13 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version14 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(version17);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        boolean boolean20 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder5.settings(settings16);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put("index.blocks.metadata", (-1.0f));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder22.settings(builder34);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.put("primary_terms", (int) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder34.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder42.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.Settings settings50 = settings48.filter(strPredicate49);
        java.lang.String str52 = settings50.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder44.put(settings50);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = settings50.getAsMap();
        java.lang.String str57 = settings50.get("", "primary_terms");
        java.util.Set<java.lang.String> strSet58 = settings50.names();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long61 = indexMetaData60.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap62 = indexMetaData60.getMappings();
        int int63 = indexMetaData60.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.Settings settings66 = settings64.filter(strPredicate65);
        java.lang.String str68 = settings66.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getAsGroups();
        java.lang.String str71 = settings66.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings66);
        int int73 = indexSettings72.getMaxResultWindow();
        boolean boolean74 = indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean75 = indexSettings72.isTTLPurgeDisabled();
        boolean boolean76 = indexSettings72.isWarmerEnabled();
        boolean boolean77 = indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability78 = indexSettings72.getTranslogDurability();
        boolean boolean79 = indexSettings72.isQueryStringLenient();
        boolean boolean80 = indexSettings72.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting81 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue82 = indexSettings72.getValue(timeValueSetting81);
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings50.getAsTime("index.version.created", timeValue82);
        java.util.Map<java.lang.String, java.lang.String> strMap84 = settings50.getAsMap();
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate86 = null;
        org.elasticsearch.common.settings.Settings settings87 = settings85.filter(strPredicate86);
        java.lang.String str89 = settings87.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings87);
        java.util.function.Predicate<java.lang.String> strPredicate91 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings92 = settings87.filter(strPredicate91);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction93 = null;
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder34.putProperties(strMap84, strPredicate91, strFunction93);
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder94.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", (float) '4');
        java.lang.String str99 = builder94.get("index.version.created");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "primary_terms" + "'", str57, "primary_terms");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10000 + "'", int73 == 10000);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeValueSetting81);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strPredicate91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings12.getIndexMetaData();
        org.elasticsearch.Version version65 = indexMetaData64.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        long long70 = indexMetaData67.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int72 = indexMetaData71.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff73 = indexMetaData67.diff(indexMetaData71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData67);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData67.mapping("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings77 = indexMetaData67.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff78 = indexMetaData64.diff(indexMetaData67);
        java.lang.String str79 = indexMetaData67.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexMetaDataDiff78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "_na_" + "'", str79, "_na_");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet23 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state25);
        byte byte27 = state25.id();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings12.getTranslogDurability();
        java.lang.String str18 = indexSettings12.customDataPath();
        int int19 = indexSettings12.getMaxResultWindow();
        boolean boolean20 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean22 = indexSettings12.matchesIndexName("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings17.filter(strPredicate18);
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder13.put(settings19);
        org.elasticsearch.common.settings.Settings settings24 = settings19.getByPrefix("index.shadow_replicas");
        java.lang.String str26 = settings19.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings28 = settings19.getByPrefix("active_allocations");
        java.lang.String str30 = settings28.toDelimitedString('#');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings34.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params37 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = settings34.toXContent(xContentBuilder36, params37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = settings28.toXContent(xContentBuilder31, params37);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = indexMetaData0.toXContent(xContentBuilder10, params37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(params37);
        org.junit.Assert.assertNull(xContentBuilder38);
        org.junit.Assert.assertNull(xContentBuilder39);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        java.lang.String str17 = indexSettings12.getNodeName();
        boolean boolean19 = indexSettings12.matchesIndexName("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder44.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom49 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder45.putCustom("index.auto_expand_replicas", custom49);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String str13 = builder2.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("state-", (int) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.data_path", (double) 10.0f);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder16.put(objDictionary20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        boolean boolean16 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.Version version17 = indexSettings12.getIndexVersionCreated();
        long long18 = indexSettings12.getGcDeletesInMillis();
        int int19 = indexSettings12.getMaxRescoreWindow();
        boolean boolean20 = indexSettings12.isShadowReplicaIndex();
        int int21 = indexSettings12.getMaxResultWindow();
        boolean boolean22 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings21 = builder11.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder7.settings(builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.removeAlias("index.shadow_replicas");
        int int25 = builder24.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.index("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        int int15 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings12.getNodeSettings();
        boolean boolean18 = indexSettings12.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version15 = indexSettings12.getIndexVersionCreated();
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        java.lang.String str17 = indexSettings12.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.common.settings.Settings settings9 = settings4.getAsSettings("hi!");
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        java.lang.String str12 = settings9.toDelimitedString('4');
        java.lang.String str15 = settings9.get("index.number_of_replicas", "index.blocks.write");
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings9);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.blocks.write" + "'", str15, "index.blocks.write");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        boolean boolean21 = indexScopedSettings0.hasDynamicSetting("index.creation_date");
        boolean boolean23 = indexScopedSettings0.hasDynamicSetting("index.creation_date");
        org.elasticsearch.common.settings.Setting.Property property24 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + property24 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property24.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version((long) 1);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.settings(settings5);
        org.elasticsearch.common.settings.Settings settings10 = settings5.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue12 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue13 = settings5.getAsSize("primary_terms", sizeValue12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version22 = null;
        org.elasticsearch.Version version23 = settings17.getAsVersion("index.creation_date_string", version22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.diff(settings5, settings17);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder29.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        java.lang.String str49 = settings47.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder41.put(settings47);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.version((long) 1);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.Settings settings59 = settings57.filter(strPredicate58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder54.settings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.state(state61);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.Settings settings65 = settings63.filter(strPredicate64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder62.settings(settings63);
        java.lang.Boolean boolean69 = settings63.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap70 = settings63.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder50.put(settings63);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder38.put(strMap72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder74.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder76.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder81.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings84 = builder83.build();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder73.put(settings84);
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate87 = null;
        org.elasticsearch.common.settings.Settings settings88 = settings86.filter(strPredicate87);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap89 = settings88.getAsGroups();
        org.elasticsearch.common.settings.Settings settings91 = settings88.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version93 = null;
        org.elasticsearch.Version version94 = settings88.getAsVersion("index.creation_date_string", version93);
        java.util.function.Predicate<java.lang.String> strPredicate95 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings96 = settings88.filter(strPredicate95);
        org.elasticsearch.common.settings.Settings settings97 = indexScopedSettings0.diff(settings84, settings96);
        boolean boolean99 = indexScopedSettings0.hasDynamicSetting("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(sizeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(version94);
        org.junit.Assert.assertNotNull(strPredicate95);
        org.junit.Assert.assertNotNull(settings96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        boolean boolean43 = indexScopedSettings0.hasDynamicSetting("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder44.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        java.lang.String str54 = settings52.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder46.put(settings52);
        org.elasticsearch.common.settings.Settings settings57 = settings52.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings59 = settings57.getByPrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings61 = settings57.getAsSettings("hi!");
        indexScopedSettings0.validate(settings57);
        java.lang.String[] strArray64 = settings57.getAsArray("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Set<java.lang.String> strSet18 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.putActiveAllocationIds((int) (byte) 1, strSet18);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder22.normalizePrefix("index.blocks.read");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.number_of_shards" };
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.putArray("archived.", strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.putNull("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder13.settings(builder33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.version((long) 1);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder36.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.state(state43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("");
        java.lang.String str53 = builder51.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder46.settings(builder51);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state55 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte56 = state55.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder46.state(state55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder13.state(state55);
        long long59 = builder13.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + state55 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state55.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings17.getAsGroups();
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.auto_expand_replicas");
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings0.dryRun(settings17);
        boolean boolean25 = indexScopedSettings0.hasDynamicSetting("index.version.created");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = settings26.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = settings26.toXContent(xContentBuilder28, params29);
        org.elasticsearch.common.settings.Settings settings32 = settings26.getAsSettings("index.version.created");
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.version((long) 1);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder36.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.state(state43);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder44.settings(settings45);
        java.lang.Boolean boolean51 = settings45.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = settings45.getAsStructuredMap();
        org.elasticsearch.common.unit.SizeValue sizeValue54 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue55 = settings45.getAsSize("state-", sizeValue54);
        org.elasticsearch.common.unit.TimeValue timeValue57 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue58 = settings45.getAsTime("index.version.upgraded_string", timeValue57);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("index.creation_date_string", settings45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(params29);
        org.junit.Assert.assertNull(xContentBuilder30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + boolean51 + "' != '" + false + "'", boolean51, false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(sizeValue55);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str15 = indexSettings12.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str17 = indexSettings12.customDataPath();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getNodeSettings();
        java.lang.String str19 = indexSettings12.customDataPath();
        boolean boolean20 = indexSettings12.isShadowReplicaIndex();
        boolean boolean21 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean22 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings settings26 = settings21.getByPrefix("index.version.created");
        boolean boolean27 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings21);
        java.util.Set<java.lang.String> strSet28 = settings21.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder7.putActiveAllocationIds((int) (short) 100, strSet28);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.primaryTerm((int) (byte) 1, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        java.lang.String str14 = settings12.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder6.put(settings12);
        java.lang.String[] strArray22 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder6.putArray("", (java.util.List<java.lang.String>) strList23);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.version.upgraded_string", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        org.elasticsearch.common.settings.Settings settings48 = settings43.getByPrefix("index.shadow_replicas");
        java.lang.String str50 = settings43.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings52 = settings43.getByPrefix("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder34.put(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder3.settings(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder3.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder3.version((long) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.putMapping(mappingMetaData59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap2 = settings0.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.version.upgraded_string", true);
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.version.created_string");
        java.lang.String str9 = settings0.toDelimitedString('#');
        java.lang.String str11 = settings0.toDelimitedString('4');
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean17 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isOnSharedFilesystem();
        boolean boolean20 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        java.lang.String str33 = settings31.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put(settings31);
        org.elasticsearch.common.settings.Settings settings36 = settings31.getByPrefix("index.version.created");
        boolean boolean37 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.common.settings.Settings settings39 = settings31.getByPrefix("index.auto_expand_replicas");
        java.lang.String str41 = settings39.toDelimitedString(' ');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        java.lang.String str47 = settings45.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings45.getAsMap();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap52 = settings51.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings51.toXContent(xContentBuilder53, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = settings49.toXContent(xContentBuilder50, params54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings39.toXContent(xContentBuilder42, params54);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = indexMetaData21.toXContent(xContentBuilder22, params54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertNull(xContentBuilder56);
        org.junit.Assert.assertNull(xContentBuilder57);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder2.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String str12 = settings10.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder4.put(settings10);
        org.elasticsearch.common.settings.Settings settings15 = settings10.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet16 = settings15.names();
        org.elasticsearch.common.settings.Settings settings18 = settings15.getByPrefix("index.number_of_replicas");
        indexScopedSettings0.validate("index.data_path", settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.common.settings.Settings settings29 = settings24.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue31 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue32 = settings24.getAsSize("primary_terms", sizeValue31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData34.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.Version version39 = indexMetaData37.getUpgradedVersion();
        boolean boolean40 = indexMetaData34.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = indexScopedSettings0.copy(settings24, indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.Settings settings51 = settings49.filter(strPredicate50);
        java.lang.String str53 = settings51.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder45.put(settings51);
        org.elasticsearch.common.settings.Settings settings56 = settings51.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet57 = settings56.names();
        org.elasticsearch.common.settings.Settings settings59 = settings56.getByPrefix("");
        indexScopedSettings42.validate(settings59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue66 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue67 = settings62.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue66);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings62);
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings61.dryRun(settings68);
        java.lang.String str70 = indexScopedSettings61.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting71 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer72 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer73 = null;
        indexScopedSettings61.addSettingsUpdateConsumer(timeValueSetting71, timeValueConsumer72, timeValueConsumer73);
        org.elasticsearch.common.unit.TimeValue timeValue75 = indexScopedSettings42.get(timeValueSetting71);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer76 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer77 = null;
        indexScopedSettings41.addSettingsUpdateConsumer(timeValueSetting71, timeValueConsumer76, timeValueConsumer77);
        org.elasticsearch.common.settings.Settings settings80 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings41.validate("index.uuid", settings80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(sizeValue32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNull(sizeValue67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(timeValueSetting71);
        org.junit.Assert.assertNotNull(timeValue75);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings settings38 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long41 = indexMetaData40.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap42 = indexMetaData40.getMappings();
        int int43 = indexMetaData40.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.Settings settings46 = settings44.filter(strPredicate45);
        java.lang.String str48 = settings46.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings46.getAsGroups();
        java.lang.String str51 = settings46.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings46);
        int int53 = indexSettings52.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting54 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue55 = indexSettings52.getValue(timeValueSetting54);
        boolean boolean56 = indexSettings52.isWarmerEnabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue57 = indexSettings52.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = settings38.getAsBytesSize("", byteSizeValue57);
        java.lang.Class<?> wildcardClass59 = settings38.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting54);
        org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteSizeValue57);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        java.lang.String str8 = settings6.get("index.shared_filesystem");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue11 = settings6.getAsRatio("index.shared_filesystem.recover_on_any_node", "index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.shared_filesystem]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putMapping("index.version.created_string", "index.version.created_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("hi!", custom15);
        long long17 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.putCustom("index.creation_date_string", custom22);
        int int24 = builder23.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.getTranslogDurability();
        boolean boolean22 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean23 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean25 = indexSettings12.matchesIndexName("index.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexMetaData0.readFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.lang.String[] strArray10 = new java.lang.String[] { "index.number_of_shards" };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.putArray("archived.", strArray10);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.version.minimum_compatible", (double) 10.0f);
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.loadFromStream("index.version.minimum_compatible", inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("state-", (float) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("state-", false);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings42.getGroups("index.shared_filesystem");
        java.lang.String[] strArray48 = settings42.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.putArray("index.number_of_replicas", strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder34.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder34.put("index.blocks.read_only", (float) 0L);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder55.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        int int14 = indexSettings12.getMaxResultWindow();
        boolean boolean15 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings12.getNodeSettings();
        boolean boolean18 = indexSettings12.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfReplicas((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.putAlias(aliasMetaData19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getNodeSettings();
        java.lang.String str17 = indexSettings12.getUUID();
        boolean boolean18 = indexSettings12.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        java.lang.String str18 = indexSettings12.getNodeName();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.lang.String str15 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = settings8.getByPrefix("active_allocations");
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings21 = settings17.getAsSettings("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        java.lang.String[] strArray30 = settings28.getAsArray("index.uuid");
        java.lang.String[] strArray32 = settings17.getAsArray("index.version.created", strArray30, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings2.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue6 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue7 = settings2.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue6);
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings1.dryRun(settings8);
        java.lang.String str10 = indexScopedSettings1.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData11.getMappings();
        int int14 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        java.lang.String str22 = settings17.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        int int24 = indexSettings23.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings23.getValue(timeValueSetting25);
        boolean boolean27 = indexSettings23.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings23.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData29.getMappings();
        int int32 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getAsGroups();
        java.lang.String str40 = settings35.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings35);
        int int42 = indexSettings41.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getValue(timeValueSetting43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings23.getValue(timeValueSetting43);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer47 = null;
        indexScopedSettings1.addSettingsUpdateConsumer(timeValueSetting43, timeValueConsumer46, timeValueConsumer47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long50 = indexMetaData49.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap51 = indexMetaData49.getMappings();
        int int52 = indexMetaData49.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        java.lang.String str57 = settings55.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings55.getAsGroups();
        java.lang.String str60 = settings55.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55);
        int int62 = indexSettings61.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings61.getValue(timeValueSetting63);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer65 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting43, timeValueSetting63, timeValueBiConsumer65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder68.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate75 = null;
        org.elasticsearch.common.settings.Settings settings76 = settings74.filter(strPredicate75);
        java.lang.String str78 = settings76.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder70.put(settings76);
        org.elasticsearch.common.settings.Settings settings81 = settings76.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet82 = settings81.names();
        org.elasticsearch.common.settings.Settings settings84 = settings81.getByPrefix("");
        indexScopedSettings67.validate(settings84);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long87 = indexMetaData86.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap88 = indexMetaData86.getMappings();
        org.elasticsearch.common.settings.Settings settings89 = indexMetaData86.getSettings();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings67.dryRun(settings89);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings0.dryRun(settings90);
        boolean boolean92 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings90);
        boolean boolean93 = settings90.isEmpty();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings90, streamOutput94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(sizeValue7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 1);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.state(state14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.settings(settings16);
        boolean boolean20 = settings16.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder5.settings(settings16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder5.mapping("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str35 = settings33.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put(settings33);
        java.lang.String str38 = builder27.get("");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder27.put("state-", (int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder5.settings(builder41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.creationDate(32L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder50.primaryTerm((int) (byte) 1, (long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder50.state(state56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder61.put(settings67);
        org.elasticsearch.common.settings.Settings settings72 = settings67.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet73 = settings67.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder57.putActiveAllocationIds(0, strSet73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder47.putActiveAllocationIds((int) (short) 0, strSet73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder44.putActiveAllocationIds((-1), strSet73);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = builder76.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.lang.String str30 = settings28.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder22.put(settings28);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings28.getAsMap();
        java.lang.String str35 = settings28.get("", "primary_terms");
        java.util.Set<java.lang.String> strSet36 = settings28.names();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long39 = indexMetaData38.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap40 = indexMetaData38.getMappings();
        int int41 = indexMetaData38.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.Settings settings44 = settings42.filter(strPredicate43);
        java.lang.String str46 = settings44.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings44.getAsGroups();
        java.lang.String str49 = settings44.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings44);
        int int51 = indexSettings50.getMaxResultWindow();
        boolean boolean52 = indexSettings50.isQueryStringAnalyzeWildcard();
        boolean boolean53 = indexSettings50.isTTLPurgeDisabled();
        boolean boolean54 = indexSettings50.isWarmerEnabled();
        boolean boolean55 = indexSettings50.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability56 = indexSettings50.getTranslogDurability();
        boolean boolean57 = indexSettings50.isQueryStringLenient();
        boolean boolean58 = indexSettings50.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting59 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings50.getValue(timeValueSetting59);
        org.elasticsearch.common.unit.TimeValue timeValue61 = settings28.getAsTime("index.version.created", timeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings28);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput63 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData19.writeTo(streamOutput63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "primary_terms" + "'", str35, "primary_terms");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10000 + "'", int51 == 10000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + durability56 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability56.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeValueSetting59);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(timeValue61);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig18 = indexSettings12.getMergeSchedulerConfig();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings12.getIndexMetaData();
        int int20 = indexMetaData19.getNumberOfShards();
        int int21 = indexMetaData19.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexSettings12.getIndexMetaData();
        int int17 = indexMetaData16.getNumberOfReplicas();
        org.elasticsearch.common.xcontent.XContentParser xContentParser18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups();
        java.lang.String str30 = settings25.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25);
        java.lang.String str32 = indexSettings31.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability33 = indexSettings31.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher34 = indexSettings31.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexMetaData16.fromXContent(xContentParser18, parseFieldMatcher34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + durability33 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability33.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher34);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int13 = builder12.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.index("index.number_of_shards");
        int int18 = builder12.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder12.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder12.creationDate((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte25 = state24.id();
        byte byte26 = state24.id();
        byte byte27 = state24.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder22.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder8.state(state24);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.putAlias(aliasMetaData30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings12 = builder2.build();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("index.blocks.write", (long) 10, byteSizeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxResultWindow();
        org.elasticsearch.Version version18 = indexSettings12.getIndexVersionCreated();
        int int19 = indexSettings12.getNumberOfShards();
        boolean boolean20 = indexSettings12.isWarmerEnabled();
        java.lang.String str21 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("");
        java.lang.String str18 = builder16.remove("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.settings(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings26.filter(strPredicate27);
        java.lang.String str30 = settings28.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder22.put(settings28);
        java.lang.String[] strArray38 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder22.putArray("", (java.util.List<java.lang.String>) strList39);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder11.settings(builder41);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings47.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue51 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue52 = settings47.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue51);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = settings53.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.put(strMap54);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(sizeValue52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings12.getTranslogDurability();
        java.lang.String str18 = indexSettings12.customDataPath();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        boolean boolean20 = indexSettings12.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap1 = settings0.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder2 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params3 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = settings0.toXContent(xContentBuilder2, params3);
        java.lang.String str7 = settings0.get("index.shared_filesystem.recover_on_any_node", "hi!");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings0.getAsGroups();
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings0.getAsSize("-1", sizeValue10);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(params3);
        org.junit.Assert.assertNull(xContentBuilder4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.minimum_compatible");
        boolean boolean5 = indexMetaData0.isSameUUID("index.number_of_shards");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        java.lang.String str16 = settings14.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings14.getAsGroups();
        java.lang.String str19 = settings14.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings14);
        int int21 = indexSettings20.getNumberOfShards();
        boolean boolean22 = indexSettings20.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher23 = indexSettings20.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = indexMetaData0.fromXContent(xContentParser7, parseFieldMatcher23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher23);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        java.lang.String str18 = indexSettings12.getUUID();
        java.lang.String str19 = indexSettings12.getUUID();
        boolean boolean20 = indexSettings12.isShadowReplicaIndex();
        boolean boolean21 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean22 = indexSettings12.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.settings(settings21);
        org.elasticsearch.common.settings.Settings settings26 = settings21.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue28 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue29 = settings21.getAsSize("primary_terms", sizeValue28);
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings21);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version38 = null;
        org.elasticsearch.Version version39 = settings33.getAsVersion("index.creation_date_string", version38);
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings41 = settings33.filter(strPredicate40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings16.diff(settings21, settings33);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexScopedSettings16.get(timeValueSetting43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings12.getValue(timeValueSetting43);
        boolean boolean46 = indexSettings12.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(sizeValue29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNull(version39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(timeValueSetting43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        boolean boolean14 = indexSettings12.isTTLPurgeDisabled();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        boolean boolean16 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeValue17);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas((int) (byte) 10);
        int int8 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int13 = builder12.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.index("index.version.upgraded");
        int int16 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = builder18.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.removeAlias("100.0");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder23.putMapping(mappingMetaData28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.putCustom("index.shadow_replicas", custom17);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.putAlias(builder19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder21.putArray("", (java.util.List<java.lang.String>) strList38);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder49.internalMap();
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder49.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder43.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder2.put(objArray56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder61.version((long) 1);
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.Settings settings66 = settings64.filter(strPredicate65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder61.settings(settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state68 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder67.state(state68);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate71 = null;
        org.elasticsearch.common.settings.Settings settings72 = settings70.filter(strPredicate71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder69.settings(settings70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom75 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder69.putCustom("", custom75);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder78.version((long) 1);
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.Settings settings83 = settings81.filter(strPredicate82);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder78.settings(settings81);
        org.elasticsearch.common.settings.Settings settings86 = settings81.getAsSettings("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder69.settings(settings86);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder59.put(settings86);
        org.elasticsearch.common.unit.SizeValue sizeValue90 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue91 = settings86.getAsSize("index.number_of_replicas", sizeValue90);
        java.lang.String str93 = settings86.toDelimitedString('a');
        org.elasticsearch.common.io.stream.StreamOutput streamOutput94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings86, streamOutput94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + state68 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state68.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(sizeValue91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("100.0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings0.get("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardSetting11);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("state-", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfReplicas((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = builder18.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int10 = indexMetaData9.getTotalNumberOfShards();
        int int11 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData9.getInitialRecoveryFilters();
        java.lang.String str13 = indexMetaData9.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData9);
        boolean boolean16 = indexMetaData0.isSameUUID("index.shadow_replicas");
        boolean boolean18 = indexMetaData0.isSameUUID("");
        java.lang.Class<?> wildcardClass19 = indexMetaData0.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.lang.String str4 = settings2.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings2);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put("index.data_path", 10000);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.read", "");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.put(objDictionary14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData14.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData14.activeAllocationIds((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        boolean boolean20 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings12.getGlobalCheckpointInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue27 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue28 = settings23.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings22.dryRun(settings29);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings33.getAsMap();
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings22.dryRun(settings33);
        java.lang.String str39 = indexScopedSettings22.nodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData41.getMappings();
        int int44 = indexMetaData41.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.Settings settings47 = settings45.filter(strPredicate46);
        java.lang.String str49 = settings47.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getAsGroups();
        java.lang.String str52 = settings47.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings47);
        int int54 = indexSettings53.getMaxResultWindow();
        boolean boolean55 = indexSettings53.isQueryStringAnalyzeWildcard();
        java.lang.String str56 = indexSettings53.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig57 = indexSettings53.getMergeSchedulerConfig();
        java.lang.String str58 = indexSettings53.customDataPath();
        org.elasticsearch.common.settings.Settings settings59 = indexSettings53.getNodeSettings();
        indexScopedSettings40.validate(settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap63 = indexMetaData61.getMappings();
        int int64 = indexMetaData61.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings67.getAsGroups();
        java.lang.String str72 = settings67.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings67);
        java.lang.String str74 = indexSettings73.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting75 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings73.getValue(timeValueSetting75);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer77 = null;
        indexScopedSettings40.addSettingsUpdateConsumer(timeValueSetting75, timeValueConsumer77);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer79 = null;
        indexScopedSettings22.addSettingsUpdateConsumer(timeValueSetting75, timeValueConsumer79);
        org.elasticsearch.common.unit.TimeValue timeValue81 = indexSettings12.getValue(timeValueSetting75);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(sizeValue28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10000 + "'", int54 == 10000);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "_all" + "'", str56, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(timeValueSetting75);
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertNotNull(timeValue81);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.blocks.metadata");
        java.lang.String str17 = settings15.toDelimitedString('#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "index.blocks.read_only", "state-", "index.version.upgraded", "index.version.upgraded", "index.version.minimum_compatible", "index.version.upgraded_string", "", "_na_", "index.number_of_shards", "index.auto_expand_replicas" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("index.uuid", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.putCustom("index.shared_filesystem", custom28);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = builder26.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String str13 = builder2.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("index.shared_filesystem", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings18 = builder16.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        java.lang.String str25 = settings23.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put(settings23);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.version((long) 1);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder30.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.state(state37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder38.settings(settings39);
        java.lang.Boolean boolean45 = settings39.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = settings39.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder26.put(settings39);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.Settings settings58 = settings56.filter(strPredicate57);
        java.lang.String str60 = settings58.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put(settings58);
        java.lang.String[] strArray68 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder52.putArray("", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder47.putArray("hi!", (java.util.List<java.lang.String>) strList69);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder72.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder13.settings(builder73);
        org.elasticsearch.common.settings.Settings settings75 = builder73.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "primary_terms" + "'", str14, "primary_terms");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + boolean45 + "' != '" + false + "'", boolean45, false);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings75);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings0.get("index.data_path");
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(wildcardSetting10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy16 = indexSettings12.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher17 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData18.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        java.util.Set<java.lang.String> strSet22 = indexMetaData18.activeAllocationIds((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy16);
        org.junit.Assert.assertNotNull(parseFieldMatcher17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder21.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.normalizePrefix("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.auto_expand_replicas", 0);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.normalizePrefix("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder61 = builder32.put("index.version.created_string", 1L, byteSizeUnit60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getAsGroups(false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData21.getMappings();
        int int23 = indexMetaData21.getNumberOfShards();
        org.apache.lucene.util.Version version24 = indexMetaData21.getMinimumCompatibleVersion();
        org.elasticsearch.Version version25 = indexMetaData21.getCreationVersion();
        org.elasticsearch.Version version26 = settings15.getAsVersion("index.creation_date", version25);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(version26);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData0.excludeFilters();
        org.apache.lucene.util.Version version39 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNull(version39);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings12.getSettings();
        java.lang.String str16 = indexSettings12.getDefaultField();
        java.lang.String str17 = indexSettings12.getDefaultField();
        int int18 = indexSettings12.getMaxRescoreWindow();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_all" + "'", str16, "_all");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_all" + "'", str17, "_all");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        long long4 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings9.filter(strPredicate10);
        java.lang.String str13 = settings11.toDelimitedString('#');
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings11.getAsMap();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings17.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = settings17.toXContent(xContentBuilder19, params20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings15.toXContent(xContentBuilder16, params20);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(params20);
        org.junit.Assert.assertNull(xContentBuilder21);
        org.junit.Assert.assertNull(xContentBuilder22);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder37.put(settings43);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.putArray("", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.putArray("hi!", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder57.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder58.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder58.loadFromSource("_all");
        java.io.InputStream inputStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.loadFromStream("", inputStream64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue17);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder2.put("index.blocks.read", (long) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.write", (long) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index7 = indexMetaData4.getMergeSourceIndex();
        long long8 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mappingOrDefault("index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            long long13 = indexMetaData4.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("index.number_of_shards", (float) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("", (double) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder8.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.blocks.read_only", (int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("100.0", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) 1);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.settings(settings6);
        org.elasticsearch.common.settings.Settings settings11 = settings6.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings6.getAsSize("primary_terms", sizeValue13);
        boolean boolean15 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings18.getAsGroups();
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version23 = null;
        org.elasticsearch.Version version24 = settings18.getAsVersion("index.creation_date_string", version23);
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings26 = settings18.filter(strPredicate25);
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings1.diff(settings6, settings18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting28 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings30.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue34 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue35 = settings30.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings29.dryRun(settings36);
        java.lang.String str38 = indexScopedSettings29.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long40 = indexMetaData39.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap41 = indexMetaData39.getMappings();
        int int42 = indexMetaData39.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        java.lang.String str47 = settings45.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getAsGroups();
        java.lang.String str50 = settings45.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        int int52 = indexSettings51.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue54 = indexSettings51.getValue(timeValueSetting53);
        boolean boolean55 = indexSettings51.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue56 = indexSettings51.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long58 = indexMetaData57.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap59 = indexMetaData57.getMappings();
        int int60 = indexMetaData57.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate62 = null;
        org.elasticsearch.common.settings.Settings settings63 = settings61.filter(strPredicate62);
        java.lang.String str65 = settings63.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getAsGroups();
        java.lang.String str68 = settings63.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings63);
        int int70 = indexSettings69.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting71 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings69.getValue(timeValueSetting71);
        org.elasticsearch.common.unit.TimeValue timeValue73 = indexSettings51.getValue(timeValueSetting71);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer74 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer75 = null;
        indexScopedSettings29.addSettingsUpdateConsumer(timeValueSetting71, timeValueConsumer74, timeValueConsumer75);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer77 = null;
        indexScopedSettings1.addSettingsUpdateConsumer(timeValueSetting28, timeValueSetting71, timeValueBiConsumer77);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings79.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue83 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue84 = settings79.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue83);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings79);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings1.applySettings(settings85);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting88 = indexScopedSettings1.get("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate90 = null;
        org.elasticsearch.common.settings.Settings settings91 = settings89.filter(strPredicate90);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings91.getAsGroups();
        org.elasticsearch.common.settings.Settings settings94 = settings91.getAsSettings("index.auto_expand_replicas");
        boolean boolean96 = settings94.equals((java.lang.Object) (-1L));
        org.elasticsearch.common.settings.Settings settings97 = indexScopedSettings1.dryRun(settings94);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings98 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(timeValueSetting28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(sizeValue35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(timeValue56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNull(sizeValue84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(wildcardSetting88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(settings97);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put(settings25);
        org.elasticsearch.common.settings.Settings settings30 = settings25.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet31 = settings30.names();
        java.lang.String[] strArray33 = settings30.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings30);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap35 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData14.includeFilters();
        org.elasticsearch.Version version37 = indexMetaData14.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData14.includeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData14.writeTo(streamOutput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int11 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.state(state28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.settings(settings30);
        boolean boolean34 = settings30.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder19.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder13.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData38.getMappings();
        int int40 = indexMetaData38.getNumberOfShards();
        long long41 = indexMetaData38.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = indexScopedSettings0.copy(settings30, indexMetaData38);
        java.lang.String str43 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting44 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexScopedSettings0.get(timeValueSetting44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long47 = indexMetaData46.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap48 = indexMetaData46.getMappings();
        int int49 = indexMetaData46.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        java.lang.String str54 = settings52.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings52.getAsGroups();
        java.lang.String str57 = settings52.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings52);
        int int59 = indexSettings58.getMaxResultWindow();
        boolean boolean60 = indexSettings58.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap63 = indexMetaData61.getMappings();
        int int64 = indexMetaData61.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.lang.String str69 = settings67.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings67.getAsGroups();
        java.lang.String str72 = settings67.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings67);
        int int74 = indexSettings73.getMaxResultWindow();
        boolean boolean75 = indexSettings73.isQueryStringAnalyzeWildcard();
        boolean boolean76 = indexSettings73.isTTLPurgeDisabled();
        boolean boolean77 = indexSettings73.isWarmerEnabled();
        boolean boolean78 = indexSettings73.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability79 = indexSettings73.getTranslogDurability();
        boolean boolean80 = indexSettings73.isQueryStringLenient();
        boolean boolean81 = indexSettings73.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting82 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue83 = indexSettings73.getValue(timeValueSetting82);
        org.elasticsearch.common.unit.TimeValue timeValue84 = indexSettings58.getValue(timeValueSetting82);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer85 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer86 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting82, timeValueConsumer85, timeValueConsumer86);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting88 = org.elasticsearch.index.IndexSettings.INDEX_REFRESH_INTERVAL_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue89 = indexScopedSettings0.get(timeValueSetting88);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(timeValueSetting44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10000 + "'", int74 == 10000);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(timeValueSetting82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(timeValue84);
        org.junit.Assert.assertNotNull(timeValueSetting88);
        org.junit.Assert.assertNotNull(timeValue89);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.normalizePrefix("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("state-", (float) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.putNull("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData41.getMappings();
        int int44 = indexMetaData41.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters45 = indexMetaData41.getInitialRecoveryFilters();
        org.elasticsearch.Version version46 = indexMetaData41.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder39.put("active_allocations", version46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray65 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder57.putArray("index.auto_expand_replicas", strArray65);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings68.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings68.getGroups("index.shared_filesystem");
        java.lang.String[] strArray74 = settings68.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder66.putArray("index.version.upgraded", strArray74);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder47.extendArray("index.shared_filesystem.recover_on_any_node", strArray74);
        org.elasticsearch.common.settings.Settings settings77 = builder47.build();
        java.io.InputStream inputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder80 = builder47.loadFromStream("active_allocations", inputStream79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(settings77);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData12.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData12.mapping("index.creation_date_string");
        org.elasticsearch.Version version17 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData21.getMappings();
        int int24 = indexMetaData21.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getAsGroups();
        java.lang.String str32 = settings27.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27);
        int int34 = indexSettings33.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting35 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings33.getValue(timeValueSetting35);
        int int37 = indexSettings33.getMaxRescoreWindow();
        boolean boolean39 = indexSettings33.matchesIndexName("hi!");
        org.elasticsearch.index.translog.Translog.Durability durability40 = indexSettings33.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings41 = indexSettings33.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings43 = settings41.getAsSettings("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.version((long) 1);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.Settings settings51 = settings49.filter(strPredicate50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder46.settings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder52.state(state53);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate56 = null;
        org.elasticsearch.common.settings.Settings settings57 = settings55.filter(strPredicate56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder54.settings(settings55);
        java.lang.String str60 = settings55.get("");
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings55);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = null;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap64 = settings63.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params66 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings63.toXContent(xContentBuilder65, params66);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = settings55.toXContent(xContentBuilder62, params66);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = settings41.toXContent(xContentBuilder44, params66);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = indexMetaData0.toXContent(xContentBuilder20, params66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + durability40 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability40.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(params66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNull(xContentBuilder68);
        org.junit.Assert.assertNull(xContentBuilder69);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int10 = builder9.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.version((long) 1);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder20.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.state(state27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.settings(settings29);
        boolean boolean33 = settings29.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder18.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder12.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap38 = indexMetaData37.getMappings();
        int int39 = indexMetaData37.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings40 = indexMetaData37.getSettings();
        org.apache.lucene.util.Version version41 = indexMetaData37.getMinimumCompatibleVersion();
        int int42 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder36.state(state43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder7.state(state43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder7.removeAlias("index.version.minimum_compatible");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder47.primaryTerm((int) (short) -1, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(version41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = settings8.getAsMap();
        java.lang.String str15 = settings8.get("", "primary_terms");
        org.elasticsearch.common.settings.Settings settings17 = settings8.getByPrefix("_na_");
        java.lang.Boolean boolean20 = settings17.getAsBoolean("_all", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings31 = builder30.build();
        java.util.Set<java.lang.String> strSet32 = settings31.names();
        boolean boolean33 = settings17.equals((java.lang.Object) strSet32);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "primary_terms" + "'", str15, "primary_terms");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.uuid");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        int int5 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        java.lang.String str4 = builder0.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.loadFromSource("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version((long) 1);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder24.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.state(state31);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder32.settings(settings33);
        java.lang.Boolean boolean39 = settings33.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = settings33.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder20.put(settings33);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder44.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        java.lang.String str54 = settings52.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder46.put(settings52);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder46.putArray("", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder41.putArray("hi!", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder6.putArray("hi!", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("archived.", (float) ' ');
        java.util.concurrent.TimeUnit timeUnit73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder74 = builder67.put("index.shared_filesystem", (long) (byte) 0, timeUnit73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + boolean39 + "' != '" + false + "'", boolean39, false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings10 = builder9.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.replacePropertyPlaceholders();
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.loadFromStream("index.blocks.write", inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("");
        java.lang.String str28 = builder26.remove("");
        org.elasticsearch.common.settings.Settings settings29 = builder26.build();
        java.lang.String str31 = builder26.get("index.shadow_replicas");
        java.lang.String str33 = builder26.remove("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings1.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue5 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue6 = settings1.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings7);
        java.lang.String str9 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer11 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer12 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting10, timeValueConsumer11, timeValueConsumer12);
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting16 = indexScopedSettings0.get("index.version.created");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings0.get("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.version((long) 1);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder34.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.state(state41);
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.Settings settings45 = settings43.filter(strPredicate44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder42.settings(settings43);
        java.lang.Boolean boolean49 = settings43.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = settings43.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder30.put(settings43);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = builder51.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((long) 1);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.Settings settings60 = settings58.filter(strPredicate59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder55.settings(settings58);
        int int62 = builder55.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder63 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        java.lang.String str73 = settings71.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder65.put(settings71);
        org.elasticsearch.common.settings.Settings settings76 = settings71.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet77 = settings71.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder55.settings(settings71);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state79 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder55.state(state79);
        java.lang.Class<?> wildcardClass81 = builder55.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder51.put("hi!", (java.lang.Class) wildcardClass81);
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, java.lang.String> strMap84 = settings83.getAsMap();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params86 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder87 = settings83.toXContent(xContentBuilder85, params86);
        java.lang.String[] strArray89 = settings83.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder51.put(settings83);
        java.lang.String str93 = settings83.get("primary_terms", "active_allocations");
        org.elasticsearch.common.settings.Settings settings94 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings83);
        org.elasticsearch.Version version96 = null;
        org.elasticsearch.Version version97 = settings94.getAsVersion("index.version.upgraded_string", version96);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(sizeValue6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardSetting16);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + false + "'", boolean49, false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state79.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(params86);
        org.junit.Assert.assertNull(xContentBuilder87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "active_allocations" + "'", str93, "active_allocations");
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNull(version97);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        long long7 = indexMetaData4.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int9 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData4.diff(indexMetaData8);
        long long11 = indexMetaData4.getVersion();
        java.lang.String str12 = indexMetaData4.getIndexUUID();
        org.elasticsearch.Version version13 = indexMetaData4.getCreationVersion();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData4.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version16 = indexMetaData4.getCreationVersion();
        java.lang.String str17 = indexMetaData4.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap20 = indexMetaData0.getAliases();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        int int18 = indexSettings12.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings12.getRefreshInterval();
        boolean boolean17 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder30.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder30.internalMap();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder30.put(objArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder24.put(objArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder42.put(settings48);
        org.elasticsearch.common.settings.Settings settings53 = settings48.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet54 = settings53.names();
        java.lang.String[] strArray56 = settings53.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder39.put(settings53);
        java.lang.String str59 = builder57.remove("index.number_of_shards");
        java.lang.String str61 = builder57.remove("hi!");
        java.io.InputStream inputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder64 = builder57.loadFromStream("index.auto_expand_replicas", inputStream63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        int int8 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put(settings17);
        org.elasticsearch.common.settings.Settings settings22 = settings17.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet23 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.creationDate((long) 'a');
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings29.filter(strPredicate30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings31.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params34 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings31.toXContent(xContentBuilder33, params34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder28.settings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder28.numberOfReplicas(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(params34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.index.translog.Translog.Durability durability19 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings12.getNodeSettings();
        java.lang.Boolean boolean23 = settings20.getAsBoolean("index.shared_filesystem", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + durability19 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability19.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + true + "'", boolean23, true);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings12.isTTLPurgeDisabled();
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        boolean boolean17 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings12.getTranslogDurability();
        boolean boolean19 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher20 = indexSettings12.getParseFieldMatcher();
        java.lang.String str21 = indexSettings12.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.state(state4);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder8.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder8.internalMap();
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder8.put(objArray15);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.blocks.metadata", "");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder5.settings(builder25);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder5.primaryTerm((int) (short) 100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(version6);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        int int2 = indexMetaData0.getNumberOfShards();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(settings4);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        java.lang.String str20 = builder18.get("");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder18.normalizePrefix("hi!");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder26 = builder18.put("index.number_of_shards", (long) ' ', byteSizeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String[] strArray18 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder2.putArray("", (java.util.List<java.lang.String>) strList19);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder30.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder30.internalMap();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder30.put(objArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder24.put(objArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder42.put(settings48);
        org.elasticsearch.common.settings.Settings settings53 = settings48.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet54 = settings53.names();
        java.lang.String[] strArray56 = settings53.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder39.put(settings53);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder39.putNull("index.version.upgraded");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder63 = builder39.put("index.auto_expand_replicas", (long) (short) -1, byteSizeUnit62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        long long16 = indexSettings12.getGcDeletesInMillis();
        int int17 = indexSettings12.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 60000L + "'", long16 == 60000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.index("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        long long10 = indexMetaData7.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int12 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData7.diff(indexMetaData11);
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData7.activeAllocationIds(1);
        long long16 = indexMetaData7.getCreationDate();
        org.elasticsearch.Version version17 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData7);
        int int19 = indexMetaData7.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings12.getIndexMetaData();
        org.elasticsearch.Version version65 = indexMetaData64.getUpgradedVersion();
        int int66 = indexMetaData64.getNumberOfReplicas();
        int int67 = indexMetaData64.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = indexMetaData64.readFrom(streamInput68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.matchesIndexName("hi!");
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig19 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean20 = indexSettings12.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue14 = settings8.getAsRatio("index.priority", "-1");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Ratio should be in [0-1.0], got [-1.0]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.state(state4);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder8.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder8.internalMap();
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder8.put(objArray15);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.read", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.blocks.metadata", "");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder5.settings(builder25);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.putAlias(aliasMetaData27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version2 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings3 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings3.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings11.getFlushThresholdSize();
        boolean boolean13 = indexSettings11.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        int int14 = indexSettings12.getMaxResultWindow();
        org.apache.lucene.index.MergePolicy mergePolicy15 = indexSettings12.getMergePolicy();
        boolean boolean16 = indexSettings12.isTTLPurgeDisabled();
        java.lang.String str17 = indexSettings12.getDefaultField();
        boolean boolean18 = indexSettings12.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_all" + "'", str17, "_all");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings12.getTranslogDurability();
        int int15 = indexSettings12.getNumberOfShards();
        boolean boolean16 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean17 = indexSettings12.isQueryStringAnalyzeWildcard();
        int int18 = indexSettings12.getNumberOfReplicas();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig19 = indexSettings12.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig19);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig14 = indexSettings12.getMergeSchedulerConfig();
        boolean boolean16 = indexSettings12.matchesIndexName("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = indexSettings12.getIndexMetaData();
        int int18 = indexSettings12.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings2.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue6 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue7 = settings2.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue6);
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings1.dryRun(settings8);
        java.lang.String str10 = indexScopedSettings1.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData11.getMappings();
        int int14 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.lang.String str19 = settings17.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getAsGroups();
        java.lang.String str22 = settings17.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17);
        int int24 = indexSettings23.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting25 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings23.getValue(timeValueSetting25);
        boolean boolean27 = indexSettings23.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings23.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData29.getMappings();
        int int32 = indexMetaData29.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings33.filter(strPredicate34);
        java.lang.String str37 = settings35.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getAsGroups();
        java.lang.String str40 = settings35.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings35);
        int int42 = indexSettings41.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting43 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue44 = indexSettings41.getValue(timeValueSetting43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings23.getValue(timeValueSetting43);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer46 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer47 = null;
        indexScopedSettings1.addSettingsUpdateConsumer(timeValueSetting43, timeValueConsumer46, timeValueConsumer47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long50 = indexMetaData49.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap51 = indexMetaData49.getMappings();
        int int52 = indexMetaData49.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings53.filter(strPredicate54);
        java.lang.String str57 = settings55.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings55.getAsGroups();
        java.lang.String str60 = settings55.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55);
        int int62 = indexSettings61.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings61.getValue(timeValueSetting63);
        java.util.function.BiConsumer<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.common.unit.TimeValue> timeValueBiConsumer65 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(timeValueSetting43, timeValueSetting63, timeValueBiConsumer65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder68.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate75 = null;
        org.elasticsearch.common.settings.Settings settings76 = settings74.filter(strPredicate75);
        java.lang.String str78 = settings76.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder70.put(settings76);
        org.elasticsearch.common.settings.Settings settings81 = settings76.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet82 = settings81.names();
        org.elasticsearch.common.settings.Settings settings84 = settings81.getByPrefix("");
        indexScopedSettings67.validate(settings84);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long87 = indexMetaData86.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap88 = indexMetaData86.getMappings();
        org.elasticsearch.common.settings.Settings settings89 = indexMetaData86.getSettings();
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings67.dryRun(settings89);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings0.dryRun(settings90);
        java.lang.String[] strArray93 = settings90.getAsArray("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(sizeValue7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        boolean boolean14 = indexSettings12.isDefaultAllowUnmappedFields();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        int int16 = indexSettings12.getMaxResultWindow();
        boolean boolean17 = indexSettings12.isWarmerEnabled();
        java.lang.String str18 = indexSettings12.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings settings13 = settings8.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet14 = settings13.names();
        java.lang.String[] strArray16 = settings13.getAsArray("index.shared_filesystem");
        java.lang.String str18 = settings13.get("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings15.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue19 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue20 = settings15.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue19);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings14.dryRun(settings21);
        java.lang.String str23 = indexScopedSettings14.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData24.getMappings();
        int int27 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.lang.String str32 = settings30.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getAsGroups();
        java.lang.String str35 = settings30.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30);
        int int37 = indexSettings36.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting38 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue39 = indexSettings36.getValue(timeValueSetting38);
        boolean boolean40 = indexSettings36.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings36.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap44 = indexMetaData42.getMappings();
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings46.filter(strPredicate47);
        java.lang.String str50 = settings48.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getAsGroups();
        java.lang.String str53 = settings48.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings48);
        int int55 = indexSettings54.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings54.getValue(timeValueSetting56);
        org.elasticsearch.common.unit.TimeValue timeValue58 = indexSettings36.getValue(timeValueSetting56);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer59 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer60 = null;
        indexScopedSettings14.addSettingsUpdateConsumer(timeValueSetting56, timeValueConsumer59, timeValueConsumer60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings12.getValue(timeValueSetting56);
        boolean boolean63 = indexSettings12.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings12.getIndexMetaData();
        org.elasticsearch.Version version65 = indexMetaData64.getUpgradedVersion();
        int int66 = indexMetaData64.getNumberOfReplicas();
        int int67 = indexMetaData64.getNumberOfShards();
        org.elasticsearch.index.Index index68 = indexMetaData64.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(sizeValue20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNull(index68);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (short) 1);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings15.filter(strPredicate16);
        java.util.Set<java.lang.String> strSet18 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.putActiveAllocationIds((int) (byte) 1, strSet18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.index("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            long long25 = builder23.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = settings2.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings2.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings2.getAsSize("index.version.upgraded", sizeValue10);
        java.lang.String[] strArray13 = settings2.getAsArray("");
        java.util.Set<java.lang.String> strSet14 = settings2.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings2.getAsGroups(true);
        java.lang.String[] strArray18 = null;
        java.lang.String[] strArray20 = settings2.getAsArray("archived.", strArray18, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean13 = indexSettings12.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        int int16 = indexSettings12.getMaxRescoreWindow();
        boolean boolean17 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean18 = indexSettings12.isQueryStringAllowLeadingWildcard();
        boolean boolean19 = indexSettings12.isOnSharedFilesystem();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = indexSettings12.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings12.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteSizeValue20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(timeValue22);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.lang.String[] strArray10 = new java.lang.String[] { "index.number_of_shards" };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.putArray("archived.", strArray10);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put("archived.", "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.lang.String str13 = builder2.get("");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder2.put("index.shared_filesystem", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version((long) 1);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.settings(settings24);
        int int28 = builder21.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings35.filter(strPredicate36);
        java.lang.String str39 = settings37.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(settings37);
        org.elasticsearch.common.settings.Settings settings42 = settings37.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet43 = settings37.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder21.settings(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder21.state(state45);
        java.lang.Class<?> wildcardClass47 = builder21.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder2.put("index.uuid", (java.lang.Class) wildcardClass47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData50);
        long long53 = indexMetaData50.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int55 = indexMetaData54.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff56 = indexMetaData50.diff(indexMetaData54);
        long long57 = indexMetaData50.getVersion();
        java.lang.String str58 = indexMetaData50.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long60 = indexMetaData59.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap61 = indexMetaData59.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long63 = indexMetaData62.getVersion();
        org.elasticsearch.Version version64 = indexMetaData62.getUpgradedVersion();
        boolean boolean65 = indexMetaData59.equals((java.lang.Object) indexMetaData62);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData50.diff(indexMetaData59);
        int int67 = indexMetaData59.getNumberOfShards();
        org.elasticsearch.Version version68 = indexMetaData59.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder48.put("index.", version68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = builder69.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "_na_" + "'", str58, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(version64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(version68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        long long45 = builder1.version();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder1.primaryTerm((int) (short) 10, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.putCustom("", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) 1);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings21.filter(strPredicate22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.state(state25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings27.filter(strPredicate28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.putCustom("state-", custom32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder30.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int38 = builder37.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder37.index("index.version.upgraded");
        int int41 = builder40.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = builder43.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder43.state(state46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder35.state(state46);
        byte byte49 = state46.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder16.state(state46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = builder53.mapping("index.version.created_string");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 0 + "'", byte49 == (byte) 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(mappingMetaData55);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.data_path", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        java.lang.String str14 = indexSettings12.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings12.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings12.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = settings16.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        java.lang.String str15 = settings13.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder7.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings24.getAsGroups();
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version29 = null;
        org.elasticsearch.Version version30 = settings24.getAsVersion("index.creation_date_string", version29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings24.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder18.putProperties(strMap31, strPredicate32, strFunction33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff39 = indexMetaData0.readDiffFrom(streamInput38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        int int3 = indexMetaData0.getNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = indexMetaData0.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData7.getMappings();
        int int10 = indexMetaData7.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData7.activeAllocationIds((int) (short) -1);
        int int13 = indexMetaData7.getNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = indexMetaData0.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getTotalNumberOfShards();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate6 = null;
        org.elasticsearch.common.settings.Settings settings7 = settings5.filter(strPredicate6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings7.getAsGroups();
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("index.auto_expand_replicas");
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentParser xContentParser17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap20 = indexMetaData18.getMappings();
        int int21 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        java.lang.String str26 = settings24.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getAsGroups();
        java.lang.String str29 = settings24.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        int int31 = indexSettings30.getMaxResultWindow();
        java.lang.String str32 = indexSettings30.getUUID();
        org.elasticsearch.index.translog.Translog.Durability durability33 = indexSettings30.getTranslogDurability();
        org.apache.lucene.index.MergePolicy mergePolicy34 = indexSettings30.getMergePolicy();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher35 = indexSettings30.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = indexMetaData0.fromXContent(xContentParser17, parseFieldMatcher35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertTrue("'" + durability33 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability33.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy34);
        org.junit.Assert.assertNotNull(parseFieldMatcher35);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder22 = builder18.put("index.shared_filesystem.recover_on_any_node", (long) (short) 0, byteSizeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        java.lang.String str15 = indexSettings12.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher16 = indexSettings12.getParseFieldMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings12.getTranslogDurability();
        java.lang.String str18 = indexSettings12.customDataPath();
        boolean boolean19 = indexSettings12.isShadowReplicaIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexSettings12.getIndexMetaData();
        boolean boolean21 = indexSettings12.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher16);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder5.mapping("index.blocks.write");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.version.upgraded", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.creation_date", 0.0d);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.put(objDictionary24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.lang.String str13 = indexSettings12.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings12.getIndexMetaData();
        boolean boolean15 = indexSettings12.isWarmerEnabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = indexSettings12.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings12.getGlobalCheckpointInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int5 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.diff(indexMetaData4);
        long long7 = indexMetaData0.getVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        boolean boolean13 = indexMetaData0.isSameUUID("index.blocks.write");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        java.lang.String str22 = settings20.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put(settings20);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version((long) 1);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.state(state34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings36.filter(strPredicate37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.settings(settings36);
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings36.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder23.put(settings36);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder11.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder11.put("index.version.upgraded_string", (int) (byte) 1);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder51 = builder11.put(objDictionary50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getMaxResultWindow();
        boolean boolean14 = indexSettings12.isQueryStringAnalyzeWildcard();
        java.lang.String str15 = indexSettings12.getDefaultField();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig16 = indexSettings12.getMergeSchedulerConfig();
        java.lang.String str17 = indexSettings12.customDataPath();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getNodeSettings();
        org.elasticsearch.Version version19 = indexSettings12.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(version19);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.common.settings.Settings settings9 = settings4.getAsSettings("hi!");
        org.elasticsearch.common.unit.SizeValue sizeValue11 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue12 = settings4.getAsSize("primary_terms", sizeValue11);
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings4);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue16 = settings4.getAsRatio("10", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage []");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(sizeValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 1);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.state(state22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.settings(settings24);
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = settings24.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder11.put(settings24);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.version((long) 1);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder36.settings(settings39);
        int int43 = builder36.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder44.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.Settings settings52 = settings50.filter(strPredicate51);
        java.lang.String str54 = settings52.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder46.put(settings52);
        org.elasticsearch.common.settings.Settings settings57 = settings52.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet58 = settings52.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder36.settings(settings52);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state60 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder36.state(state60);
        java.lang.Class<?> wildcardClass62 = builder36.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder32.put("hi!", (java.lang.Class) wildcardClass62);
        org.elasticsearch.common.settings.Settings settings64 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder32.put("10", 0.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + state60 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state60.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.number_of_shards");
        int int7 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData8.getMappings();
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder13.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings19.filter(strPredicate20);
        java.lang.String str23 = settings21.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings30.filter(strPredicate31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings32.getAsGroups();
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.number_of_replicas");
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings32.getAsVersion("index.creation_date_string", version37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings32.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder26.putProperties(strMap39, strPredicate40, strFunction41);
        boolean boolean43 = indexMetaData8.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder1.settings(builder42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder44.putCustom("index.number_of_replicas", custom46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder44.index("index.version.upgraded_string");
        long long50 = builder44.version();
        org.elasticsearch.common.settings.Settings.Builder builder51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder44.settings(builder51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings6.filter(strPredicate7);
        java.lang.String str10 = settings8.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put(settings8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings8.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings14 = settings8.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings16 = settings8.getAsSettings("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.auto_expand_replicas", "hi!");
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.read_only", "", "index.number_of_replicas", "index.blocks.read", "index.blocks.read", "index.blocks.read" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder26.putArray("index.auto_expand_replicas", strArray34);
        java.lang.String[] strArray36 = settings16.getAsArray("index.version.minimum_compatible", strArray34);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int40 = indexMetaData39.getTotalNumberOfShards();
        int int41 = indexMetaData39.getNumberOfReplicas();
        org.apache.lucene.util.Version version42 = indexMetaData39.getMinimumCompatibleVersion();
        long long43 = indexMetaData39.getCreationDate();
        org.elasticsearch.Version version44 = indexMetaData39.getCreationVersion();
        org.elasticsearch.Version version45 = settings37.getAsVersion("index.priority", version44);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(version42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(version45);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings10.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue14 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue15 = settings10.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings9.dryRun(settings16);
        java.lang.String str18 = indexScopedSettings9.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData19.getMappings();
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str27 = settings25.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getAsGroups();
        java.lang.String str30 = settings25.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings25);
        int int32 = indexSettings31.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting33 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue34 = indexSettings31.getValue(timeValueSetting33);
        boolean boolean35 = indexSettings31.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue36 = indexSettings31.getRefreshInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData37.getMappings();
        int int40 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.Settings settings43 = settings41.filter(strPredicate42);
        java.lang.String str45 = settings43.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getAsGroups();
        java.lang.String str48 = settings43.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43);
        int int50 = indexSettings49.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting51 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue52 = indexSettings49.getValue(timeValueSetting51);
        org.elasticsearch.common.unit.TimeValue timeValue53 = indexSettings31.getValue(timeValueSetting51);
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer54 = null;
        java.util.function.Consumer<org.elasticsearch.common.unit.TimeValue> timeValueConsumer55 = null;
        indexScopedSettings9.addSettingsUpdateConsumer(timeValueSetting51, timeValueConsumer54, timeValueConsumer55);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting58 = indexScopedSettings9.get("index.priority");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings59.getAsGroups(false);
        org.elasticsearch.common.unit.SizeValue sizeValue63 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue64 = settings59.getAsSize("index.shared_filesystem.recover_on_any_node", sizeValue63);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.Settings settings67 = settings65.filter(strPredicate66);
        java.util.Set<java.lang.String> strSet68 = settings67.names();
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings9.diff(settings59, settings67);
        org.elasticsearch.common.settings.Settings.Builder builder70 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder70.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.Settings settings78 = settings76.filter(strPredicate77);
        java.lang.String str80 = settings78.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder72.put(settings78);
        org.elasticsearch.common.settings.Settings settings83 = settings78.getByPrefix("index.shadow_replicas");
        java.util.Set<java.lang.String> strSet84 = settings78.names();
        java.lang.String str87 = settings78.get("", "index.version.created");
        java.util.Map<java.lang.String, java.lang.Object> strMap88 = settings78.getAsStructuredMap();
        indexScopedSettings9.validate(settings78);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params91 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = settings78.toXContent(xContentBuilder90, params91);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(sizeValue15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(wildcardSetting58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(sizeValue64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "index.version.created" + "'", str87, "index.version.created");
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNotNull(params91);
        org.junit.Assert.assertNull(xContentBuilder92);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 1);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.state(state8);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.settings(settings10);
        java.lang.String str15 = settings10.get("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings10.getGroups("_na_");
        java.lang.String str19 = settings10.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version22 = indexMetaData21.getCreationVersion();
        org.elasticsearch.Version version23 = settings10.getAsVersion("primary_terms", version22);
        org.elasticsearch.common.settings.Settings settings25 = settings10.getByPrefix("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        java.lang.String str36 = settings34.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put(settings34);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder28.putArray("", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = builder56.internalMap();
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder56.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put(objArray63);
        org.elasticsearch.common.settings.Settings.Builder builder67 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder67.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder69.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap75 = builder69.internalMap();
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder69.put(objArray76);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder80.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder80.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass85 = builder80.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder77.put("index.shared_filesystem.recover_on_any_node", (java.lang.Class) wildcardClass85);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder65.put("index.version.minimum_compatible", (java.lang.Class) wildcardClass85);
        boolean boolean88 = settings25.equals((java.lang.Object) wildcardClass85);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate5 = null;
        org.elasticsearch.common.settings.Settings settings6 = settings4.filter(strPredicate5);
        java.lang.String str8 = settings6.toDelimitedString('#');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getAsGroups();
        java.lang.String str11 = settings6.get("index.blocks.read");
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int13 = indexSettings12.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = org.elasticsearch.index.IndexSettings.INDEX_GC_DELETES_SETTING;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings12.getValue(timeValueSetting14);
        boolean boolean16 = indexSettings12.isWarmerEnabled();
        int int17 = indexSettings12.getMaxRescoreWindow();
        boolean boolean18 = indexSettings12.isShadowReplicaIndex();
        int int19 = indexSettings12.getNumberOfShards();
        java.lang.String str20 = indexSettings12.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_all" + "'", str20, "_all");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder2.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder2.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder2.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (short) 1);
        java.lang.Class<?> wildcardClass16 = builder11.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder2.put("index.number_of_shards", (java.lang.Class) wildcardClass16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings25.filter(strPredicate26);
        java.lang.String str29 = settings27.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder21.put(settings27);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.", "index.auto_expand_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder21.putArray("", (java.util.List<java.lang.String>) strList38);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.shadow_replicas", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("primary_terms", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.normalizePrefix("index.blocks.read");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder49.internalMap();
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder49.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder43.put(objArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder2.put(objArray56);
        java.io.InputStream inputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.loadFromStream("index.version.created", inputStream61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null;
        org.elasticsearch.common.settings.Settings settings2 = settings0.filter(strPredicate1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params5 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = settings2.toXContent(xContentBuilder4, params5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData7.getMappings();
        int int9 = indexMetaData7.getNumberOfShards();
        long long10 = indexMetaData7.getCreationDate();
        boolean boolean11 = settings2.equals((java.lang.Object) long10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings2.getGroups("index.blocks.write");
        org.elasticsearch.common.unit.SizeValue sizeValue15 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue16 = settings2.getAsSize("index.creation_date", sizeValue15);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(params5);
        org.junit.Assert.assertNull(xContentBuilder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(sizeValue16);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) 1);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings12.filter(strPredicate13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder9.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.state(state16);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings18.filter(strPredicate19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.settings(settings18);
        java.lang.Boolean boolean24 = settings18.getAsBoolean("index.blocks.read", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = settings18.getAsStructuredMap();
        boolean boolean26 = settings18.isEmpty();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings30.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings18.toXContent(xContentBuilder27, params33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings6.toXContent(xContentBuilder7, params33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
    }
}
